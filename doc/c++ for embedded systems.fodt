<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><meta:initial-creator>arkady </meta:initial-creator><meta:creation-date>2015-04-24T15:47:16.425999108</meta:creation-date><dc:date>2015-05-23T08:44:14.406926149</dc:date><dc:creator>arkady </dc:creator><meta:editing-duration>P7DT17H7M4S</meta:editing-duration><meta:editing-cycles>2540</meta:editing-cycles><meta:generator>LibreOffice/4.2.8.2$Linux_X86_64 LibreOffice_project/420m0$Build-2</meta:generator><meta:document-statistic meta:table-count="1" meta:image-count="0" meta:object-count="0" meta:page-count="162" meta:paragraph-count="1748" meta:word-count="12634" meta:character-count="89809" meta:non-whitespace-character-count="73220"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">770100</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">22613</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">16630</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">16385</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">782699</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">770100</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">22611</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">786728</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">3</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">130</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">1049985</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="Rsid" config:type="int">1438785</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="OpenSymbol" svg:font-family="OpenSymbol" style:font-charset="x-symbol"/>
  <style:font-face style:name="DejaVuSansMono" svg:font-family="DejaVuSansMono, &apos;DejaVu Sans Mono&apos;, courier, monospace"/>
  <style:font-face style:name="Times New Roman" svg:font-family="&apos;Times New Roman&apos;"/>
  <style:font-face style:name="arial" svg:font-family="arial"/>
  <style:font-face style:name="arial1" svg:font-family="arial, helvetica, clean, sans-serif"/>
  <style:font-face style:name="Monospace1" svg:font-family="Monospace" style:font-family-generic="roman"/>
  <style:font-face style:name="FreeSans1" svg:font-family="FreeSans" style:font-family-generic="swiss"/>
  <style:font-face style:name="Monospace" svg:font-family="Monospace" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Mono" svg:font-family="&apos;Liberation Mono&apos;" style:font-adornments="Regular" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Droid Sans Fallback" svg:font-family="&apos;Droid Sans Fallback&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="FreeSans" svg:font-family="FreeSans" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:writing-mode="lr-tb" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Droid Sans Fallback" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.5in" style:writing-mode="lr-tb"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Droid Sans Fallback" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" style:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Droid Sans Fallback" style:font-family-asian="&apos;Droid Sans Fallback&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="FreeSans" style:font-family-complex="FreeSans" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0972in" style:contextual-spacing="false" fo:line-height="120%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.0835in" fo:margin-bottom="0.0835in" style:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Heading_20_1" style:display-name="Heading 1" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="1" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" style:contextual-spacing="false"/>
   <style:text-properties fo:font-size="130%" fo:font-weight="bold" style:font-size-asian="130%" style:font-weight-asian="bold" style:font-size-complex="130%" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Text_20_body_20_indent" style:display-name="Text body indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-left="0.1965in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Heading_20_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="2" style:class="text">
   <style:paragraph-properties fo:margin-top="0.139in" fo:margin-bottom="0.0835in" style:contextual-spacing="false"/>
   <style:text-properties fo:font-size="115%" fo:font-weight="bold" style:font-size-asian="115%" style:font-weight-asian="bold" style:font-size-complex="115%" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="First_20_line_20_indent" style:display-name="First line indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0.1965in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Hanging_20_indent" style:display-name="Hanging indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-left="0.3937in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="-0.1965in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="0in"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Preformatted_20_Text" style:display-name="Preformatted Text" style:family="paragraph" style:parent-style-name="Standard" style:class="html" style:master-page-name="">
   <style:paragraph-properties fo:keep-together="always" style:page-number="auto" fo:break-before="auto" fo:break-after="auto" fo:background-color="transparent">
    <style:background-image/>
   </style:paragraph-properties>
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-style-name="Regular" style:font-family-generic="modern" style:font-pitch="fixed" fo:font-size="10pt" style:font-size-asian="10.5pt"/>
  </style:style>
  <style:style style:name="Quotations" style:family="paragraph" style:parent-style-name="Standard" style:class="html" style:master-page-name="">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="3in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false" style:page-number="auto" fo:background-color="transparent" style:shadow="none">
    <style:tab-stops/>
    <style:background-image/>
   </style:paragraph-properties>
   <style:text-properties fo:font-style="italic" style:font-size-asian="10.5pt"/>
  </style:style>
  <style:style style:name="Title" style:family="paragraph" style:parent-style-name="Heading" style:class="chapter"/>
  <style:style style:name="Subtitle" style:family="paragraph" style:parent-style-name="Heading" style:class="chapter"/>
  <style:style style:name="Heading_20_3" style:display-name="Heading 3" style:family="paragraph" style:parent-style-name="Heading" style:class="text"/>
  <style:style style:name="Marginalia" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text"/>
  <style:style style:name="Header_20_right" style:display-name="Header right" style:family="paragraph" style:parent-style-name="Standard" style:class="extra"/>
  <style:style style:name="List_20_1" style:display-name="List 1" style:family="paragraph" style:parent-style-name="List" style:class="list"/>
  <style:style style:name="Numbering_20_1" style:display-name="Numbering 1" style:family="paragraph" style:parent-style-name="List" style:class="list"/>
  <style:style style:name="List_20_Indent" style:display-name="List Indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text"/>
  <style:style style:name="Contents_20_Heading" style:display-name="Contents Heading" style:family="paragraph" style:parent-style-name="Heading" style:class="index">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="16pt" fo:font-weight="bold" style:font-size-asian="16pt" style:font-weight-asian="bold" style:font-size-complex="16pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Contents_20_1" style:display-name="Contents 1" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Contents_20_2" style:display-name="Contents 2" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin-left="0.1965in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="6.7283in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Table_20_Contents" style:display-name="Table Contents" style:family="paragraph" style:parent-style-name="Standard" style:class="extra"/>
  <style:style style:name="Table_20_Heading" style:display-name="Table Heading" style:family="paragraph" style:parent-style-name="Table_20_Contents" style:class="extra"/>
  <style:style style:name="Bullet_20_Symbols" style:display-name="Bullet Symbols" style:family="text">
   <style:text-properties style:font-name="OpenSymbol" fo:font-family="OpenSymbol" style:font-charset="x-symbol" style:font-name-asian="OpenSymbol" style:font-family-asian="OpenSymbol" style:font-charset-asian="x-symbol" style:font-name-complex="OpenSymbol" style:font-family-complex="OpenSymbol" style:font-charset-complex="x-symbol"/>
  </style:style>
  <style:style style:name="Emphasis" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text">
   <style:text-properties fo:color="#000080" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="Index_20_Link" style:display-name="Index Link" style:family="text"/>
  <style:style style:name="Citation" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.3in" fo:text-indent="-0.3in" fo:margin-left="0.3in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.4in" fo:text-indent="-0.4in" fo:margin-left="0.4in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.5in" fo:text-indent="-0.5in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.6in" fo:text-indent="-0.6in" fo:margin-left="0.6in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.7in" fo:text-indent="-0.7in" fo:margin-left="0.7in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.8in" fo:text-indent="-0.8in" fo:margin-left="0.8in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.9in" fo:text-indent="-0.9in" fo:margin-left="0.9in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1in" fo:text-indent="-1in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.1in" fo:text-indent="-1.1in" fo:margin-left="1.1in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.2in" fo:text-indent="-1.2in" fo:margin-left="1.2in"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
  <style:default-page-layout>
   <style:page-layout-properties style:writing-mode="lr-tb" style:layout-grid-standard-mode="true"/>
  </style:default-page-layout>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="PIOUserInterface" style:family="table">
   <style:table-properties style:width="6.6875in" table:align="left"/>
  </style:style>
  <style:style style:name="PIOUserInterface.A" style:family="table-column">
   <style:table-column-properties style:column-width="0.8125in"/>
  </style:style>
  <style:style style:name="PIOUserInterface.B" style:family="table-column">
   <style:table-column-properties style:column-width="3.25in"/>
  </style:style>
  <style:style style:name="PIOUserInterface.C" style:family="table-column">
   <style:table-column-properties style:column-width="1.125in"/>
  </style:style>
  <style:style style:name="PIOUserInterface.D" style:family="table-column">
   <style:table-column-properties style:column-width="1.5in"/>
  </style:style>
  <style:style style:name="PIOUserInterface.A1" style:family="table-cell">
   <style:table-cell-properties fo:padding="0.0382in" fo:border-left="0.05pt solid #000000" fo:border-right="none" fo:border-top="0.05pt solid #000000" fo:border-bottom="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="PIOUserInterface.D1" style:family="table-cell">
   <style:table-cell-properties fo:padding="0.0382in" fo:border="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="PIOUserInterface.A2" style:family="table-cell">
   <style:table-cell-properties fo:padding="0.0382in" fo:border-left="0.05pt solid #000000" fo:border-right="none" fo:border-top="none" fo:border-bottom="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="PIOUserInterface.D2" style:family="table-cell">
   <style:table-cell-properties fo:padding="0.0382in" fo:border-left="0.05pt solid #000000" fo:border-right="0.05pt solid #000000" fo:border-top="none" fo:border-bottom="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties officeooo:paragraph-rsid="0014cf23"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
   <style:text-properties fo:color="#000000" style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
   <style:text-properties fo:color="#000000" style:font-name="Monospace" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P12" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:text-underline-style="none"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" fo:break-before="page"/>
  </style:style>
  <style:style style:name="P14" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" fo:break-before="page"/>
   <style:text-properties officeooo:paragraph-rsid="0014cf23"/>
  </style:style>
  <style:style style:name="P15" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P16" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="P17" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#000000"/>
  </style:style>
  <style:style style:name="P18" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P19" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P20" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" officeooo:paragraph-rsid="00100581" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P21" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="P22" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P23" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P24" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties style:font-name="Monospace"/>
  </style:style>
  <style:style style:name="P25" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P26" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties officeooo:paragraph-rsid="00100581"/>
  </style:style>
  <style:style style:name="P27" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P28" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P29" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:color="#000000" style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P30" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P31" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties officeooo:paragraph-rsid="0014cf23"/>
  </style:style>
  <style:style style:name="P32" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:text-align="start" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P33" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:text-align="end" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P34" style:family="paragraph" style:parent-style-name="Quotations">
   <style:text-properties officeooo:rsid="0012962e" officeooo:paragraph-rsid="00147669"/>
  </style:style>
  <style:style style:name="P35" style:family="paragraph" style:parent-style-name="Quotations">
   <style:text-properties officeooo:paragraph-rsid="00147669"/>
  </style:style>
  <style:style style:name="P36" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="11.0102in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P37" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:margin-left="11in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="11in" style:auto-text-indent="false">
    <style:tab-stops/>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P38" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="15.3752in" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P39" style:family="paragraph" style:parent-style-name="Contents_20_2">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P40" style:family="paragraph" style:parent-style-name="Contents_20_1">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P41" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P42" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties fo:color="#000000"/>
  </style:style>
  <style:style style:name="P43" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:rsid="0014cf23" officeooo:paragraph-rsid="0014cf23"/>
  </style:style>
  <style:style style:name="P44" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:paragraph-rsid="0014cf23"/>
  </style:style>
  <style:style style:name="P45" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P46" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P47" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:rsid="0012962e"/>
  </style:style>
  <style:style style:name="P48" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:paragraph-rsid="0012962e"/>
  </style:style>
  <style:style style:name="P49" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P50" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P51" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties style:font-name="Monospace"/>
  </style:style>
  <style:style style:name="P52" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P53" style:family="paragraph" style:parent-style-name="Title">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P54" style:family="paragraph" style:parent-style-name="Heading_20_3">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P55" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P56" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P57" style:family="paragraph" style:parent-style-name="Title">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P58" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties fo:color="#000000"/>
  </style:style>
  <style:style style:name="P59" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P60" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="0012962e" officeooo:paragraph-rsid="0014cf23"/>
  </style:style>
  <style:style style:name="P61" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="00147669"/>
  </style:style>
  <style:style style:name="P62" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="00147669" officeooo:paragraph-rsid="00147669"/>
  </style:style>
  <style:style style:name="P63" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="0014cf23" officeooo:paragraph-rsid="0014cf23"/>
  </style:style>
  <style:style style:name="P64" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P65" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="0015f441"/>
  </style:style>
  <style:style style:name="P66" style:family="paragraph" style:parent-style-name="Heading_20_1" style:list-style-name=""/>
  <style:style style:name="P67" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P68" style:family="paragraph" style:parent-style-name="Heading_20_2" style:list-style-name=""/>
  <style:style style:name="P69" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P70" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:paragraph-rsid="0012962e"/>
  </style:style>
  <style:style style:name="P71" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:rsid="0012962e"/>
  </style:style>
  <style:style style:name="P72" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P73" style:family="paragraph" style:parent-style-name="Contents_20_1">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P74" style:family="paragraph" style:parent-style-name="Contents_20_2">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties fo:color="#3f7f5f"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties fo:color="#3f7f5f" style:font-name-asian="Monospace" style:font-name-complex="Monospace"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T6" style:family="text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="T7" style:family="text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T8" style:family="text">
   <style:text-properties fo:color="#7f0055" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T9" style:family="text">
   <style:text-properties fo:color="#7f0055" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T10" style:family="text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace" fo:font-size="10pt" fo:font-weight="bold" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-weight-asian="bold" style:font-name-complex="Monospace" style:font-size-complex="10pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T11" style:family="text">
   <style:text-properties fo:color="#7f0055" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T12" style:family="text">
   <style:text-properties fo:color="#000000"/>
  </style:style>
  <style:style style:name="T13" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1"/>
  </style:style>
  <style:style style:name="T14" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T15" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="T16" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T17" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="none" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T18" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T19" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" fo:font-style="italic" style:font-size-asian="10pt" style:font-style-asian="italic"/>
  </style:style>
  <style:style style:name="T20" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T21" style:family="text">
   <style:text-properties fo:color="#000000" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T22" style:family="text">
   <style:text-properties fo:color="#000000" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T23" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name-asian="Monospace" style:font-name-complex="Monospace"/>
  </style:style>
  <style:style style:name="T24" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="T25" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Times New Roman" fo:font-size="14pt"/>
  </style:style>
  <style:style style:name="T26" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="arial" fo:font-size="10pt" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="T27" style:family="text">
   <style:text-properties fo:color="#000000" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T28" style:family="text">
   <style:text-properties fo:color="#000000" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T29" style:family="text">
   <style:text-properties fo:color="#005032"/>
  </style:style>
  <style:style style:name="T30" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace1"/>
  </style:style>
  <style:style style:name="T31" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T32" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="T33" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T34" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="T35" style:family="text">
   <style:text-properties fo:color="#005032" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T36" style:family="text">
   <style:text-properties fo:color="#2a00ff"/>
  </style:style>
  <style:style style:name="T37" style:family="text">
   <style:text-properties fo:color="#2a00ff" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T38" style:family="text">
   <style:text-properties fo:color="#2a00ff" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T39" style:family="text">
   <style:text-properties fo:color="#2a00ff" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="none" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T40" style:family="text">
   <style:text-properties fo:color="#2a00ff" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T41" style:family="text">
   <style:text-properties fo:color="#642880" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T42" style:family="text">
   <style:text-properties fo:color="#644632" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T43" style:family="text">
   <style:text-properties fo:color="#644632" style:font-name="Monospace1" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T44" style:family="text">
   <style:text-properties fo:color="#644632" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T45" style:family="text">
   <style:text-properties fo:color="#644632" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T46" style:family="text">
   <style:text-properties fo:color="#644632" style:font-name="Monospace" fo:font-size="10pt" fo:font-weight="bold" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-weight-asian="bold" style:font-name-complex="Monospace" style:font-size-complex="10pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T47" style:family="text">
   <style:text-properties fo:color="#644632" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T48" style:family="text">
   <style:text-properties fo:color="#0000c0"/>
  </style:style>
  <style:style style:name="T49" style:family="text">
   <style:text-properties fo:color="#0000c0" style:font-name="Monospace1"/>
  </style:style>
  <style:style style:name="T50" style:family="text">
   <style:text-properties fo:color="#0000c0" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T51" style:family="text">
   <style:text-properties fo:color="#0000c0" style:font-name="Monospace1" fo:font-size="10pt" fo:font-style="italic" style:font-size-asian="10pt" style:font-style-asian="italic"/>
  </style:style>
  <style:style style:name="T52" style:family="text">
   <style:text-properties fo:color="#0000c0" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T53" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T54" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T55" style:family="text">
   <style:text-properties style:font-name="Monospace1"/>
  </style:style>
  <style:style style:name="T56" style:family="text">
   <style:text-properties style:font-name="Monospace1" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T57" style:family="text">
   <style:text-properties style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T58" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T59" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#a21f11" style:font-name="arial1" fo:font-size="9.75pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="T60" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#000000" style:font-name="DejaVuSansMono" fo:font-size="9pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="T61" style:family="text">
   <style:text-properties style:text-underline-style="none"/>
  </style:style>
  <style:style style:name="T62" style:family="text">
   <style:text-properties style:font-name-asian="Monospace" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="T63" style:family="text">
   <style:text-properties fo:font-size="10.5pt"/>
  </style:style>
  <style:style style:name="T64" style:family="text">
   <style:text-properties fo:font-size="10.5pt" fo:font-style="italic"/>
  </style:style>
  <style:style style:name="T65" style:family="text">
   <style:text-properties officeooo:rsid="00100581"/>
  </style:style>
  <style:style style:name="T66" style:family="text">
   <style:text-properties officeooo:rsid="00147669"/>
  </style:style>
  <style:style style:name="T67" style:family="text">
   <style:text-properties officeooo:rsid="0014cf23"/>
  </style:style>
  <style:style style:name="T68" style:family="text">
   <style:text-properties officeooo:rsid="0015f441"/>
  </style:style>
  <style:style style:name="Sect1" style:family="section">
   <style:section-properties fo:background-color="transparent" style:editable="false">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
    <style:background-image/>
   </style:section-properties>
  </style:style>
  <style:style style:name="Sect2" style:family="section">
   <style:section-properties style:editable="false">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
   </style:section-properties>
  </style:style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="8.5in" fo:page-height="11in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.7874in" fo:margin-bottom="0.7874in" fo:margin-left="0.7874in" fo:margin-right="0.7874in" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="44" style:layout-grid-base-height="0.2165in" style:layout-grid-ruby-height="0in" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="true" style:layout-grid-display="true" style:layout-grid-base-width="0.1457in" style:layout-grid-snap-to="true" style:layout-grid-snap-to-characters="true" style:footnote-max-height="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
   </text:sequence-decls>
   <text:p text:style-name="P57"><text:bookmark-start text:name="__RefHeading__2311_977618933"/>C++ for embedded systems.<text:bookmark-end text:name="__RefHeading__2311_977618933"/></text:p>
   <text:p text:style-name="Title"/>
   <text:p text:style-name="P53"/>
   <text:table-of-content text:style-name="Sect1" text:protected="true" text:name="Table of Contents1">
    <text:table-of-content-source text:outline-level="10" text:use-index-marks="false">
     <text:index-title-template text:style-name="Contents_20_Heading">Contents</text:index-title-template>
     <text:table-of-content-entry-template text:outline-level="1" text:style-name="Contents_20_1">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="2" text:style-name="Contents_20_2">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="3" text:style-name="Contents_20_3">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="4" text:style-name="Contents_20_4">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="5" text:style-name="Contents_20_5">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="6" text:style-name="Contents_20_6">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="7" text:style-name="Contents_20_7">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="8" text:style-name="Contents_20_8">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="9" text:style-name="Contents_20_9">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="10" text:style-name="Contents_20_10">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
    </text:table-of-content-source>
    <text:index-body>
     <text:index-title text:style-name="Sect2" text:name="Table of Contents1_Head">
      <text:p text:style-name="Contents_20_Heading">Contents</text:p>
     </text:index-title>
     <text:p text:style-name="P73"><text:a xlink:type="simple" xlink:href="#__RefHeading__2313_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Introduction.<text:tab/>3</text:a></text:p>
     <text:p text:style-name="P73"><text:a xlink:type="simple" xlink:href="#__RefHeading__13919_1660174531" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">C++ code style.<text:tab/>4</text:a></text:p>
     <text:p text:style-name="P73"><text:a xlink:type="simple" xlink:href="#__RefHeading__2315_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Software primitives.<text:tab/>4</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__10716_42486590" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Mutual exclusion.<text:tab/>4</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__14882_1513893511" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Parallel execution.<text:tab/>13</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__2317_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Containers.<text:tab/>17</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__2646_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">C++ templates in embedded systems.<text:tab/>36</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__2948_1515059145" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Memory Management.<text:tab/>45</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__12039_1005710029" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Operator new.<text:tab/>67</text:a></text:p>
     <text:p text:style-name="P73"><text:a xlink:type="simple" xlink:href="#__RefHeading__12421_1005710029" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">I/O access.<text:tab/>70</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__8080_1329019087" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">I/O access in C.<text:tab/>72</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__8082_1329019087" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">I/O access in C++.<text:tab/>81</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__11237_696237465" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Indirect I/O access.<text:tab/>93</text:a></text:p>
     <text:p text:style-name="P73"><text:a xlink:type="simple" xlink:href="#__RefHeading__7726_2007975351" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Code ROM and data RAM.<text:tab/>98</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__7728_2007975351" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">C++ Initialized data.<text:tab/>99</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__7954_2007975351" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">ROM patching.<text:tab/>101</text:a></text:p>
     <text:p text:style-name="P73"><text:a xlink:type="simple" xlink:href="#__RefHeading__12357_1195782936" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Operating system.<text:tab/>104</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__13575_1195782936" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Static (class) member.<text:tab/>105</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__13577_1195782936" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Non static member.<text:tab/>114</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__14433_1195782936" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Log.<text:tab/>117</text:a></text:p>
     <text:p text:style-name="P74"><text:a xlink:type="simple" xlink:href="#__RefHeading__14278_363426044" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Software Timers.<text:tab/>139</text:a></text:p>
     <text:p text:style-name="P73"><text:a xlink:type="simple" xlink:href="#__RefHeading__12016_732733800" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Conclusion.<text:tab/>162</text:a></text:p>
    </text:index-body>
   </text:table-of-content>
   <text:h text:style-name="P66" text:outline-level="1"/>
   <text:h text:style-name="P45" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2313_977618933"/>Introduction.<text:bookmark-end text:name="__RefHeading__2313_977618933"/></text:h>
   <text:p text:style-name="Quotations">I&apos;ve come to the conclusion that any programmer that would prefer the project to be in C++ over C is likely a programmer that I really would prefer to piss off, so that he doesn&apos;t come and screw up any project I&apos;m involved with.</text:p>
   <text:p text:style-name="P33">Linus Torvalds</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">This book is intended for firmware developers who mainly use <text:span text:style-name="T67">the </text:span>C language. I assume that the reader is comfortable with ARM or Intel assembly language and has working knowledge of the C++ syntax. In this book, I <text:span text:style-name="T67">have tried</text:span> to give examples of C++ code in situations where, arguably, C is not <text:span text:style-name="T67">the</text:span> perfect tool for the task. Many C++ code examples come with snippets of the resulting assembly. The examples of code <text:span text:style-name="T67">have been</text:span> constructed in a way that allows immediate reuse in real-world applications. Examples cover topics <text:span text:style-name="T67">such as</text:span> memory and speed optimization, organizing arrays, FIFOs, thread safety, <text:span text:style-name="T67">and</text:span> direct access to the hardware. The book addresses issues <text:span text:style-name="T67">such as</text:span> code bloat and <text:span text:style-name="T67">the </text:span>hidden performance costs of C++. </text:p>
   <text:p text:style-name="Text_20_body">In all examples I assume that the C++ compiler supports version 11 of the language. One example of such <text:span text:style-name="T67">a </text:span>compiler is GNUC 4.8. <text:span text:style-name="T67">The a</text:span>vailability of <text:span text:style-name="T67">a </text:span>C++ compiler supporting version 11 for specific hardware is not required, and most code examples can be rewritten for older C++ compilers. Through<text:span text:style-name="T67">out</text:span> the book, I <text:span text:style-name="T67">have </text:span>demonstrate<text:span text:style-name="T67">d</text:span> <text:span text:style-name="T67">some of the </text:span>less<text:span text:style-name="T67">er</text:span> known features of the C++11 standard, <text:span text:style-name="T67">such as</text:span> type traits, static assertion, constant expressions <text:span text:style-name="T67">and</text:span> <text:span text:style-name="T67">OpenMP support</text:span>.</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T67">P</text:span>roblem can be solved in <text:span text:style-name="T67">numerous</text:span> ways. Where it <text:span text:style-name="T67">wa</text:span>s possible and ma<text:span text:style-name="T67">de</text:span> sense, I provide<text:span text:style-name="T67">d</text:span> an alternative implementation in C and compare<text:span text:style-name="T67">d</text:span> <text:span text:style-name="T67">the </text:span>performance of <text:span text:style-name="T67">the </text:span>C and C++ solutions.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:h text:style-name="P45" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__13919_1660174531"/>C++ code style.<text:bookmark-end text:name="__RefHeading__13919_1660174531"/></text:h>
   <text:p text:style-name="Quotations">#define AND <text:s/>&amp;&amp; </text:p>
   <text:p text:style-name="Quotations">#define OR <text:s text:c="2"/>|| </text:p>
   <text:p text:style-name="Quotations">#define EQ <text:s text:c="2"/>==</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">I <text:span text:style-name="T67">have done</text:span> my best to follow consistent C/C++ code style in all source code examples. In this book I <text:span text:style-name="T67">have not</text:span> plac<text:span text:style-name="T67">ed</text:span> curly brackets on a separate line. Please, do not send me hate mail. The only reason is to make the code snippets shorter. Shorter code has a better chance <text:span text:style-name="T67">of </text:span>fit<text:span text:style-name="T67">ting</text:span> <text:span text:style-name="T68">in </text:span>the smaller e-reader displays. There are no comments in the code itself for the same reason. Hopefully, <text:span text:style-name="T67">the </text:span>lack of comments <text:span text:style-name="T67">has been</text:span> compensated <text:span text:style-name="T67">for </text:span>by the interspersed explanations. I am <text:span text:style-name="T67">the </text:span>using camelcase name convention. Types and class names <text:span text:style-name="T67">begin</text:span> with uppercase <text:span text:style-name="T67">and</text:span> variables <text:span text:style-name="T67">begin</text:span> with lower case, <text:span text:style-name="T67">while </text:span>constants are all upper case with the underscore delimiter. </text:p>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2315_977618933"/>Software primitives.<text:bookmark-end text:name="__RefHeading__2315_977618933"/></text:h>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__10716_42486590"/>Mutual exclusion.<text:bookmark-end text:name="__RefHeading__10716_42486590"/></text:h>
   <text:p text:style-name="Quotations">The great thing about Object Oriented code is that it can make small, simple problems look like large, complex ones.</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">In the multi-task environment, threads and interrupts can concurrently read and write data objects. I can use different tools to synchronize access to the data between different contexts and create thread safe APIs. Among <text:span text:style-name="T67">the </text:span>available tools are semaphores and mutual exclusion APIs provided by operating systems, <text:span text:style-name="T67">as well as </text:span>disabl<text:span text:style-name="T67">ing</text:span> all interrupts, disabl<text:span text:style-name="T67">ing</text:span> some interrupt<text:span text:style-name="T68">s</text:span>, disabl<text:span text:style-name="T67">ing the</text:span> operating system scheduler, <text:span text:style-name="T67">and using </text:span>spin locks. When I write a wrapper around an API provided by my real-time operating system or by the hardware, I want the wrapper to be as thin as possible. Usually, I measure the overhead of the wrapper <text:span text:style-name="T67">using</text:span> a number of assembly instructions. <text:span text:style-name="T67">The n</text:span>umber of instructions provides a good approximation of the CPU cycles or execution time. </text:p>
   <text:p text:style-name="Text_20_body">I am starting <text:span text:style-name="T67">with</text:span> a code snippet <text:span text:style-name="T67">that</text:span> creates and calls a dummy lock object.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> LockDummy {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>LockDummy() {</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Locked context&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; endl;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>~LockDummy() {</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Lock is freed&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; endl;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Text_20_body">In the following usage example the C++ specifier “auto” tells to the compiler to automatically supply the correct type – <text:span text:style-name="T67">the </text:span>C++11 compiler knows to deduct <text:span text:style-name="T67">certain </text:span>types of variables in some situations. For example, <text:span text:style-name="T67">the </text:span>C++ compiler can figure out the return type of the left side of an assignment or <text:span text:style-name="T67">the </text:span>return type of a function. </text:p>
   <text:p text:style-name="Text_20_body">In the function main() compiler will call <text:span text:style-name="T67">the </text:span>output function two times and will not add any other code. The lock is released – <text:span text:style-name="T67">the </text:span>destructor ~LockDummy gets called – when the scope of the variable myDummyLock ends. The scope could be a while loop. I do not have to call “unlock” before each and every return from the function. <text:span text:style-name="T67">The </text:span>C++ compiler makes sure that the destructor is always called and called exactly once. This convenient service comes without any performance overhead. <text:span text:style-name="T67">The o</text:span>utput of the following code is going to be Locked context, Lock is freed.</text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> main() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#if</text:span><text:span text:style-name="T14"> (__cplusplus &gt;= 201103) </text:span><text:span text:style-name="T2">// use &quot;auto&quot; if C++11 or better</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">auto</text:span><text:span text:style-name="T14"> myDummyLock = LockDummy();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">#else</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>LockDummy myDummyLock = LockDummy();</text:p>
   <text:p text:style-name="Preformatted_20_Text">#endif</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body">I want to stress this idea <text:span text:style-name="T67">using</text:span> another example. In the following code, I set a scope around the declaration of the lock variable. I can drop a declaration of the variable myDummyLock, <text:span text:style-name="T67">as </text:span>the constructor and destructor of the class are going to be called anyway. <text:span text:style-name="T67">The o</text:span>utput of the code is going to be Locked context, Lock is freed, End of main.</text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> main() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>LockDummy();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;End of main&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; endl;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body">My second lock is a more realistic one, <text:span text:style-name="T68">and</text:span> <text:span text:style-name="T67">it</text:span> disables a hardware interrupt. I assume that there is an API <text:span text:style-name="T67">that</text:span> disables and enables an interrupt. I am refactoring the original lock code a little bit. First of all, I use a template, <text:span text:style-name="T67">which is </text:span>a feature of C++ that allows <text:span text:style-name="T67">you </text:span>to declare a class <text:span text:style-name="T67">that</text:span> operates with generic types. I am going to reuse the code in the template Lock for different synchronization objects. <text:span text:style-name="T67">The c</text:span>ode in the template Lock can manipulate any structure or class <text:span text:style-name="T67">that</text:span> implements two public methods: static methods get() and release(). I carefully avoid polymorphism here, I do not require synchronization objects to belong to the same hierarchy of classes. <text:span text:style-name="T67">The w</text:span>rapper around <text:span text:style-name="T67">the </text:span>disable/enable interrupts API, <text:span text:style-name="T67">which </text:span>likely writes to the hardware, is not going to be a child/friend/parent/relative/derivation of a wrapper for the operating system semaphore. </text:p>
   <text:p text:style-name="Text_20_body">This is <text:span text:style-name="T67">what</text:span> the API <text:span text:style-name="T67">that</text:span> disables and enables interrupts looks like:</text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">interruptDisable</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Disable&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">interruptEnable</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Enable&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body">I am describing a synchronization object. The class implements two methods: “get” and “release”. Both methods are “inline”, which helps the optimizer to decide if calls to the methods should be substituted by the methods code. The end result is going to be similar to using a macro definition in C. <text:span text:style-name="T67">The d</text:span>efault constructor in the class SynchroObject is private, I do not want any objects of this type in the application. My C++ compiler so far <text:span text:style-name="T67">has</text:span> not add<text:span text:style-name="T67">ed</text:span> any object code to my executable file.</text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">SynchroObject</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">SynchroObject</text:span><text:span text:style-name="T14">() {};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">get</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>interruptDisable();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">release</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>interruptEnable();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P41"><text:span text:style-name="T67">The t</text:span>emplate class Lock can manipulate any type of synchronization objects <text:span text:style-name="T67">that</text:span> provide<text:span text:style-name="T68">s</text:span> <text:span text:style-name="T67">a </text:span>get/release API. All methods of the template class Lock are “inline”. <text:span text:style-name="T67">The </text:span>C++ compiler is not going to add any functions to the object code, but will <text:span text:style-name="T67">rather </text:span>replace <text:span text:style-name="T67">by </text:span>calls to the Lock methods <text:span text:style-name="T67">with</text:span> the code of <text:span text:style-name="T67">the </text:span>get/release from the synchronization object. </text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Mutex</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Lock</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">Lock</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T42">Mutex</text:span><text:span text:style-name="T14">::get();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">~Lock</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T42">Mutex</text:span><text:span text:style-name="T14">::release();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Declare a new type MyLock <text:span text:style-name="T68">that</text:span> uses my SynchroObject to disable/enable interrupts. <text:span text:style-name="T68">There is s</text:span>till no additional data or code in my executable <text:span text:style-name="T68">except for the</text:span> calls to the interrupt enable and interrupt disable API.</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T5">typedef</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Lock</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">SynchroObject</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T31">MyLock</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Text_20_body">Output of <text:span text:style-name="T68">the function </text:span>main() is going to be two words: Disable, Enable</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">main</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">MyLock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body">Overhead of the wrapper around the functions <text:span text:style-name="T68">that</text:span> disable and enable interrupts is exactly zero. Indeed, <text:s/>if I check the disassembly, I will see two calls to the print function in the main routine and nothing else. I <text:span text:style-name="T68">have written</text:span> some C++ code which gets optimized to nothing. What did I gain? What is an added value? </text:p>
   <text:p text:style-name="Text_20_body">The code does not allow me to <text:span text:style-name="T68">miss</text:span> calling enable interrupts after I called disable interrupt. No matter how many return points or breaks out of a loop my function has, <text:span text:style-name="T68">the </text:span>C++ compiler ensures that the function interruptEnable is called exactly once.</text:p>
   <text:h text:style-name="P48" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__14882_1513893511"/>Parallel execution.<text:bookmark-end text:name="__RefHeading__14882_1513893511"/></text:h>
   <text:p text:style-name="P34">Some people, when confronted with a problem, think, &apos;I know, I&apos;ll use threads&apos; - and then two they hav erpoblems.</text:p>
   <text:p text:style-name="P34"/>
   <text:p text:style-name="P60">I have a quad core <text:span text:style-name="T67">CPU in my </text:span>system. <text:span text:style-name="T68">Compiler GCC 4.8 is available for my hardware. GCC 4.8 </text:span>compiler <text:span text:style-name="T66">supports </text:span>OpenMP <text:span text:style-name="T68">API</text:span>. <text:span text:style-name="T66">If I compile the code below with the compilation flag -fopenmp I will get the output “4”:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">testReduction</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> a = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">#pragma</text:span><text:span text:style-name="T14"> omp parallel reduction (+:a)</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>{</text:p>
   <text:p text:style-name="P18"><text:s text:c="6"/>a = 1;</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>cout &lt;&lt; a &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="P62">Without <text:span text:style-name="T67">the </text:span>flag -fopenmp the output will be “1”. When <text:span text:style-name="T68">the C++ compiler</text:span> encounters pragma “omp parallel”, <text:span text:style-name="T68">it</text:span> adds <text:span text:style-name="T68">a small chunk of </text:span>code which spawns a “team” of threads according to the number of cores in the system. <text:span text:style-name="T68">T</text:span>he following section is executed by <text:span text:style-name="T67">the group of</text:span> threads in parallel. Word “reduction” ensures that <text:span text:style-name="T68">the </text:span>value of “a” is reused, <text:span text:style-name="T68">it is also called “shared”, </text:span>by all threads.</text:p>
   <text:p text:style-name="P63">My next synchronization object is based on the OpenMP lock. <text:span text:style-name="T68">The synchronization object</text:span> does not involve any operating system services. Important note: OpenMP locks can not replace mutual exclusion APIs provided by operating systems.</text:p>
   <text:p text:style-name="P63"/>
   <text:p text:style-name="P44"><text:span text:style-name="T67">I restrict the instantiation of the class to one object. There is going to be only one instance of the class </text:span>SynchroObjectOmpLock<text:span text:style-name="T67">. This design pattern is called “singleton”:</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">SynchroObjectOmpLock</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">get</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">release</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">~SynchroObjectOmpLock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P1"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">omp_lock_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">lock</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">SynchroObjectOmpLock</text:span><text:span text:style-name="T14"> *</text:span><text:span text:style-name="T51">instance</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P6"/>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">SynchroObjectOmpLock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="P6">};</text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T31">SynchroObjectOmpLock</text:span><text:span text:style-name="T14"> *</text:span><text:span text:style-name="T51">SynchroObjectOmpLock::instance</text:span><text:span text:style-name="T14"> </text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T14"><text:s text:c="4"/>= </text:span><text:span text:style-name="T5">new</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">SynchroObjectOmpLock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="P63"/>
   <text:p text:style-name="P43"><text:span text:style-name="T68">The r</text:span>est of <text:span text:style-name="T68">the </text:span>class methods:</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">SynchroObjectOmpLock::get</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T41">omp_set_lock</text:span><text:span text:style-name="T14">(&amp;</text:span><text:span text:style-name="T51">instance</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">lock</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P6">}</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P1"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">SynchroObjectOmpLock::release</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T41">omp_unset_lock</text:span><text:span text:style-name="T14">(&amp;</text:span><text:span text:style-name="T51">instance</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">lock</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P6">}</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P1"><text:span text:style-name="T16">SynchroObjectOmpLock::SynchroObjectOmpLock</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T41">omp_init_lock</text:span><text:span text:style-name="T14">(&amp;</text:span><text:span text:style-name="T50">lock</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P6">}</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P1"><text:span text:style-name="T16">SynchroObjectOmpLock::~SynchroObjectOmpLock</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T41">omp_destroy_lock</text:span><text:span text:style-name="T14">(&amp;</text:span><text:span text:style-name="T51">instance</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">lock</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P6">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">I have a new type - a lock <text:span text:style-name="T68">which is </text:span>based on the <text:span text:style-name="T68">OpenMP </text:span>synchronization object:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">typedef</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Lock</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">SynchroObjectOmpLock</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T31">LockOmp</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P63">And usage example:</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">LockOmp</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2317_977618933"/>Containers.<text:bookmark-end text:name="__RefHeading__2317_977618933"/></text:h>
   <text:p text:style-name="Quotations">When your hammer is C++, everything begins to look like a thumb.</text:p>
   <text:p text:style-name="P32"/>
   <text:p text:style-name="P65">Standard template library (STL) contains a lot of smart and <text:span text:style-name="T68">very </text:span>convenient code dealing with vectors, stacks, queues, hash tables, trees, and many other types of dynamic and static data storage. Unfortunately a firmware developer <text:span text:style-name="T68">often </text:span>needs something different. <text:span text:style-name="T68">There are </text:span>cases <text:span text:style-name="T68">when </text:span>high performance and small code/data footprint should coexist in one application. In this chapter I will demonstrate a container which makes sense in an embedded <text:span text:style-name="T68">system</text:span> with limited resources. The API should be reentrant and allow safe concurrent access. The performance of the container is going to be at least not worse than a<text:span text:style-name="T68">n </text:span>alternative <text:span text:style-name="T68">implementation in the C language</text:span>. All <text:span text:style-name="T68">memory</text:span> allocations are going to be static and done at build time, I will deal with the dynamic allocation<text:span text:style-name="T68">s</text:span> later in this book. </text:p>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:p text:style-name="P54"><text:bookmark-start text:name="__RefHeading__2535_977618933"/>Cyclic buffer.<text:bookmark-end text:name="__RefHeading__2535_977618933"/></text:p>
   <text:p text:style-name="P35">Asking from C++ programmers more content, less bloat is unfair.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">My first example is going to be a cyclic buffer, also known as a ring buffer. A “producer” adds objects to the “tail” of the cyclic buffer and a “consumer” pulls the objects from the “head” of the cyclic buffer. An example of producer can be an interrupt routine which gets characters from <text:span text:style-name="T68">the </text:span>UART device (<text:span text:style-name="T68">RS232</text:span> port). A “consumer” <text:span text:style-name="T68">is</text:span> a function called from the application main loop which handles commands arriving from the UART. <text:span text:style-name="T68">The </text:span>CyclicBuffer class is a template class, which should help the optimizer to generate the most efficient code possible for the given integer type and <text:span text:style-name="T68">the </text:span>CPU architecture.</text:p>
   <text:p text:style-name="P27"/>
   <text:p text:style-name="P49"><text:span text:style-name="T8">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T8">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T44">ObjectType</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T8">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T44">Lock</text:span><text:span text:style-name="T12">, std::</text:span><text:span text:style-name="T29">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T44">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">CyclicBufferSimple</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">CyclicBufferSimple</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">~CyclicBufferSimple</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">add</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> object);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">remove</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> &amp;object);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">isEmpty</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">isFull</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">private</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">increment</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> index);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">errorOverflow</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">errorUnderflow</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14"> + 1];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P42">The CyclicBufferSimple constructor will fail the build if the application attempts to store in the buffer anything but integer. Storage for the objects larger than <text:span text:style-name="T68">the </text:span>size of <text:span text:style-name="T68">the </text:span>integer on the given CPU architecture should probably have a different API. </text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P51"><text:span text:style-name="T11">template</text:span><text:span text:style-name="T27">&lt;</text:span><text:span text:style-name="T11">typename</text:span><text:span text:style-name="T27"> </text:span><text:span text:style-name="T47">ObjectType</text:span><text:span text:style-name="T27">, </text:span><text:span text:style-name="T11">typename</text:span><text:span text:style-name="T27"> </text:span><text:span text:style-name="T47">Lock</text:span><text:span text:style-name="T27">, std::</text:span><text:span text:style-name="T35">size_t</text:span><text:span text:style-name="T27"> </text:span><text:span text:style-name="T47">Size</text:span><text:span text:style-name="T27">&gt;</text:span></text:p>
   <text:p text:style-name="P24"><text:span text:style-name="T28">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::CyclicBufferSimple</text:span><text:span text:style-name="T27">() {</text:span></text:p>
   <text:p text:style-name="P24"/>
   <text:p text:style-name="P24"><text:span text:style-name="T11">#if</text:span><text:span text:style-name="T27"> (__cplusplus &gt;= 201103)</text:span></text:p>
   <text:p text:style-name="P24"><text:span text:style-name="T27"><text:s text:c="4"/></text:span><text:span text:style-name="T11">static_assert</text:span><text:span text:style-name="T27">(std::</text:span><text:span text:style-name="T35">numeric_limits</text:span><text:span text:style-name="T27">&lt;</text:span><text:span text:style-name="T47">ObjectType</text:span><text:span text:style-name="T27">&gt;::</text:span><text:span text:style-name="T52">is_integer</text:span><text:span text:style-name="T27">, </text:span><text:span text:style-name="T40">&quot;CyclicBuffer is intended to work only with integer types&quot;</text:span><text:span text:style-name="T27">);</text:span></text:p>
   <text:p text:style-name="P24"><text:span text:style-name="T11">#elif</text:span><text:span text:style-name="T27"> defined(__GNUC____)</text:span></text:p>
   <text:p text:style-name="P24"><text:span text:style-name="T27"><text:s text:c="4"/></text:span><text:span text:style-name="T11">__attribute__</text:span><text:span text:style-name="T27">((unused)) ObjectType val1 = 1;</text:span></text:p>
   <text:p text:style-name="P24">#else</text:p>
   <text:p text:style-name="P24"><text:span text:style-name="T27"><text:s text:c="4"/></text:span><text:span text:style-name="T11">volatile</text:span><text:span text:style-name="T27"> ObjectType val1;</text:span></text:p>
   <text:p text:style-name="P24"><text:s text:c="4"/>*(&amp;val1) = 1;</text:p>
   <text:p text:style-name="P24">#endif</text:p>
   <text:p text:style-name="P24"><text:span text:style-name="T27"><text:s text:c="4"/></text:span><text:span text:style-name="T11">this</text:span><text:span text:style-name="T27">-&gt;</text:span><text:span text:style-name="T52">head</text:span><text:span text:style-name="T27"> = 0;</text:span></text:p>
   <text:p text:style-name="P24"><text:span text:style-name="T27"><text:s text:c="4"/></text:span><text:span text:style-name="T11">this</text:span><text:span text:style-name="T27">-&gt;</text:span><text:span text:style-name="T52">tail</text:span><text:span text:style-name="T27"> = 0;</text:span></text:p>
   <text:p text:style-name="P24">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">There are two methods return<text:span text:style-name="T68">ing</text:span> state of the buffer</text:p>
   <text:p text:style-name="P25"><text:span text:style-name="T8">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T8">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T44">ObjectType</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T8">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T44">Lock</text:span><text:span text:style-name="T12">, std::</text:span><text:span text:style-name="T29">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T44">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="T8">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T8">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T21">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::isEmpty</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T8">bool</text:span><text:span text:style-name="T12"> res = (</text:span><text:span text:style-name="T8">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T48">head</text:span><text:span text:style-name="T12"> == </text:span><text:span text:style-name="T8">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T48">tail</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T8">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P25">}</text:p>
   <text:p text:style-name="P25"/>
   <text:p text:style-name="P25"><text:span text:style-name="T8">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T8">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T44">ObjectType</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T8">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T44">Lock</text:span><text:span text:style-name="T12">, std::</text:span><text:span text:style-name="T29">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T44">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="T8">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T8">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T21">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::isFull</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T29">size_t</text:span><text:span text:style-name="T12"> tail = increment(</text:span><text:span text:style-name="T8">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T48">tail</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T8">bool</text:span><text:span text:style-name="T12"> res = (</text:span><text:span text:style-name="T8">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T48">head</text:span><text:span text:style-name="T12"> == tail);</text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T8">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P25">}</text:p>
   <text:p text:style-name="P59"/>
   <text:p text:style-name="P41">A method handl<text:span text:style-name="T68">ing</text:span> wrap around of the buffer index:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">, std::</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::increment</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> index) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (index &lt; </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (index + 1);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Add/remove API of the cyclic buffer:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">, std::</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::add</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14"> = increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>errorOverflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">, std::</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::remove</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> &amp;object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>object = </text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>errorUnderflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Instantiate a new type - <text:span text:style-name="T68">a </text:span>lock which does nothing</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">typedef</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Lock</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">SynchroObjectDummy</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T31">LockDummy</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body">Following function returns a number of <text:span text:style-name="T68">the </text:span>elements in the cyclic buffer. Compiler will fail if the value can not be calculated at the build time.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">constexpr</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">calculateCyclicBufferSize</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 10;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T68">I c</text:span>reate an object of class CyclicBuffer deal<text:span text:style-name="T68">ing</text:span> with unsigned 8 bits integers. I use uint_fast8_t, <text:span text:style-name="T68">which is </text:span>yet another C++11 marvel targeting portability. <text:span text:style-name="T68">Type uint_fast8_t </text:span>allows the <text:span text:style-name="T68">C++ </text:span>compiler to choose best performing integer that has at least 8 bits. <text:span text:style-name="T68">O</text:span>perations with 32 bits integers <text:span text:style-name="T68">can</text:span> faster on <text:span text:style-name="T68">some</text:span> CPU<text:span text:style-name="T68">s than 8 bits operations</text:span>. If the performance is more important than memory allocated by the storage, it makes sense to choose 32 bits integer instead of 8 bits. The smallest possible 8 bits unsigned integer is uint_least8_t, and the maximum unsigned integer available on the platform is uintmax_t.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">CyclicBufferSimple</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">uint_fast8_t</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">LockDummy</text:span><text:span text:style-name="T14">, calculateCyclicBufferSize()&gt; myCyclicBuffer;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">In the usage example there is a range loop from the C++11 standard. <text:span text:style-name="T68">The m</text:span>ain function will print numbers 1, 3, 11</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7">int</text:span><text:span text:style-name="T55"> </text:span><text:span text:style-name="T56">main</text:span><text:span text:style-name="T55">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> i : { 1, 3, 11 }) {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>myCyclicBuffer.add(i);</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14"> val;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">while</text:span><text:span text:style-name="T14"> (myCyclicBuffer.remove(val)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cout &lt;&lt; (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14">) val &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Let&apos;s examine the assembly generated by the GNUC compiler for the Intel CPU for a single call to the method add(). </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">xor</text:span><text:span text:style-name="T14"> %esi,%esi</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="2"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> add(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> ObjectType object) {</text:span></text:p>
   <text:p text:style-name="P18">mov 0x2009c0(%rip),%rax</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="10"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P18">mov %rsi,%r8</text:p>
   <text:p text:style-name="P18">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="2"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> add(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> ObjectType object) {</text:span></text:p>
   <text:p text:style-name="P18">mov %rcx,%rdx</text:p>
   <text:p text:style-name="P18">cmovbe %rdi,%r8</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="6"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="P18">cmp %r8,%rax</text:p>
   <text:p text:style-name="P18">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="10"/>data[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;tail] = object;</text:span></text:p>
   <text:p text:style-name="P18">movb $0x0,0x6011a0(%rcx)</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="10"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P18">mov %r8,%rdx</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="10"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;tail = increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;tail);</text:span></text:p>
   <text:p text:style-name="P18">mov %r8,0x2009a0(%rip)</text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="Text_20_body">I see a couple of move instructions <text:span text:style-name="T68">which </text:span>update the tail, update of the data in the cyclic buffer, a compar<text:span text:style-name="T68">ison</text:span> when the tail is incremented. There are 9 opcodes total. There is no unexpected overhead in this code. </text:p>
   <text:p text:style-name="Text_20_body">I coded one cyclic buffer implementation, but I gained four different cyclic buffers optimized for four different integer types, equally efficient when working with 8, 16, 32, 64 bits integers on different CPUs. Class CyclicBuffer encapsulates the data in the private region. <text:span text:style-name="T68">The private data is </text:span>accessible only via the class methods and this is <text:span text:style-name="T67">supposed to be </text:span>a good thing. </text:p>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:p text:style-name="P54"><text:bookmark-start text:name="__RefHeading__2537_977618933"/>Cyclic buffer – C alternative.<text:bookmark-end text:name="__RefHeading__2537_977618933"/></text:p>
   <text:p text:style-name="Quotations">/**</text:p>
   <text:p text:style-name="Quotations"><text:s/>* Returns true</text:p>
   <text:p text:style-name="Quotations"><text:s/>*/</text:p>
   <text:p text:style-name="Quotations">int compare(int C)</text:p>
   <text:p text:style-name="Quotations">{</text:p>
   <text:p text:style-name="Quotations"><text:s text:c="4"/>return (C &gt; C++);</text:p>
   <text:p text:style-name="Quotations">}</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="First_20_line_20_indent">The C implementation of the cyclic buffer suggested below is type safe. C implementation contains approximately the same number of source code lines – ~80 lines in C vs ~90 lines in C++.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T7">#undef</text:span><text:span text:style-name="T55"> CYCLIC_BUFFRE_SIZE</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> CYCLIC_BUFFRE_SIZE 10</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#undef</text:span><text:span text:style-name="T14"> CYCLIC_BUFFER_OBJECT_TYPE</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> CYCLIC_BUFFER_OBJECT_TYPE uint8_t</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> CYCLIC_BUFFRE_DECLARE(ObjectType, Size) \</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">typedef</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">struct</text:span><text:span text:style-name="T14"> { \</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>ObjectType data[Size+1]; \</text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>size_t head; \</text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>size_t tail; \</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>} CyclicBuffer;\</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P18">CYCLIC_BUFFRE_DECLARE(CYCLIC_BUFFER_OBJECT_TYPE, CYCLIC_BUFFRE_SIZE);</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T31">CyclicBuffer</text:span><text:span text:style-name="T14"> myCyclicBuffer;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferIncrement</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> index, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (index &lt; size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferIsEmpty</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">CyclicBuffer</text:span><text:span text:style-name="T14">* cyclicBuffer) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res = (cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> == cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferIsFull</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">CyclicBuffer</text:span><text:span text:style-name="T14">* cyclicBuffer) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> tail = CyclicBufferIncrement(cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">, CYCLIC_BUFFRE_SIZE);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res = (cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> == tail);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">errorOverflow</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">errorUnderflow</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferAdd</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">CyclicBuffer</text:span><text:span text:style-name="T14">* cyclicBuffer, </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> CYCLIC_BUFFER_OBJECT_TYPE object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!CyclicBufferIsFull(cyclicBuffer)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14"> = CyclicBufferIncrement(cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">, CYCLIC_BUFFRE_SIZE);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>errorOverflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferRemove</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">CyclicBuffer</text:span><text:span text:style-name="T14">* cyclicBuffer, CYCLIC_BUFFER_OBJECT_TYPE* object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!CyclicBufferIsEmpty(cyclicBuffer)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>*object = cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> = CyclicBufferIncrement(cyclicBuffer-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">, CYCLIC_BUFFRE_SIZE);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>errorUnderflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Function main prints number 0,1,2,3</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7">int</text:span><text:span text:style-name="T55"> </text:span><text:span text:style-name="T56">main</text:span><text:span text:style-name="T55">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> i = 0;i &lt; 4;i++) {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>CyclicBufferAdd(&amp;myCyclicBuffer, i);</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14"> val;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">while</text:span><text:span text:style-name="T14"> (CyclicBufferRemove(&amp;myCyclicBuffer, &amp;val)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cout &lt;&lt; (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14">) val &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="Text_20_body">One limitation of this code is that only cyclic buffers working with the same integer type can be instantiated in the same C source file. Add/remove functions can be defined only once in a C file. </text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Corresponding assembly contains 10 opcodes in total for a call to add API:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (index + 1);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="2"/></text:span><text:span text:style-name="T5">xor</text:span><text:span text:style-name="T14"> %esi,%esi</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> CyclicBufferAdd(CyclicBuffer* cyclicBuffer, </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> CYCLIC_BUFFER_OBJECT_TYPE object) {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>mov 0x2009be(%rip),%rax <text:s text:c="7"/># 0x6011b0 &lt;myCyclicBuffer+16&gt;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>mov %rsi,%r8</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> main() {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>push %rbp</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>lea 0x1(%rcx),%rdi</text:p>
   <text:p text:style-name="P18">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> CyclicBufferAdd(CyclicBuffer* cyclicBuffer, </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> CYCLIC_BUFFER_OBJECT_TYPE object) {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>mov %rcx,%rdx</text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>push %rbx</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>cmovbe %rdi,%r8</text:p>
   <text:p text:style-name="P18">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!CyclicBufferIsFull(cyclicBuffer)) {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>cmp %r8,%rax</text:p>
   <text:p text:style-name="P18">...............................................</text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>cyclicBuffer-&gt;data[cyclicBuffer-&gt;tail] = object;</text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>movb $0x0,0x6011a0(%rcx)</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">GNUC for ARM produces essentially the same assembly for C and C++ code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">xor</text:span><text:span text:style-name="T14"> <text:s text:c="3"/>%esi,%esi</text:span></text:p>
   <text:p text:style-name="P18">mov <text:s text:c="3"/>0x2009be(%rip),%rax</text:p>
   <text:p text:style-name="P18">mov <text:s text:c="3"/>%rsi,%r8</text:p>
   <text:p text:style-name="P18">push <text:s text:c="2"/>%rbp</text:p>
   <text:p text:style-name="P18">lea <text:s text:c="3"/>0x1(%rdx),%rdi</text:p>
   <text:p text:style-name="P18">cmp <text:s text:c="3"/>$0x9,%rdx</text:p>
   <text:p text:style-name="P18">mov <text:s text:c="3"/>%rdx,%rcx</text:p>
   <text:p text:style-name="P18">push <text:s text:c="2"/>%rbx</text:p>
   <text:p text:style-name="P18">cmovbe %rdi,%r8</text:p>
   <text:p text:style-name="P18">cmp <text:s text:c="3"/>%r8,%rax</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14">je <text:s text:c="4"/></text:span><text:span text:style-name="T17">40081c</text:span><text:span text:style-name="T14"> &lt;main+0x3c&gt;</text:span></text:p>
   <text:p text:style-name="P18">movb <text:s text:c="2"/>$0x0,0x6011a0(%rdx)</text:p>
   <text:p text:style-name="P18">mov <text:s text:c="3"/>%r8,%rcx</text:p>
   <text:p text:style-name="P18">mov <text:s text:c="3"/>%r8,0x20099c(%rip)</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">xor</text:span><text:span text:style-name="T14"> <text:s text:c="3"/>%r12d,%r12d</text:span></text:p>
   <text:p text:style-name="Text_20_body">Performance of C and C++ versions measured on Intel is the same. </text:p>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2646_977618933"/>C++ templates in embedded systems.<text:bookmark-end text:name="__RefHeading__2646_977618933"/></text:h>
   <text:p text:style-name="Quotations">To understand what recursion is, you must first understand recursion.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">At this point a patient reader would ask about “code bloat” caused by C++ templates and object code duplication. Typically an implementation in C should have a smaller memory footprint, should not it? </text:p>
   <text:p text:style-name="Text_20_body">In case of the cyclic buffer all methods are inline and there is no any specific “template code”. In general case for every unique combination ObjectType/Size used in the code the C++ compiler is going to instantiate a class and add a full set of methods to the application code. A careful C++ programmer shall move the methods which do not require template arguments to a base class and derive the CyclicBuffer template from the new class. Moving type-invariant code into a base class sometimes is called “code hoisting”. Code hoisting does not necessary cause a performance hit. I will call the base class CyclicBufferBase. Constructor of the base class CyclicBufferBase is protected and no objects of the base class can be created by an application. </text:p>
   <text:p text:style-name="P22"/>
   <text:p text:style-name="P50"><text:span text:style-name="T7">class</text:span><text:span text:style-name="T13"> </text:span><text:span text:style-name="T30">CyclicBufferBase</text:span><text:span text:style-name="T13"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">isEmpty</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res = (</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> == </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">isFull</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> tail = increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res = (</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> == tail);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">CyclicBufferBase</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14"> = size;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14"> = 0;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">errorOverflow</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">errorUnderflow</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">increment</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> index) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (index &lt; </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (index + 1);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="P29"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Template class CyclicBuffer has data which depends on the template argument Size and add/remove methods which depend on the size of the integer. Class CyclicBuffer derives from class CyclicBufferBase, inherits all methods of the class CyclicBufferBase and exposes all methods of the class CyclicBufferBase.</text:p>
   <text:p text:style-name="P22"/>
   <text:p text:style-name="P50"><text:span text:style-name="T7">template</text:span><text:span text:style-name="T13">&lt;</text:span><text:span text:style-name="T7">typename</text:span><text:span text:style-name="T13"> </text:span><text:span text:style-name="T43">ObjectType</text:span><text:span text:style-name="T13">, </text:span><text:span text:style-name="T7">typename</text:span><text:span text:style-name="T13"> </text:span><text:span text:style-name="T43">Lock</text:span><text:span text:style-name="T13">, std::</text:span><text:span text:style-name="T30">size_t</text:span><text:span text:style-name="T13"> </text:span><text:span text:style-name="T43">Size</text:span><text:span text:style-name="T13">&gt; </text:span></text:p>
   <text:p text:style-name="P22"><text:span text:style-name="T7">class</text:span><text:span text:style-name="T13"> </text:span><text:span text:style-name="T30">CyclicBuffer</text:span><text:span text:style-name="T13">:</text:span><text:span text:style-name="T7">public</text:span><text:span text:style-name="T13"> </text:span><text:span text:style-name="T30">CyclicBufferBase</text:span><text:span text:style-name="T13"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">CyclicBuffer</text:span><text:span text:style-name="T14">() :</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>CyclicBufferBase(</text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">(std::</text:span><text:span text:style-name="T31">numeric_limits</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">&gt;::</text:span><text:span text:style-name="T50">is_integer</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T37">&quot;CyclicBuffer is intended to work only with integer types&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">~CyclicBuffer</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">add</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14"> = increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="12"/>errorOverflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">remove</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> &amp;object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/>object = </text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="12"/>errorUnderflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">private</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14"> + 1];</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Where C++ template can potentially cause object code duplication C code can lead to the source code and object code duplication. Analyzing of the assembly and object code generated by the C/C++ compiler is very useful in locating of the code responsible for the object code duplication. For example, a post build utility can look for patterns in the object code which occur more than once and use a map file to report the corresponding position in assembly. </text:p>
   <text:p text:style-name="Text_20_body">There is one use case for C++ templates which is rather hard to replicate in plain vanilla C. It&apos;s called template metaprogramming. Let&apos;s declare a template which recursively calculates a factorial:</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">N</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">struct</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">factorial</text:span></text:p>
   <text:p text:style-name="P18">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">constexpr</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T51">value</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T42">N</text:span><text:span text:style-name="T14"> * </text:span><text:span text:style-name="T31">factorial</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T42">N</text:span><text:span text:style-name="T14"> - 1&gt;::</text:span><text:span text:style-name="T50">value</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body">I need to define factorial of zero explicitly:</text:p>
   <text:p text:style-name="Standard"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;&gt;</text:span><text:span text:style-name="T5">struct</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">factorial</text:span><text:span text:style-name="T14">&lt;0&gt;</text:span></text:p>
   <text:p text:style-name="P6">{</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">constexpr</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T51">value</text:span><text:span text:style-name="T14"> = 1;</text:span></text:p>
   <text:p text:style-name="P6">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Now I can have following line in my C++ code:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">constexpr</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> factorial_3 = </text:span><text:span text:style-name="T31">factorial</text:span><text:span text:style-name="T14">&lt;3&gt;::</text:span><text:span text:style-name="T51">value</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Text_20_body">C++ compiler will replace call to factorial&lt;3&gt; by 6 and the variable factorial_3 turns into a constant known at build time. I have never met firmware code which was required to calculate a factorial of numbers, but there are cases when I needed to force the compilation failure instead of run-time error. Calculating number of bits in the “int” variable and failing the compilation if the integer is not large enough could be a good example, if C++11 already had not std::numeric_limits&lt;T&gt;::max() which returns maximum value representable by type T. Yet another example is calculating non-trivial constants. In the following example function testSum will print 15. Pay attention to the variadic – variable number of arguments – template function:</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">sum</text:span><text:span text:style-name="T14">()</text:span></text:p>
   <text:p text:style-name="P18">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> ... </text:span><text:span text:style-name="T42">Types</text:span><text:span text:style-name="T14">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">sum</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> first, </text:span><text:span text:style-name="T42">Types</text:span><text:span text:style-name="T14"> ... rest)</text:span></text:p>
   <text:p text:style-name="P18">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> first + sum(rest...);</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">const</text:span><text:span text:style-name="T16"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> SUM = sum(1, 2, 3, 4, 5);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">testSum</text:span><text:span text:style-name="T14">()</text:span></text:p>
   <text:p text:style-name="P18">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;SUM=&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; SUM &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2948_1515059145"/>Memory Management.<text:bookmark-end text:name="__RefHeading__2948_1515059145"/></text:h>
   <text:p text:style-name="Quotations">Programming is like sex, one mistake and you have to support it for the rest of your life. </text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">I am going to discuss two frequently used types of memory allocation in the embedded software – static allocation at build time and allocation from memory pools. </text:p>
   <text:p text:style-name="Text_20_body">I will start the discussion of the dynamic memory allocation from memory pools by declaration of a new class Stack. Template class Stack is similar to the class CyclicBuffer used previously. Class Stack implements two methods “push” and “pop”.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> ObjectType, </text:span><text:span text:style-name="T5">ty</text:span><text:span text:style-name="T16">pen</text:span><text:span text:style-name="T5">a</text:span><text:span text:style-name="T42">me Lock, s</text:span><text:span text:style-name="T14">td::size_t Size&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">clas</text:span><text:span text:style-name="T42">s St</text:span><text:span text:style-name="T14">ack: </text:span><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14"> StackBase {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P18"><text:s text:c="4"/>Stack() :</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="5"/></text:span><text:span text:style-name="T50"><text:s text:c="3"/>S</text:span><text:span text:style-name="T14">tackBase(Size) {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P18"><text:s text:c="4"/>~Stack() {</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> push(ObjectType* object);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> pop(ObjectType** object);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">private</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P18"><text:s text:c="4"/>ObjectType* data[Size + 1];</text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Base class StackBase contains “top”, “size” fields and a couple of useful APIs</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">StackBase</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">isEmpty</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res = (</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">top</text:span><text:span text:style-name="T14"> == 0);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">isFull</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res = (</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">top</text:span><text:span text:style-name="T14"> == </text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">StackBase</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14"> = size;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">top</text:span><text:span text:style-name="T14"> = 0;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">errorOverflow</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">errorUnderflow</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">top</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="P41">Example of implementation of the class Stack push and pop methods:</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">templa</text:span><text:span text:style-name="T42">te&lt;typenam</text:span><text:span text:style-name="T5">e</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">Obje</text:span><text:span text:style-name="T14">c</text:span><text:span text:style-name="T42">tTyp</text:span><text:span text:style-name="T14">e, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> Lock, std::size_t Size&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> Stack&lt;ObjectType, Lock, Size&gt;::</text:span></text:p>
   <text:p text:style-name="P18">push(ObjectType* object) {</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>Lock();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>data[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;top] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;top++;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>errorOverflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> ObjectType, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> Lock, std::size_t Size&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> Stack&lt;ObjectType, Lock, Size&gt;::</text:span></text:p>
   <text:p text:style-name="P18">pop(ObjectType** object) {</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>Lock();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;top--;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>*object = (data[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;top]);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>errorUnderflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:p text:style-name="P41">My next step is to define a block of “raw” data memory. A block of memory is a correctly aligned array of bytes which optionally can be placed at a specific memory address. One popular application for such memory blocks are data buffers for DMA transfers. Data buffer can be placed in the regular RAM or in the dedicated address space. First I define a memory region. I use operator “new” - a placement new operator - to “place” the data at the specified address. My memory region has a name for debug purposes. A region address is of type uintptr_t - an unsigned integer that is capable of storing a pointer.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">MemoryRegion</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">MemoryRegion</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *name, </text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> address, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> size) :</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">name</text:span><text:span text:style-name="T14">(name), </text:span><text:span text:style-name="T50">address</text:span><text:span text:style-name="T14">(address), </text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">(size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">new</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">reinterpret_cast</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14">*&gt;(address)) </text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14">[size];</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">getSize</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14">* </text:span><text:span text:style-name="T16">getName</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">name</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">getAddress</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">address</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14">* </text:span><text:span text:style-name="T50">name</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">address</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14"> *</text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">I create an object of MemoryRegion type and point to the allocated by the compiler area in the dynamic data dmaMemoryData</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14"> dmaMemoryDummy[512];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">MemoryRegion</text:span><text:span text:style-name="T14"> dmaMemoryRegion(</text:span><text:span text:style-name="T37">&quot;dmaMem&quot;</text:span><text:span text:style-name="T14">, (</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14">)dmaMemoryDummy, </text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(dmaMemoryDummy));</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P41">I need an allocator – a class which deals with allocation of memory blocks. The allocator handles the correct alignment. I am going to use the allocator code only once (or rarely) – when I fill my memory pool with data blocks and the performance is not extremely important here. Method reset “frees” all allocated blocks back to the allocator.</text:p>
   <text:p text:style-name="P22"/>
   <text:p text:style-name="P50"><text:span text:style-name="T7">class</text:span><text:span text:style-name="T55"> </text:span><text:span text:style-name="T30">MemoryAllocatorRaw</text:span><text:span text:style-name="T55"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">MemoryAllocatorRaw</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">MemoryRegion</text:span><text:span text:style-name="T14"> memoryRegion, </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> blockSize, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> count, </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">unsigned</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> alignment);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14">* </text:span><text:span text:style-name="T16">getBlock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">blockBelongs</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14">* block) </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">MemoryRegion </text:span><text:span text:style-name="T14">&amp;</text:span><text:span text:style-name="T16">getRegion</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">memoryRegion</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">reset</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">firstNotAllocatedAddress</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T50">memoryRegion</text:span><text:span text:style-name="T14">.getAddress();</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">constexpr</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">predictMemorySize</text:span><text:span text:style-name="T14">(</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> blockSize, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> count, </text:span><text:span text:style-name="T5">unsigned</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> alignment) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> count * </text:span><text:span text:style-name="T19">alignConst</text:span><text:span text:style-name="T14">(blockSize, alignment);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">alignment</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">blockSize</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">MemoryRegion </text:span><text:span text:style-name="T14">&amp;</text:span><text:span text:style-name="T50">memoryRegion</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">count</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">sizeTotalBytes</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">alignedBlockSize</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">firstNotAllocatedAddress</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">constexpr</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">alignConst</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> value, </text:span><text:span text:style-name="T5">unsigned</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> alignment) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (value + ((</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14">)alignment-1)) &amp; (~((</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14">)alignment-1));</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">alignAddress</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> address, </text:span><text:span text:style-name="T5">unsigned</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> alignment) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> res = (address+((</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14">)alignment-1)) &amp; (~((</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14">)alignment-1));</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Implementation of the allocator methods follows. The allocator constructor makes sure that there is enough space in the memory region. I initialize the fields in the first line of the constructor right after the constructor name.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T16">MemoryAllocatorRaw::MemoryAllocatorRaw</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">MemoryRegion</text:span><text:span text:style-name="T14"> memoryRegion, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> blockSize, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> count, </text:span><text:span text:style-name="T5">unsigned</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> alignment) :</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">alignment</text:span><text:span text:style-name="T14">(alignment), </text:span><text:span text:style-name="T50">blockSize</text:span><text:span text:style-name="T14">(blockSize), </text:span><text:span text:style-name="T50">memoryRegion</text:span><text:span text:style-name="T14">(memoryRegion), </text:span><text:span text:style-name="T50">count</text:span><text:span text:style-name="T14">(count) <text:s/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">alignedBlockSize</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T19">alignAddress</text:span><text:span text:style-name="T14">(blockSize, alignment);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">sizeTotalBytes</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T50">alignedBlockSize</text:span><text:span text:style-name="T14"> * count;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T50">sizeTotalBytes</text:span><text:span text:style-name="T14"> &gt; memoryRegion.getSize()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T2">// handle error</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">firstNotAllocatedAddress</text:span><text:span text:style-name="T14"> = memoryRegion.getAddress();</text:span></text:p>
   <text:p text:style-name="P23"><text:s text:c="4"/>reset();</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Allocator implements only “get a block” API. Memory pool calls “get block” API from the pool constructor.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14">* </text:span><text:span text:style-name="T16">MemoryAllocatorRaw::getBlock</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> block;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>block = </text:span><text:span text:style-name="T19">alignAddress</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T50">firstNotAllocatedAddress</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T50">alignment</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">firstNotAllocatedAddress</text:span><text:span text:style-name="T14"> += </text:span><text:span text:style-name="T50">alignedBlockSize</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14">*)block;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">My pool needs sanity check to ensure that “free” is called only for the blocks which indeed “belong” to the pool.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">MemoryAllocatorRaw::blockBelongs</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14">* block) </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> blockPtr = (</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14">)block;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res = </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>res = res &amp;&amp; blockPtr &gt;= </text:span><text:span text:style-name="T50">memoryRegion</text:span><text:span text:style-name="T14">.getAddress();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> maxAddress = </text:span><text:span text:style-name="T50">memoryRegion</text:span><text:span text:style-name="T14">.getAddress()+</text:span><text:span text:style-name="T50">sizeTotalBytes</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>res = res &amp;&amp; (blockPtr &lt;= maxAddress);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> alignedAddress = </text:span><text:span text:style-name="T19">alignAddress</text:span><text:span text:style-name="T14">(blockPtr, </text:span><text:span text:style-name="T50">alignment</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>res = res &amp;&amp; (blockPtr == alignedAddress);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body">Before I declare an object of the allocator I check that the memory region I created is large enough. If the memory region is too small I want the compilation to fail.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">((</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(dmaMemoryDummy) &gt;= </text:span><text:span text:style-name="T31">MemoryAllocatorRaw</text:span><text:span text:style-name="T14">::</text:span><text:span text:style-name="T19">predictMemorySize</text:span><text:span text:style-name="T14">(63, 3, 2)), </text:span><text:span text:style-name="T37">&quot;DmaMemoryDummy region is not large enough&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">MemoryAllocatorRaw</text:span><text:span text:style-name="T14"> dmaAllocator(dmaMemoryRegion, 63, 3, 2);</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">My memory pool is a stack of data blocks. The class contains allocate/free API, some debug statistics. Every memory pool has a name – this is useful for logging and printing debug statistics. The stack in the memory pool is intentionally protected by a LockDummy – not protected. I am going to use a real synchronizer in the memory pool methods. Class methods with “const” keyword in the signature, for example resetMaxInUse() can not alter any member of the class. How comes that resetMaxInUse() changes the statistics field anyway?. Field statistics is mutable which allows const methods to modify it. Debug counters is a book example of using keyword mutable. Method resetMaxInUse() does not affect (meaningfully?) the visible to the user state of the object.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">&gt; </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">MemoryPoolRaw</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">MemoryPoolRaw</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14">* name, </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="6"/></text:span><text:span text:style-name="T31">MemoryAllocatorRaw</text:span><text:span text:style-name="T14">* memoryAllocator);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">~MemoryPoolRaw</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">memoryAllocator-&gt;</text:span><text:span text:style-name="T14">reset();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">resetMaxInUse</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">.</text:span><text:span text:style-name="T50">maxInUse</text:span><text:span text:style-name="T14"> = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">typedef</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">struct</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">inUse</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">maxInUse</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">errBadBlock</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T31">Statistics</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">allocate</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14">** block);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">free</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14">* block);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Statistics</text:span><text:span text:style-name="T14"> &amp;</text:span><text:span text:style-name="T16">getStatistics</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14">) </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">;}</text:span></text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">mutable</text:span><text:span text:style-name="T16"> </text:span><text:span text:style-name="T31">Statistics</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14">* </text:span><text:span text:style-name="T50">name</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">Stack</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">LockDummy</text:span><text:span text:style-name="T14">, <text:s/></text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T50">pool</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">MemoryAllocatorRaw</text:span><text:span text:style-name="T14">* </text:span><text:span text:style-name="T50">memoryAllocator</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Memory pool constructor calls the allocator to fill the stack of free blocks. Constructor can, for example, register the newly created memory pool in the data base of the memory pools. Application can provide meanings for the run-time inspection of the memory pools. Destructor would remove the pool from the data base</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">&gt; </text:span></text:p>
   <text:p text:style-name="P21">MemoryPoolRaw&lt;Lock, Size&gt;::</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16">MemoryPoolRaw</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14">* name, </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">MemoryAllocatorRaw</text:span><text:span text:style-name="T14">* memoryAllocator) :</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">name</text:span><text:span text:style-name="T14">(name), </text:span><text:span text:style-name="T50">memoryAllocator</text:span><text:span text:style-name="T14">(memoryAllocator) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T41">memset</text:span><text:span text:style-name="T14">(&amp;</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">, 0, </text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">));</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> i = 0;i &lt; </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">;i++) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14"> *block = memoryAllocator-&gt;getBlock();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">pool</text:span><text:span text:style-name="T14">.push(block);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Memory pool allocate/free API is reentrant and thread safe assuming that Lock class is not a dummy one. All activity which can modify the state of the stack is protected by Lock. If the application uses the pool only in one context it can provide LockDummy template argument for the memory pool. LockDummy adds no code to the executable. Statistics counters are relatively low cost, but can be immensely helpful for debugging cases like allocation failure. </text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P55"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">&gt;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">MemoryPoolRaw&lt;Lock, Size&gt;::</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T16">allocate</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14">** block) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/>res = </text:span><text:span text:style-name="T50">pool</text:span><text:span text:style-name="T14">.pop(block);</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (res) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">.</text:span><text:span text:style-name="T50">inUse</text:span><text:span text:style-name="T14">++;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">.</text:span><text:span text:style-name="T50">inUse</text:span><text:span text:style-name="T14"> &gt; </text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">.</text:span><text:span text:style-name="T50">maxInUse</text:span><text:span text:style-name="T14">)</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">.</text:span><text:span text:style-name="T50">maxInUse</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">.</text:span><text:span text:style-name="T50">inUse</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P6"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P6">}</text:p>
   <text:p text:style-name="Text_20_body">Memory pool “free” makes sure that the pointer to be freed indeed belongs to the pool. Blocks allocator knows to recognize it&apos;s own blocks. </text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="P13"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">&gt;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">MemoryPoolRaw&lt;Lock, Size&gt;::</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T16">free</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint8_t</text:span><text:span text:style-name="T14">* block) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/>res = </text:span><text:span text:style-name="T50">memoryAllocator</text:span><text:span text:style-name="T14">-&gt;blockBelongs(block);</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (res) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="8"/>res = </text:span><text:span text:style-name="T50">pool</text:span><text:span text:style-name="T14">.push(block);</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">.</text:span><text:span text:style-name="T50">inUse</text:span><text:span text:style-name="T14">--;</text:span></text:p>
   <text:p text:style-name="P6"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">statistics</text:span><text:span text:style-name="T14">.</text:span><text:span text:style-name="T50">errBadBlock</text:span><text:span text:style-name="T14">++;</text:span></text:p>
   <text:p text:style-name="P6"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body">It is going to be fairly easy to prevent release of the same block more than once. If the data blocks are part of the continuous <text:s/>memory the allocator can provide a method generating a unique index based on the address of the block. Memory pool can contain an array where blocks are marked as allocated or free and method free() can check the block against this array. If the memory region is not continuous the allocator can implement a hash function which translates the address of a data block to a unique data block index.</text:p>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__12039_1005710029"/>Operator new.<text:bookmark-end text:name="__RefHeading__12039_1005710029"/></text:h>
   <text:p text:style-name="Quotations">Algorithm (noun)<text:line-break/>Word used by programmers when they do not want to explain what they did.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Many small microcontrollers have a a relatively small heap for dynamic memory allocation. The design choice not to use dynamic memory allocation at all is very popular. It does not make sense in the firmware to use standard implementations of operators “new” and “delete” from the C/C++ library. Operator new can throw an exception – a dynamically allocated object by itself – if the system runs out of free memory. Calls to new and delete for different objects in run-time will eventually cause memory fragmentation. Software timers <text:s/>from the previous chapter and STL containers can take advantage of user-defined memory allocation which employs custom allocators. Such customized new operator can be based on a “placement” new. Constructor in the CyclicBufferDynamic class can be redefined like this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">&gt; </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferDynamic</text:span></text:p>
   <text:p text:style-name="P21">&lt;ObjectType, Lock&gt;::</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16">CyclicBufferDynamic</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> size, </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> *address) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14"> = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14"> = size;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (address != </text:span><text:span text:style-name="T5">nullptr</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">new</text:span><text:span text:style-name="T14"> (address) </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">[size];</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">new</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">[size];</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">) &lt;= </text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14">), </text:span><text:span text:style-name="T37">&quot;CyclicBuffer is intended to work only with integer types or pointers&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">In the following example I make the compiler to allocate the required memory statically and use the address of the allocated data in the call to the constructor.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> myDynamicCyclicBufferData[calculateCyclicBufferSize()];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">CyclicBufferDynamic</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">LockDummy</text:span><text:span text:style-name="T14">&gt; myDynamicCyclicBuffer(calculateCyclicBufferSize(), &amp;myDynamicCyclicBufferData);</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:h text:style-name="P45" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__12421_1005710029"/><text:span text:style-name="T67">I/O access</text:span>.<text:bookmark-end text:name="__RefHeading__12421_1005710029"/></text:h>
   <text:p text:style-name="Quotations">How many programmers does it take to change a light bulb? None - it&apos;s a hardware problem.</text:p>
   <text:p text:style-name="P36"/>
   <text:p text:style-name="Text_20_body">Embedded software accesses the hardware via hardware registers. I will assume that there are three groups of registers – read and write registers, read only registers and write only registers. All registers are memory mapped – there is an address for every register. The software can access a register in the same way as it reads or writes a variable given the variable&apos;s address. In case of write only registers it is a custom to keep a cached value – a variable sitting in the data memory which contains the latest written to the write only register value. </text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">The following example is based on the user interface of the Parallel Input/Output controller (PIO) in the Atmel SAMA5d3 microcontroller. I have simplified the interface to save lines of code and text. </text:p>
   <table:table table:name="PIOUserInterface" table:style-name="PIOUserInterface">
    <table:table-column table:style-name="PIOUserInterface.A"/>
    <table:table-column table:style-name="PIOUserInterface.B"/>
    <table:table-column table:style-name="PIOUserInterface.C"/>
    <table:table-column table:style-name="PIOUserInterface.D"/>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0000</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO Enable Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO_PER</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D1" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0004</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO Disable Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO_PDR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0008</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO Status Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO_PSR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Read-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x000C</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Reserved</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0010</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Output Enable Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO_OER</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0014</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Output Disable Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO_ODR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0018</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Output Status Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO_OSR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Read-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x001C</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Reserved</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0020</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Not used</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0024</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Not used</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0028</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Not used</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x002C</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Reserved</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0030</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Set Output Data Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO_SODR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0034</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Clear Output Data Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO_CODR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">0x0038</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Output Status Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">PIO_ODSR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents">Read-only</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">There are 5 32 bits I/Os like this called A, B, C, D, E, F in the microcontroller. The registers are mapped starting at the address 0xFFFFF200. User shall write 1 to the bit she wishes to modify in a write-only registers. For example, user will write 0x04 to PIO_SODR – set the output value first, PIO_PER, PIO_OER to drive pin 2 (zero based) of the PIO high. Write to the PIO registers is an atomic operation. The hardware interface allows to change the configuration of a single bit in a thread safe manner. Hardware provides convenient status registers which keep the current value of the registers, also called a shadow.</text:p>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__8080_1329019087"/>I/O access in C.<text:bookmark-end text:name="__RefHeading__8080_1329019087"/></text:h>
   <text:p text:style-name="Quotations">&quot;Writing in C or C++ is like running a chain saw with all the safety guards removed,&quot; - <text:span text:style-name="Citation">Bob Gray.</text:span></text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">I am providing quick and dirty C implementation. Macro RESERVED demonstrates a neat trick to generate unique identifier name. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> TOKEN_CAT(x, y) x </text:span><text:span text:style-name="T5">##</text:span><text:span text:style-name="T14"> y</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> TOKEN_CAT2(x, y) TOKEN_CAT(x, y)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> RESERVED TOKEN_CAT2(reserved, __COUNTER__)</text:span></text:p>
   <text:p text:style-name="Text_20_body">Declare the PIO structure – a group of32 bits registers. The structure is “packed” - I want to ensure that the compiler does not do any padding. Pragma “pack” is potentially not safe, because some architectures, like ARM or MIPS, do not support non-aligned access. </text:p>
   <text:p text:style-name="P22"/>
   <text:p text:style-name="P50"><text:span text:style-name="T7">#pragma</text:span><text:span text:style-name="T13"> pack(push)</text:span></text:p>
   <text:p text:style-name="P22"><text:span text:style-name="T7">#pragma</text:span><text:span text:style-name="T13"> pack(1)</text:span></text:p>
   <text:p text:style-name="P22"><text:span text:style-name="T7">struct</text:span><text:span text:style-name="T13"> </text:span><text:span text:style-name="T30">PIO</text:span><text:span text:style-name="T13"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_PER</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_PDR</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_PSR</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_OER</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_ODR</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_OSR</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_SODR</text:span><text:span text:style-name="T14"> ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_CODR</text:span><text:span text:style-name="T14"> ;</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="P22"><text:span text:style-name="T7">#pragma</text:span><text:span text:style-name="T55"> pack(pop)</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Declare a pointer to the memory area:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#ifdef</text:span><text:span text:style-name="T14"> REAL_HARDWARE</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> PIO *pios = (PIO*)0xFFFFF200;</text:span></text:p>
   <text:p text:style-name="P16">#else</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">PIO</text:span><text:span text:style-name="T14"> pioDummy[5];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">PIO</text:span><text:span text:style-name="T14"> *pios = pioDummy;</text:span></text:p>
   <text:p text:style-name="P16">#endif</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Five PIO blocks:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">typedef</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">enum</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T51">PIO_A</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T51">PIO_B</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T51">PIO_C</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T51">PIO_D</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T51">PIO_E</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T51">PIO_F</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14">} </text:span><text:span text:style-name="T31">PIO_NAME</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Function which configures a pin as output:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">enableOutput</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">PIO_NAME</text:span><text:span text:style-name="T14"> name, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> pin, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> value) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">PIO</text:span><text:span text:style-name="T14"> *pio = &amp;pios[name];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> mask = 1 &lt;&lt; pin;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (value) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>pio-&gt;</text:span><text:span text:style-name="T50">PIO_SODR</text:span><text:span text:style-name="T14"> = mask;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>pio-&gt;</text:span><text:span text:style-name="T50">PIO_CODR</text:span><text:span text:style-name="T14"> = mask;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>pio-&gt;</text:span><text:span text:style-name="T50">PIO_PER</text:span><text:span text:style-name="T14"> = mask;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>pio-&gt;</text:span><text:span text:style-name="T50">PIO_OER</text:span><text:span text:style-name="T14"> = mask;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Function which drives PIO A, pin 2 high can look like this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">main</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>enableOutput(</text:span><text:span text:style-name="T51">PIO_A</text:span><text:span text:style-name="T14">, 2, 1);</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">This is how the relevant assembly for Intel looks like – as expected there are three 32-bits moves </text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="P52"><text:s text:c="2"/>PIO *pio = &amp;pios[name];</text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>uint32_t mask = 1 &lt;&lt; pin;</text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>if (value) {</text:p>
   <text:p text:style-name="P18"><text:s text:c="6"/>pio-&gt;PIO_SODR = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">4007e0:</text:span><text:span text:style-name="T14"><text:tab/>c7 05 e6 19 20 00 04 <text:tab/>movl <text:s text:c="2"/>$0x4,0x2019e6(</text:span><text:span text:style-name="T5">%rip</text:span><text:span text:style-name="T14">)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">4007e7:</text:span><text:span text:style-name="T14"><text:tab/>00 00 00 </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">4007ea:</text:span><text:span text:style-name="T14"><text:tab/>31 c0 <text:s text:c="15"/><text:tab/>xor <text:s text:c="3"/></text:span><text:span text:style-name="T5">%eax</text:span><text:span text:style-name="T14">,</text:span><text:span text:style-name="T5">%eax</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="6"/>pio-&gt;PIO_SODR = mask;</text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>else {</text:p>
   <text:p text:style-name="P18"><text:s text:c="6"/>pio-&gt;PIO_CODR = mask;</text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>}</text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>pio-&gt;PIO_PER = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">4007ec:</text:span><text:span text:style-name="T14"><text:tab/>c7 05 aa 19 20 00 04 <text:tab/>movl <text:s text:c="2"/>$0x4,0x2019aa(</text:span><text:span text:style-name="T5">%rip</text:span><text:span text:style-name="T14">)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">4007f3:</text:span><text:span text:style-name="T14"><text:tab/>00 00 00 </text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>pio-&gt;PIO_OER = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">4007f6:</text:span><text:span text:style-name="T14"><text:tab/>c7 05 b0 19 20 00 04 <text:tab/>movl <text:s text:c="2"/>$0x4,0x2019b0(</text:span><text:span text:style-name="T5">%rip</text:span><text:span text:style-name="T14">)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">4007fd:</text:span><text:span text:style-name="T14"><text:tab/>00 00 00 </text:span></text:p>
   <text:p text:style-name="Text_20_body">Assembly generated for ARM is slightly longer. In ARM an address should be loaded to a register before a value can be stored.</text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="P52">PIO *pio = &amp;pios[name];</text:p>
   <text:p text:style-name="P18">uint32_t mask = 1 &lt;&lt; pin;</text:p>
   <text:p text:style-name="P18">if (value) {</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>pio-&gt;PIO_SODR = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">8650:</text:span><text:span text:style-name="T14"><text:tab/>e59f3014 <text:tab/>ldr<text:tab/>r3, [pc, #20]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">8654:</text:span><text:span text:style-name="T14"><text:tab/>e3a02004 <text:tab/>mov<text:tab/>r2, #4</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">8658:</text:span><text:span text:style-name="T14"><text:tab/>e5832090 <text:tab/>str<text:tab/>r2, [r3, #144]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">865c:</text:span><text:span text:style-name="T14"><text:tab/>e3a00000 <text:tab/>mov<text:tab/>r0, #0</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>pio-&gt;PIO_SODR = mask;</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="P18">else {</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>pio-&gt;PIO_CODR = mask;</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="P18">pio-&gt;PIO_PER = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">8660:</text:span><text:span text:style-name="T14"><text:tab/>e5832060 <text:tab/>str<text:tab/>r2, [r3, #96]</text:span></text:p>
   <text:p text:style-name="P18">pio-&gt;PIO_OER = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">8664:</text:span><text:span text:style-name="T14"><text:tab/>e5832070 <text:tab/>str<text:tab/>r2, [r3, #112]</text:span></text:p>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__8082_1329019087"/>I/O access in C++.<text:bookmark-end text:name="__RefHeading__8082_1329019087"/></text:h>
   <text:p text:style-name="Quotations">&quot;C(++) is a write-only, high-level assembler language.&quot; <text:span text:style-name="Citation">— Stefan Van Baelen.</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">This is not easy to compete with C when accessing the I/O. Compiler C translates every line of C code into a single machine opcode. There is no need to manually specify an address for every register - it&apos;s enough to create a pointer which references physical address. I need C++ implementation with the same perfect performance score, similar convenience of usage AND some added value, for example type safety.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">First class is an abstraction of a hardware module. The class constructor is protected – application can create only objects of derived classes.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareModule</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">HardwareModule</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> address): </text:span><text:span text:style-name="T50">address</text:span><text:span text:style-name="T14">(address) {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">~HardwareModule</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">address</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">I declare a template for all hardware registers. Static assert will fail compilation if argument IntegerType specified in the type instantiation is not an integer type. API “std::atomic” ensures an atomic read/write operation on any architecture, like reading of 32 bis value on 8 bits CPU</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">HardwareRegister</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">get</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> atomic_load(&amp;</text:span><text:span text:style-name="T50">value</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">set</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14"> value) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>atomic_store(&amp;</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">value</text:span><text:span text:style-name="T14">, value);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">atomic</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T50">value</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">numeric_limits</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14">&gt;::</text:span><text:span text:style-name="T50">is_integer</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T37">&quot;HardwareRegister works only with integer types&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Next class is a 32 bits register. Static assertion will fail the build if the object consumes more than 32 bits – this is absolutely vital for the correct access to the hardware and comes instead of the “packed” attribute in the C version.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister32</text:span><text:span text:style-name="T14">: </text:span><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14">&gt; {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">HardwareRegister32</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">((</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">HardwareRegister32</text:span><text:span text:style-name="T14">) == </text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14">)), </text:span><text:span text:style-name="T37">&quot;HardwareRegister32 is not 32 bits&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Read only and write only registers follow. The classes overload type cast operator and assignment operator and allow to use assignment to read and write the register value. Read/write registers would implement both assignment operator and type cast operator.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister32RO</text:span><text:span text:style-name="T14"> : </text:span><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister32</text:span><text:span text:style-name="T14">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">operator uint32_t</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> get();</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">((</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">HardwareRegister32RO</text:span><text:span text:style-name="T14">) == </text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14">)), </text:span><text:span text:style-name="T37">&quot;HardwareRegister32RO is not 32 bits&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister32WO</text:span><text:span text:style-name="T14"> : </text:span><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister32</text:span><text:span text:style-name="T14">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">operator=</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> value) {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>set(value);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> value;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">((</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">HardwareRegister32WO</text:span><text:span text:style-name="T14">) == </text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14">)), </text:span><text:span text:style-name="T37">&quot;HardwareRegister32WO is not 32 bits&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">For the clarity I add a register “reserved” - I call it “not used”</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister32NotUsed</text:span><text:span text:style-name="T14"> : </text:span><text:span text:style-name="T31">HardwareRegister32</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">HardwareRegister32NotUsed</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">~HardwareRegister32NotUsed</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">((</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">HardwareRegister32NotUsed</text:span><text:span text:style-name="T14">) == </text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14">)), </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T37">&quot;HardwareRegister32NotUsed is not 32 bits&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Text_20_body">The framework is in place and can serve any 32 bits register. Declare the PIO hardware module. There is nothing unexpected but just a repetition of all the same tricks including compilation time check of the size of the structure. An object of type HardwarePIO requires about the same amount data as the competing C version. Depending on the optimization level and complexity of the class there is going to be one additional pointer in the RAM – pointer “this”. In the specific implementation below all methods of the class are “inline” and the object data is optimized out completely. </text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwarePIO</text:span><text:span text:style-name="T14"> : </text:span><text:span text:style-name="T31">HardwareModule</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">HardwarePIO</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> address) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">interface</text:span><text:span text:style-name="T14"> = (</text:span><text:span text:style-name="T5">struct</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Interface</text:span><text:span text:style-name="T14">*)address;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">~HardwarePIO</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">struct</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Interface</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32WO</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_PER</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32WO</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_PDR</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32RO</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_PSR</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32NotUsed</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32WO</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_OER</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32WO</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_ODR</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32RO</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_OSR</text:span><text:span text:style-name="T14"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32NotUsed</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32NotUsed</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32NotUsed</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32NotUsed</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32NotUsed</text:span><text:span text:style-name="T14"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32WO</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_SODR</text:span><text:span text:style-name="T14"> ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">HardwareRegister32WO</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">PIO_CODR</text:span><text:span text:style-name="T14"> ;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">((</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">struct</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Interface</text:span><text:span text:style-name="T14">) == (14*</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14">))), </text:span><text:span text:style-name="T37">&quot;</text:span><text:span text:style-name="T38">struct</text:span><text:span text:style-name="T37"> interface is of wrong size, broken alignment?&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">enum</text:span><text:span text:style-name="T14"> Name {</text:span><text:span text:style-name="T51">A</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">B</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">C</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">D</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">E</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">F</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">LAST</text:span><text:span text:style-name="T14">};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Interface</text:span><text:span text:style-name="T14">&amp; </text:span><text:span text:style-name="T16">getInterface</text:span><text:span text:style-name="T14">(Name name) </text:span><text:span text:style-name="T5">const </text:span><text:span text:style-name="T14">{</text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">interface</text:span><text:span text:style-name="T14">[name];};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">enableOutput</text:span><text:span text:style-name="T14">(Name name, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> pin, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> value);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">struct</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Interface</text:span><text:span text:style-name="T14">* </text:span><text:span text:style-name="T50">interface</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Implementation of the method enableOutput is very similar to the C version:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">HardwarePIO::enableOutput</text:span><text:span text:style-name="T14">(Name name, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> pin, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> value)</text:span></text:p>
   <text:p text:style-name="P18">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">struct</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Interface</text:span><text:span text:style-name="T14">&amp; interface = getInterface(name);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> mask = 1 &lt;&lt; pin;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (value) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>interface.</text:span><text:span text:style-name="T50">PIO_SODR</text:span><text:span text:style-name="T14"> = mask;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>interface.</text:span><text:span text:style-name="T50">PIO_CODR</text:span><text:span text:style-name="T14"> = mask;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>interface.</text:span><text:span text:style-name="T50">PIO_PER</text:span><text:span text:style-name="T14"> = mask;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>interface.</text:span><text:span text:style-name="T50">PIO_OER</text:span><text:span text:style-name="T14"> = mask;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Usage example:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwarePIO</text:span><text:span text:style-name="T14"> hardwarePIO(</text:span><text:span text:style-name="T5">reinterpret_cast</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14">&gt;(pioDummy));</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">main</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>hardwarePIO.enableOutput(</text:span><text:span text:style-name="T31">HardwarePIO</text:span><text:span text:style-name="T14">::</text:span><text:span text:style-name="T51">A</text:span><text:span text:style-name="T14">, 2, 1);</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body">This C++ implementation produces the same assembly as the old trusty C one. There is no more “code bloat” than in the C implementation. C++ framework comes with some worthy benefits. If a user attempts to read a write only register build will fail. The following statement will break the compilation:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> per = hardwarePIO.getInterface(</text:span><text:span text:style-name="T31">HardwarePIO</text:span><text:span text:style-name="T14">::</text:span><text:span text:style-name="T51">A</text:span><text:span text:style-name="T14">).</text:span><text:span text:style-name="T50">PIO_PER</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Text_20_body">Access to the PIO registers is encapsulated in the class methods of the hardware module. The methods in the HardwarePIO class are the only way to modify a register. C++ implementation allows to catch other wrong doings at compilation time, for example reading or writing reserved registers. </text:p>
   <text:p text:style-name="Text_20_body">It is easy to cache all written values in the hardware module. One way to cache or log the read and write transactions is to add a “shadow” interface field to the hardware module class.</text:p>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__11237_696237465"/>Indirect I/O access.<text:bookmark-end text:name="__RefHeading__11237_696237465"/></text:h>
   <text:p text:style-name="Text_20_body">In some case the hardware is accessible via a serial interface like SPI, MDIO or I2C. I am using a direct access API for the sake of brevity. A real access interface for a real SPI device can contain system calls or calls to the serial interface driver.</text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="P14"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14">&gt; </text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareDirectAccessAPI</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">get</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> atomic_load(&amp;</text:span><text:span text:style-name="T50">value</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P6"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">set</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14"> value) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="8"/>atomic_store(&amp;</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">value</text:span><text:span text:style-name="T14">, value);</text:span></text:p>
   <text:p text:style-name="P6"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">volatile</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">atomic</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T50">value</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">numeric_limits</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14">&gt;::</text:span><text:span text:style-name="T50">is_integer</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="6"/></text:span><text:span text:style-name="T37">&quot;HardwareDirectAccessAPI works only with integer types&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P6">};</text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">I am adding an argument to the template class HardwareRegister – access API:</text:p>
   <text:p text:style-name="P31"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">AccessAPI</text:span><text:span text:style-name="T14">&gt; </text:span></text:p>
   <text:p text:style-name="P31"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">HardwareRegister</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">get</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">api</text:span><text:span text:style-name="T14">.get();</text:span></text:p>
   <text:p text:style-name="P6"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">set</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">IntegerType</text:span><text:span text:style-name="T14"> value) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">api</text:span><text:span text:style-name="T14">.set(value);</text:span></text:p>
   <text:p text:style-name="P6"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">AccessAPI</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">api</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P6">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Instance of the HardwareRegister for 32 bits registers, direct access will look like this:</text:p>
   <text:p text:style-name="P31"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister32</text:span><text:span text:style-name="T14">: </text:span></text:p>
   <text:p text:style-name="P31"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HardwareRegister</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">HardwareDirectAccessAPI</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">uint32_t</text:span><text:span text:style-name="T14">&gt; &gt; {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">HardwareRegister32</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="P6">};</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T67">The r</text:span>est of the classes remain<text:span text:style-name="T67">s</text:span> the same. </text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:h text:style-name="P47" text:outline-level="2"/>
   <text:h text:style-name="P45" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__7726_2007975351"/>Code ROM and data RAM.<text:bookmark-end text:name="__RefHeading__7726_2007975351"/></text:h>
   <text:p text:style-name="Quotations">If at first you don&apos;t succeed; call it version 1.0. </text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">There are very popular hardware platforms where ROM and RAM distinction is very important. One example of such device is rather popular 8 bits microcontrollers Atmega. In the Atmega MCUs code can not be placed in the data memory – CPU can not execute code sitting in the RAM. Access to the data in the code memory requires special instructions. Another example is Application Specific Integration Circuits or ASICs. An ASIC often contains integrated ROM and RAM. Integrated, also called on die or on chip, ROM storage is relatively cheap because it requires relatively small amount of space on the silicone wafer. RAM is relatively expensive because it requires more logic per bit of memory and square inches on the integrated circuit (die) come at premium. RAM consumes significantly more power. I think that the vast majority of the electronic device around us have integrated ROM and RAM (frequently SRAM) inside and typically on chip RAM is much smaller than the ROM.</text:p>
   <text:p text:style-name="Text_20_body">There are two types of ROM – erasable and not erasable. In the Atmega MCUs different areas of the ROM can be programmed by the firmware assuming that the firmware runs from another area. In case of ASICs ROM is often not erasable. ROM programming is a part of the ASIC production process. The ROM can not be modified after the chip leaves the factory (FAB). </text:p>
   <text:p text:style-name="Text_20_body">If there is not enough RAM to load the firmware then parts of the firmware code should be located in the chip ROM. In case of an ASIC it means that the ROM based parts of the firmware can be changed only in the future versions of the chip. High complexity of the modern ASIC firmware makes it very hard to reach 100% code coverage in the ASIC verification process. Even if the ROM based firmware is verified and tested completely still there is a chance that this or that protocol has been misunderstood by the development team or product requirements has changed. The development team prepares the firmware and the hardware for the not unlikely event that need to patch the ROM will arise.</text:p>
   <text:p text:style-name="Text_20_body">This chapter covers some of the ROM related problems.</text:p>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__7728_2007975351"/>C++ Initialized data.<text:bookmark-end text:name="__RefHeading__7728_2007975351"/></text:h>
   <text:p text:style-name="Text_20_body">At least one code section – boot, constants and initialized data are parts of the ROM. Initialized non-zero data is going to consume memory two times. Initialization values of the initialized data are part of the ROM. Usually boot process copies the values from the ROM to the RAM. If I inspect an object file generated by a compiler I can easily find initialization data for the strings. There are utilities which help to inspect the object files, dump different section into separate files and prepare the images for ROM programming. Example of such utility is GNU objdump. Let&apos;s see some C++ initialized data in action. Following code produces two line of output - “Hello, world!” and “Hello from main()!”</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HelloWorld</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">HelloWorld</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Hello, world!&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HelloWorld</text:span><text:span text:style-name="T14"> helloWorld;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">main</text:span><text:span text:style-name="T14">()</text:span></text:p>
   <text:p text:style-name="P18">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Hello from main()!&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body">Function main() contains only one output. Entity responsible for initializing of the C++ object helloWorld and printing the first line is an object loader running in my operating system. In case of the embedded systems this code is usually part of the boot process. Constructor of the HelloWorld class is text and appears only once in the ROM. Arguments of the cout – the strings can exist in two places in the memory. Original or master copy is in the ROM and a second copy created by the loader is in the RAM. Pointer “this” which contains address of the statically allocated object helloWorld has two copies too. There is an initialization value for “this” pointer in the ROM and “this” pointer in the RAM. <text:s/>Size allocated by helloWorld object in the ROM of 32 bits CPU is at least 4 bytes of “this” and 14 bytes of zero terminated string. Linker script is responsible for correct placement of different sections of the code and data. If the CPU can not access data stored in the code memory linker script should contain relevant allocation instructions. Specifically place for the constant data section will be allocated two times – in the code ROM address space and in the RAM. <text:s/></text:p>
   <text:p text:style-name="Text_20_body">In a typical case a linker script will add global variables which reference start and end address of the not initialized data section(s) “bss”, initialize data and table of “ctor” functions. Usually ctor section is a table or tables of functions which the boot code calls to initialize static C++ objects. See your linker documentation for details.</text:p>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__7954_2007975351"/>ROM patching.<text:bookmark-end text:name="__RefHeading__7954_2007975351"/></text:h>
   <text:p text:style-name="Quotations">Programming is a lot like sex. One mistake and you&apos;re providing support for a lifetime.</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">I want to prepare the constructor code for a patch in the future. I will check some well known address in the RAM. If there is a non-zero entry I will use the string from there, if not I will print the default value – the ROMed one.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *helloWorldStr = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HelloWorld</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">HelloWorld</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (helloWorldStr == 0)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Hello, world!&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">else</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/>cout &lt;&lt; helloWorldStr &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body">Loading of an ASIC which can be patched contains two stages. In the first phase external CPU (also called a host processor) loads some firmware to the ASIC RAM – there is a dedicated hardware/boot firmware which supports load of the application firmware to the RAM. An alternative can be that boot code in the ASIC loads the application firmware from some external programmable memory chip, for example EEPROM or SPI FLASH. The second phase is when boot jumps to the application code in the RAM. If the code loaded by the host processor contains non-zero at the address helloWorldStr the ROM based application code will print a new string. I am calling this type of patch Patch Type A. In the patch type A I fix part of the function. </text:p>
   <text:p text:style-name="Text_20_body">For the Patch type B I need hardware support. If the CPU fetches an instruction from a specific address or a range of addresses – in case of the code below this is an address of the function printHello(), I want to receive interrupt and switch control to the interrupt handler located in the RAM. Default interrupt handler does nothing – it is empty and simply returns allowing the function printHello() to complete it&apos;s useful work. Patched interrupt handler can modify the string “Hello, world” in the RAM before letting the function printHello() to print it The interrupt handler can execute some arbitrary code and return the control to the caller of the printHello() skipping the original print code completely.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">HelloWorld</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">HelloWorld</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>printHello();</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">printHello</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Hello, world!&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body">For Patch Type C I need support in the linker script. I want to place constructor of the HelloWorld in the ROM, but method printHello() I want to execute in the RAM. If the HelloWorld constructor calls a function in the RAM I can easily patch the function code. </text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:h text:style-name="P45" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__12357_1195782936"/>Operating system.<text:bookmark-end text:name="__RefHeading__12357_1195782936"/></text:h>
   <text:p text:style-name="Quotations">Have you ever noticed the difference between a &apos;C&apos; project plan, and a C++ project plan? The planning stage for a C++ project is three times as long. Precisely to make sure that everything which should be inherited is, and what shouldn&apos;t isn&apos;t. Then, they still get it wrong. Remember the length of the average-sized &apos;C&apos; project? About 6 months. Not nearly long enough for a guy with a wife and kids to earn enough to have a decent standard of living. Take the same project, design it in C++ and what do you get? I&apos;ll tell you. One to two years. Isn&apos;t that great?</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">I will attempt to write a wrapper for the “create task” API. A typical wrapper for APIs similar to pthread_create or FreeRTOS xTaskCreate is based on a static method in a class called, for example, MyThread. Indeed this is the only way I know to write a portable C++ wrapper which will work for most operating systems. I will duly present a basic example of this approach not because it is fascinating, but because it is expected of a reasonable “C++ for embedded” book. Feel free to jump right to the next paragraph where I present non-portable code of C++ create task wrapper. </text:p>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__13575_1195782936"/>Static (class) member.<text:bookmark-end text:name="__RefHeading__13575_1195782936"/></text:h>
   <text:p text:style-name="Quotations"><text:span text:style-name="Emphasis">C </text:span>allows you to shoot yourself in the foot. <text:span text:style-name="Emphasis">C++ </text:span>allows you to re-use the bullet.</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">I am going to allocate my job thread objects from a pool. For example an implementation of RPC can use a pool of job threads to execute procedures locally. MemoryPool is a generic pool of objects which allocates the objects statically. The pool constructor fills the stack of objects with pointers from the statically allocated array. I skip the details here because this is a reuse of the memory pool class from the previous chapters. </text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">MemoryPool</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">MemoryPool</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> i = 0;i &lt; </text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">;i++) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">pool</text:span><text:span text:style-name="T14">.push(&amp;</text:span><text:span text:style-name="T50">objects</text:span><text:span text:style-name="T14">[i]);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">~MemoryPool</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">allocate</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> **obj) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>res = </text:span><text:span text:style-name="T50">pool</text:span><text:span text:style-name="T14">.pop(obj);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">free</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> *obj) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>res = </text:span><text:span text:style-name="T50">pool</text:span><text:span text:style-name="T14">.push(obj);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">Stack</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">LockDummy</text:span><text:span text:style-name="T14">, <text:s/></text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T50">pool</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">objects</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T42">Size</text:span><text:span text:style-name="T14">];</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">A JobThread implements a “start” API and a static method with loop forever. More realistic implementations would add “wait for completion”, some mechanism for asynchronous notifications of the caller context that the job is done, support for arguments to the job function.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14"> &lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">JobType</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">JobThread</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">JobThread</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">start</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">JobType</text:span><text:span text:style-name="T14"> *job);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">JobType</text:span><text:span text:style-name="T14"> *</text:span><text:span text:style-name="T50">job</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">xTaskHandle</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">pxCreatedTask</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">xQueueHandle</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">signal</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">mainLoop</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">JobThread</text:span><text:span text:style-name="T14"> *jobThread);</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">JobThread constructor creates a binary semaphore and spawns – this specific choice of verb is based on “taskSpawn” which is a create task API in vxWorks - a new thread. I am assuming FreeRTOS API in this example, but any other API would work here:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">JobType</text:span><text:span text:style-name="T14">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16">JobThread&lt;JobType&gt;::JobThread</text:span><text:span text:style-name="T14">() : </text:span><text:span text:style-name="T50">job</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">nullptr</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *name = </text:span><text:span text:style-name="T37">&quot;a job&quot;</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>vSemaphoreCreateBinary(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">signal</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>portBASE_TYPE res = xTaskCreate((</text:span><text:span text:style-name="T31">pdTASK_CODE</text:span><text:span text:style-name="T14">)</text:span><text:span text:style-name="T19">mainLoop</text:span><text:span text:style-name="T14">, (</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">signed</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *)name, 300, </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">, 1, &amp;</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">pxCreatedTask</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (res != pdPASS) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Failed to create a task&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">The thread entry – mainLoop method – enters loop forever and waits for the binary semaphore. In the real code I would probably test an object variable “bool exitFlag” instead of always true condition:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">JobType</text:span><text:span text:style-name="T14">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">JobThread&lt;JobType&gt;::mainLoop</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">JobThread</text:span><text:span text:style-name="T14"> *jobThread) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">while</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>xSemaphoreTake(jobThread-&gt;</text:span><text:span text:style-name="T50">signal</text:span><text:span text:style-name="T14">, portMAX_DELAY);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (jobThread-&gt;</text:span><text:span text:style-name="T50">job</text:span><text:span text:style-name="T14"> != </text:span><text:span text:style-name="T5">nullptr</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/>jobThread-&gt;</text:span><text:span text:style-name="T50">job</text:span><text:span text:style-name="T14">-&gt;run();</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>jobThread-&gt;</text:span><text:span text:style-name="T50">job</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">nullptr</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Method “start” sets the job pointer and wakes up the mainLoop:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">JobType</text:span><text:span text:style-name="T14">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">JobThread&lt;JobType&gt;::start</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">JobType</text:span><text:span text:style-name="T14"> *job) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">job</text:span><text:span text:style-name="T14"> = job;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>xSemaphoreGive(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">signal</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">And a usage example – the code shall output “Print job is running”:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">struct</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">PrintJob</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">run</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Print job is running&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">MemoryPool</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">LockDummy</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T31">JobThread</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">PrintJob</text:span><text:span text:style-name="T14">&gt;, 3&gt; jobThreads;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">PrintJob</text:span><text:span text:style-name="T14"> printJob;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">main</text:span><text:span text:style-name="T14">( </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> )</text:span></text:p>
   <text:p text:style-name="P18">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">JobThread</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">PrintJob</text:span><text:span text:style-name="T14">&gt; *jobThread;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>jobThreads.allocate(&amp;jobThread);</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>jobThread-&gt;start(&amp;printJob);</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P18"><text:s text:c="4"/>vTaskStartScheduler();</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 1;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__13577_1195782936"/>Non static member.<text:bookmark-end text:name="__RefHeading__13577_1195782936"/></text:h>
   <text:p text:style-name="Quotations">&quot;C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do it blows your whole leg.</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">I am modifying only two lines in the code above. The call to xTaskCreate gets a pointer to a member function - compiler understandably warns about converting a method to a generic pointer:</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> *pMainLoop = (</text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14">*)&amp;</text:span><text:span text:style-name="T31">JobThread</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T42">JobType</text:span><text:span text:style-name="T14">&gt;::mainLoop;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14">portBASE_TYPE res = xTaskCreate((</text:span><text:span text:style-name="T31">pdTASK_CODE</text:span><text:span text:style-name="T14">)pMainLoop, (</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">signed</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *)name, 300, </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">, 1, &amp;</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">pxCreatedTask</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Main loop method is not a static method anymore and does not need any argument:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">JobType</text:span><text:span text:style-name="T14">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">JobThread&lt;JobType&gt;::mainLoop</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">while</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>xSemaphoreTake(</text:span><text:span text:style-name="T50">signal</text:span><text:span text:style-name="T14">, portMAX_DELAY);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T50">job</text:span><text:span text:style-name="T14"> != </text:span><text:span text:style-name="T5">nullptr</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">job</text:span><text:span text:style-name="T14">-&gt;run();</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">job</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">nullptr</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body">The trick works because most (all?) C++ compilers push “this” - a pointer to the object – first to the arguments stack. The trick can fail if C and C++ code use stack frames differently. Pointers to virtual methods can fail too. This is always possible to use brute force – disassembly – and figure out how to call the member function correctly. Calls to virtual functions are going to be very different across compilers. Most C++ compilers replace the call to a virtual member by a small chunk of assembly code which calculates the method address.</text:p>
   <text:p text:style-name="Text_20_body">A reader of this text could ask what is the point behind this pointer-to-member exercise. When I run the application under a debugger sometimes I want to set a break point using an absolute address. I can print an absolute address of a member and see in run-time how many instances of the same method my generic class creates. Taking a pointer of a function insures that the function is not an “inline” function.</text:p>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__14433_1195782936"/>Log.<text:bookmark-end text:name="__RefHeading__14433_1195782936"/></text:h>
   <text:p text:style-name="Quotations">Perfection is achieved, not when there is nothing left to add, but when there is nothing left to take away - Antoine de St. Exupery</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">In one C project I have seen following code for generating log entries:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">enum</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T51">LOG_LEVEL_INFO</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T51">LOG_LEVEL_ERROR</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T51">LOG_LEVEL_LAST</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *LOG_LEVEL_NAME[] = {</text:span><text:span text:style-name="T37">&quot;INFO&quot;</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T37">&quot;ERROR&quot;, “UKNOWN”</text:span><text:span text:style-name="T14">};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> LOG_INFO(fmt, ...) log_print(__LINE__, LOG_LEVEL_INFO, fmt, </text:span><text:span text:style-name="T5">##</text:span><text:span text:style-name="T14">__VA_ARGS__ )</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> LOG_ERROR(fmt, ...) log_print(__LINE__, LOG_LEVEL_ERROR, fmt, </text:span><text:span text:style-name="T5">##</text:span><text:span text:style-name="T14">__VA_ARGS__ )</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">log_print</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> line, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> level, </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *fmt, ...)</text:span></text:p>
   <text:p text:style-name="P18">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">va_list</text:span><text:span text:style-name="T14"> ap;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T41">printf</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T37">&quot;%s: line=%d, </text:span><text:span text:style-name="T39">msg</text:span><text:span text:style-name="T37">=&quot;</text:span><text:span text:style-name="T14">, LOG_LEVEL_NAME[level], line);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>va_start(ap, fmt);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T41">vprintf</text:span><text:span text:style-name="T14">(fmt, ap);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>va_end(ap);</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">testLog</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>LOG_INFO(</text:span><text:span text:style-name="T37">&quot;This is info %d&quot;</text:span><text:span text:style-name="T14">, 1);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>LOG_ERROR(</text:span><text:span text:style-name="T37">&quot;This is error %d&quot;</text:span><text:span text:style-name="T14">, 2);</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">On my machine the code above generates output:</text:p>
   <text:p text:style-name="Preformatted_20_Text">INFO: line=402, msg=This is info 1</text:p>
   <text:p text:style-name="Preformatted_20_Text">ERROR: line=403, msg=This is error 2</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">There are many calls to the log API and size of the image is important. Calls to log_print() push at least three arguments to the stack and I think that I can save one push – log level. In C I would add functions log_print_info(...) and log_print_error(...) which in turn call log_print() and fix the macros accordingly. In C++ I have a template. Constructor is an exact copy of the original log_print function minus log level:</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14"> &lt;</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Level</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Log</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">Log</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> line, </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *fmt, ...) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">va_list</text:span><text:span text:style-name="T14"> ap;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T41">printf</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T37">&quot;%s: line=%d, </text:span><text:span text:style-name="T39">msg</text:span><text:span text:style-name="T37">=&quot;</text:span><text:span text:style-name="T14">, LOG_LEVEL_NAME[</text:span><text:span text:style-name="T42">Level</text:span><text:span text:style-name="T14">], line);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>va_start(ap, fmt);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T41">vprintf</text:span><text:span text:style-name="T14">(fmt, ap);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>va_end(ap);</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Log macros call the constructor:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> LOG_INFO(fmt, ...) Log&lt;LOG_LEVEL_INFO&gt;(__LINE__, fmt, </text:span><text:span text:style-name="T5">##</text:span><text:span text:style-name="T14">__VA_ARGS__ )</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> LOG_ERROR(fmt, ...) Log&lt;LOG_LEVEL_ERROR&gt;(__LINE__, fmt, </text:span><text:span text:style-name="T5">##</text:span><text:span text:style-name="T14">__VA_ARGS__ )</text:span></text:p>
   <text:p text:style-name="P61">C++ compiler has duplicated two print log functions for me and saved a push to the stack for every call to the log API. I could save 512 bytes of the stack by using a static buffer (and Lock I have demonstrated earlier). Class log is a “functoid” – a function on steroids. I can use a functoid based on a regular class instead of a template like this:</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Log</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">Log</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *level) : </text:span><text:span text:style-name="T50">level</text:span><text:span text:style-name="T14">(level) {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">print</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> line, </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *fmt, ...) </text:span><text:span text:style-name="T5">const </text:span><text:span text:style-name="T14">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">va_list</text:span><text:span text:style-name="T14"> ap;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T41">printf</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T37">&quot;%s: line=%d, </text:span><text:span text:style-name="T39">msg</text:span><text:span text:style-name="T37">=&quot;</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T50">level</text:span><text:span text:style-name="T14">, line);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>va_start(ap, fmt);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T41">vprintf</text:span><text:span text:style-name="T14">(fmt, ap);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>va_end(ap);</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *</text:span><text:span text:style-name="T50">level</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Log</text:span><text:span text:style-name="T14"> LogInfo(</text:span><text:span text:style-name="T37">&quot;INFO&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Log</text:span><text:span text:style-name="T14"> LogError(</text:span><text:span text:style-name="T37">&quot;ERROR&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> LOG_INFO(fmt, ...) LogInfo.print(__LINE__, fmt, </text:span><text:span text:style-name="T5">##</text:span><text:span text:style-name="T14">__VA_ARGS__ )</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> LOG_ERROR(fmt, ...) LogError.print(__LINE__, fmt, </text:span><text:span text:style-name="T5">##</text:span><text:span text:style-name="T14">__VA_ARGS__ )</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P41">I dropped array LOG_LEVEL_NAME – now it is easier to expand an enumeration of log levels. There is only one instance of the print function in the object code. The cost is a couple of words in the data RAM – two objects of type Log. The code and the data can be placed in ROM.</text:p>
   <text:p text:style-name="Text_20_body">Call to vprintf() is not something firmware developers do often. Indeed the code calls vprintf() again and again for the same set of format strings. I can send to the console only the arguments to the vprintf() and the exact location in the source code or offset in the object file. </text:p>
   <text:p text:style-name="Text_20_body">Class BinaryLog below handles only arguments of type “int”. A location in the source code is defined by “unique” file identifier and source line number. </text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">BinaryLog</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">BinaryLog</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> fileId, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> line, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> count, ...);</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body">I assume that there is “sendData” API which can send arbitrary number of integers to the console. </text:p>
   <text:p text:style-name="P49"><text:span text:style-name="T16">BinaryLog::BinaryLog</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> fileId, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> line, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> count, ...) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> HEADER_SIZE = 3;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> header[HEADER_SIZE];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P18"><text:s text:c="4"/>header[0] = fileId;</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>header[1] = line;</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>header[2] = count;</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>sendDataStart();</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>sendData(header, HEADER_SIZE);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">va_list</text:span><text:span text:style-name="T14"> ap;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>va_start(ap, count);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> j=0; j &lt; count; j++) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> arg = va_arg(ap, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>sendData(arg);</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>va_end(ap);</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>sendDataEnd();</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Text_20_body">API send data in my simulation environment looks like this:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">inline void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">sendData</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> data) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>cout &lt;&lt; dec &lt;&lt; data &lt;&lt; </text:span><text:span text:style-name="T37">&quot; &quot;</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">inline void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">sendDataStart</text:span><text:span text:style-name="T14">() {cout &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">inline void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">sendDataEnd</text:span><text:span text:style-name="T14">() {cout &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">sendData</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> *data, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> count) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> i = 0;i &lt; count;i++) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>cout &lt;&lt; hex &lt;&lt; data[i] &lt;&lt; </text:span><text:span text:style-name="T37">&quot; &quot;</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P41">Two macro definitions call constructor BinaryLog. Macro ARGUMENTS_COUNT is fairly portable – it shall return number of arguments in a variadic macro.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> ARGUMENTS_COUNT(...) (</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">((</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14">[]){__VA_ARGS__})/</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14">))</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> LOG_INFO(fmt, ...) BinaryLog(FILE_ID, __LINE__, ARGUMENTS_COUNT(__VA_ARGS__), __VA_ARGS__ )</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> LOG_ERROR(fmt, ...) BinaryLog(FILE_ID, __LINE__, ARGUMENTS_COUNT(__VA_ARGS__), __VA_ARGS__ )</text:span></text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P41">File identifier is generated from the file name during compilation. I use a simple hash function. A real thing - MD5 hash - can be found in <text:a xlink:type="simple" xlink:href="https://github.com/mfontanini/Programs-Scripts/tree/master/constexpr_hashes">https://github.com/mfontanini/Programs-Scripts/tree/master/constexpr_hashes</text:a></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T9">constexpr</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T9">int</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T22">hashData</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T9">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T9">char</text:span><text:span text:style-name="T12">* s, </text:span><text:span text:style-name="T9">int</text:span><text:span text:style-name="T12"> accumulator) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T9">return</text:span><text:span text:style-name="T12"> *s ? hashData(s + 1, (accumulator &lt;&lt; 1) | *s) : accumulator;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T9">constexpr</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T9">int</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T22">hashMetafunction</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T9">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T9">char</text:span><text:span text:style-name="T12">* s) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T9">return</text:span><text:span text:style-name="T12"> hashData(s, 0);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T9">constexpr</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T9">int</text:span><text:span text:style-name="T12"> FILE_ID = hashMetafunction(__FILE__);</text:span></text:p>
   <text:p text:style-name="P58"/>
   <text:p text:style-name="P42">Usage example:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T9">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T22">testBinaryLog</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T9">void</text:span><text:span text:style-name="T12">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>LOG_INFO(</text:span><text:span text:style-name="T36">&quot;This is info %d %d&quot;</text:span><text:span text:style-name="T12">, 1, 2);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>LOG_ERROR(</text:span><text:span text:style-name="T36">&quot;This is error %d %d %d&quot;</text:span><text:span text:style-name="T12">, 0, 1, 2);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="P58"/>
   <text:p text:style-name="P42">In my system the test function produces output “262140 511 2 1 2 262140 512 3 0 1 2”. All I need now is a short (Python?) script which calculates file identifiers for all my source files, find the right file according to the file identifier 262140, parses lines 511 and 512 in the C++ file and produces two readable output lines:</text:p>
   <text:p text:style-name="P17">This is info 1 2 </text:p>
   <text:p text:style-name="P17">This is error 0 1 2 </text:p>
   <text:p text:style-name="Text_20_body">Yet another post build script can ensure that format strings correctly represent arguments in calls to the macros. </text:p>
   <text:p text:style-name="Text_20_body">By removing an expensive call to vprintf() I saved lot of CPU cycles, lot of ROM and some bandwidth. The binary log API does not use any static data and the API is thread safe. My system generates logs which require additional processing before they can be read by a human, but there are situations when this is small price to pay. </text:p>
   <text:p text:style-name="Text_20_body">I assume that the application is statically linked and all addresses resolved at build time. I can get rid of the line number and file identifier and use value of the program counter instead. Code below will work only for GCC – GCC compiler allows to get address of a label. </text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Constructor accepts address of the log entries:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T56">BinaryLog::BinaryLog</text:span><text:span text:style-name="T55">(</text:span><text:span text:style-name="T7">void</text:span><text:span text:style-name="T55"> *address, </text:span><text:span text:style-name="T7">int</text:span><text:span text:style-name="T55"> line, </text:span><text:span text:style-name="T7">int</text:span><text:span text:style-name="T55"> count, ...) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> HEADER_SIZE = 2;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> header[HEADER_SIZE];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>header[0] = ((</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14">)address) &amp; INTMAX_MAX;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>header[1] = count;</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>sendDataStart();</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>sendData(header, HEADER_SIZE);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">va_list</text:span><text:span text:style-name="T14"> ap;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>va_start(ap, count);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> j=0; j &lt; count; j++) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> arg = va_arg(ap, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>sendData(arg);</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>va_end(ap);</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>sendDataEnd();</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="P30"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P41">Magic macros generate unique labels and forward the labels address to the BinaryLog constructor:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> TOKEN_CAT(x, y) x </text:span><text:span text:style-name="T5">##</text:span><text:span text:style-name="T14"> y</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> TOKEN_CAT2(x, y) TOKEN_CAT(x, y)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> LABEL TOKEN_CAT2 (logLabel_, __LINE__)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7">#define</text:span><text:span text:style-name="T55"> LOG_INFO(fmt, ...) { <text:s/>\</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>LABEL:\</text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>BinaryLog(&amp;&amp;LABEL, __LINE__, ARGUMENTS_COUNT(__VA_ARGS__), __VA_ARGS__ ); \</text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body">A post build script shall read a map file generated by the linker, collect list of labels according to the pattern logLabel_XX and process format strings in the source code.</text:p>
   <text:p text:style-name="Text_20_body">I can save one argument – address of the label. GCC allows to find out return address of the function. Code looks likes this:</text:p>
   <text:p text:style-name="P49"><text:span text:style-name="T7">class</text:span><text:span text:style-name="T55"> </text:span><text:span text:style-name="T30">FastLog</text:span><text:span text:style-name="T55"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">FastLog</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> count, ...) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> HEADER_SIZE = 2;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> header[HEADER_SIZE];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> *retAddress = </text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="9"/>__builtin_extract_return_addr(</text:p>
   <text:p text:style-name="P18"><text:s text:c="9"/>__builtin_return_address(0));</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>header[0] = ((</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14">)retAddress) &amp; INTMAX_MAX;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>header[1] = count;</text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>sendDataStart();</text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>sendData(header, 2);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">va_list</text:span><text:span text:style-name="T14"> ap;</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>va_start(ap, count);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> j=0; j &lt; count; j++) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> arg = va_arg(ap, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="12"/>sendData(arg);</text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>va_end(ap);</text:p>
   <text:p text:style-name="P18"><text:s text:c="8"/>sendDataEnd();</text:p>
   <text:p text:style-name="P18"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P41">And the macros do not forward address anymore:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">#define</text:span><text:span text:style-name="T14"> LOG_INFO(fmt, ...)\</text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="2"/>FastLog(ARGUMENTS_COUNT(__VA_ARGS__), __VA_ARGS__ );</text:p>
   <text:p text:style-name="P18"/>
   <text:h text:style-name="P68" text:outline-level="2"/>
   <text:h text:style-name="P46" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__14278_363426044"/>Software Timers.<text:bookmark-end text:name="__RefHeading__14278_363426044"/></text:h>
   <text:p text:style-name="Quotations">C++: Hard to learn and built to stay that way.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">So far I have demonstrated fairly simple software components, like a mutex or a cyclic buffer. In this chapter I am going to implement a software timer.</text:p>
   <text:p text:style-name="Text_20_body">Modern operating systems provide timers API. Typically an application can start a timer with arbitrary expiration time. When the timer expires the operating system calls the application hook from a dedicated timer thread or a system interrupt. Performance of such API can degrade quickly if an application starts a lot of different timers. There is usually no control over the priority of the process which handles the timers. The API presented here allows an application to handle all timer related code in a single context or in multiple contexts running with different priorities.</text:p>
   <text:p text:style-name="Text_20_body">The software timers API will have O(1) complexity. The API is going to be thread safe. The source code for the software timer can be found in <text:a xlink:type="simple" xlink:href="https://github.com/larytet/emcpp/blob/master/src/timers.cpp">https://github.com/larytet/emcpp/blob/master/src/Timers.h</text:a></text:p>
   <text:p text:style-name="Text_20_body">At this point you know the object-oriented design routine. Let&apos;s declare a timer object first. A timer object keeps a unique timer identifier. </text:p>
   <text:p text:style-name="Text_20_body">A unique timer identifier can be used to solve possible race conditions between stopTimer and timerExpired. Consider following scenario: timer “a” is started by context A. Timer “a” is stopped by context A, but too late - timer “a” has just expired and the application code which handles the expiration is running. Depending on the implementation of the application callback the processing of the event can be done asynchronously. Meanwhile the same timer object can be allocated and modified by context B – a different thread. If context A keeps identities of all started timers the application callback can check if the timer identifier is on the list of running timers. If the timer was stopped the callback can ignore the timer expiration. Using of the timer object itself for such bookkeeping is not good because a pool of timer objects is probably a shared resource.</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">When starting a timer the user can supply optional pointer to the application data – a cookie. Timer class could be a template like this</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">CookieType</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">CookieType</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">cookie</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="Text_20_body">I want to simplify the interface and avoid using of virtual methods – more on virtual methods in a moment - in the timer objects. Instead of objects of an arbitrary type a timer object will keep a pointer to the application data. </text:p>
   <text:p text:style-name="Text_20_body">A user can access the timer&apos;s data only via the public methods – getters and setters. This approach helps to maintain the code in the future. </text:p>
   <text:p text:style-name="Text_20_body">Class Timer implements a constructor without arguments - I want to be able to create a static array of timers with not too much of trouble. <text:span text:style-name="T65">Class TimerList which is not declared yet is a friend class and can call protected methods of the Timer. Method start() is protected because application shall start timers using TimerList.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">Timer</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="P26"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">stop</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">isRunning</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P26"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">TimerID</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">getId</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P26"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">getApplicationData</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P26"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">getStartTime</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P20"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">friend</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">TimerList</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">TimerID</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">id</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">applicationData</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">running</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">startTime</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="P26"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">start</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="P26"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">setApplicationData</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> applicationData);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">setId</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">TimerID</text:span><text:span text:style-name="T14"> id);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">setStartTime</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> systemTime);</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P41">Implementation of the methods is straightforward:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16">Timer::Timer</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>stop();</text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">TimerID</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">Timer::getId</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">id</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">Timer::getStartTime</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">startTime</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">Timer::isRunning</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">running</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">Timer::stop</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">running</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> <text:s/></text:span><text:span text:style-name="T16">Timer::start</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">running</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">Timer::setApplicationData</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> applicationData) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">applicationData</text:span><text:span text:style-name="T14"> = applicationData;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">Timer::getApplicationData</text:span><text:span text:style-name="T14">() </text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">applicationData</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">Timer::setId</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">TimerID</text:span><text:span text:style-name="T14"> id) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">id</text:span><text:span text:style-name="T14"> = id;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">Timer::setStartTime</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> systemTime) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">startTime</text:span><text:span text:style-name="T14"> = systemTime;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">System time is often a tick incremented by an interrupt or read from the hardware. In this example I use size_t type. In a more advanced design System Time and Timeout could be two classes. The timer API only needs a function with signature bool isTimerExpired(SystemTime, Timeout, SystemTime). In the following implementation I handle SystemTime wrap around assuming that timers timeouts are small relatively to the SystemTime maximum value. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">typedef</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">typedef</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Timeout</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">isTimerExpired</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> startTime, </text:span><text:span text:style-name="T31">Timeout</text:span><text:span text:style-name="T14"> timeout,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> timerExpired = </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> timerExpiartionTime = startTime + timeout;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>timerExpired = timerExpired</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="12"/>|| ((timerExpiartionTime &gt;= currentTime)</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="20"/>&amp;&amp; (startTime &lt; currentTime));</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>timerExpired = timerExpired</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="12"/>|| ((timerExpiartionTime &gt;= currentTime)</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="20"/>&amp;&amp; (startTime &gt; currentTime));</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>timerExpired = timerExpired</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="12"/>|| ((timerExpiartionTime &lt;= currentTime)</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="20"/>&amp;&amp; (startTime &gt; currentTime)</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="20"/>&amp;&amp; (timerExpiartionTime &lt; startTime));</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> timerExpired;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">My API has an enumeration of possible return codes of C+11 kind. C++11 “enum class” is not an integer and can not be converted to integer. A member of one enumeration can not be assigned to a member of another enumeration.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">enum</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> TimerError {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T51">Ok</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">Expired</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">Stopped</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">Illegal</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">NoFreeTimer</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T51">NoRunningTimers</text:span></text:p>
   <text:p text:style-name="P18">};</text:p>
   <text:p text:style-name="Text_20_body">I need an application callback which handles timer expiration. The callback could be a template function in a more advanced design.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">typedef</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> (*</text:span><text:span text:style-name="T31">TimerExpirationHandler</text:span><text:span text:style-name="T14">)(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">&amp; timer);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body">I am going to provide synchronization API via an argument to the constructor. In the base class TimerLock I set the get/release interface to zero – the functions are going to be implemented only by the derivative. Typical performance overhead of a virtual function is 1 or 2 opcodes.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">TimerLock</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">virtual</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">get</text:span><text:span text:style-name="T14">() = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">virtual</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">release</text:span><text:span text:style-name="T14">() = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">virtual</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">~TimerLock</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">TimerLockDummy</text:span><text:span text:style-name="T14"> : </text:span><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">TimerLock</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">virtual</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">get</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">virtual</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">release</text:span><text:span text:style-name="T14">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">I need a cyclic buffer which uses dynamic allocation from the heap via operator new[] - I have discussed the operator new[] and situations when allocation from the memory heap is not possible in the previous chapters. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">class</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">CyclicBufferDynamic</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferDynamic</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> size);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">~CyclicBufferDynamic</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">isEmpty</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">isFull</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">add</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> object);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">remove</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> *object);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">getHead</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> *object);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">private</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">errorOverflow</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">errorUnderflow</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">increment</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> index);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> *</text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Constructor calls new[] to allocate array of pointers. There is a static assert which insures that the template class is used only for pointers. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferDynamic&lt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16"><text:s text:c="8"/>ObjectType, Lock&gt;::CyclicBufferDynamic</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14"> = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14"> = size;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">new</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">[size];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">) &lt;= </text:span><text:span text:style-name="T5">sizeof</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14">), </text:span><text:span text:style-name="T37">&quot;CyclicBuffer is intended to work only with integer types or pointers&quot;</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Rest of the code is similar to the previous implementation</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferDynamic&lt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16"><text:s text:c="8"/>ObjectType, Lock&gt;::isEmpty</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res = (</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> == </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferDynamic&lt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16"><text:s text:c="8"/>ObjectType, Lock&gt;::isFull</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> tail = increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res = (</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> == tail);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferDynamic&lt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16"><text:s text:c="8"/>ObjectType, Lock&gt;::add</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14"> = increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">tail</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>errorOverflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferDynamic&lt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16"><text:s text:c="8"/>ObjectType, Lock&gt;::remove</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> *object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>*object = </text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>errorUnderflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferDynamic&lt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16"><text:s text:c="8"/>ObjectType, Lock&gt;::getHead</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14"> *object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>*object = </text:span><text:span text:style-name="T50">data</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">head</text:span><text:span text:style-name="T14">];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>errorUnderflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">ObjectType</text:span><text:span text:style-name="T14">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T42">Lock</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">CyclicBufferDynamic&lt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T16">ObjectType, Lock&gt;::increment</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> index) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (index &lt; </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> (index + 1);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Use of LockDummy is deliberate here - I do not need reentrant cyclic buffers to store pointer to objects of class Timer:</text:p>
   <text:p text:style-name="Standard"><text:span text:style-name="T5">typedef</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">CyclicBufferDynamic</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">*, </text:span><text:span text:style-name="T31">LockDummy</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T31">TimerCyclicBuffer</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Text_20_body">A list of timers keeps timers with the same timeout. Timers expiration time depends on the start time. The timer API assumes that there are finite and relatively small number of different timers – timers with different timeout – in the system. I probably even know what timers I need in the system before I start to write the code. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T6">class</text:span><text:span text:style-name="T15"> </text:span><text:span text:style-name="T32">TimerList</text:span><text:span text:style-name="T15"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">TimerList</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> size, </text:span><text:span text:style-name="T31">Timeout</text:span><text:span text:style-name="T14"> timeout, </text:span><text:span text:style-name="T31">TimerExpirationHandler</text:span><text:span text:style-name="T14"> </text:span></text:p>
   <text:p text:style-name="P18"><text:s text:c="12"/>expirationHandler,</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T31">TimerLock </text:span><text:span text:style-name="T14">&amp;timerLock,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> callExpiredForStoppedTimers=</text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">) :</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">timeout</text:span><text:span text:style-name="T14">(timeout), </text:span><text:span text:style-name="T50">expirationHandler</text:span><text:span text:style-name="T14">(expirationHandler), </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">callExpiredForStoppedTimers</text:span><text:span text:style-name="T14">(</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="20"/>callExpiredForStoppedTimers), </text:span><text:span text:style-name="T50">freeTimers</text:span><text:span text:style-name="T14">(size), </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">runningTimers</text:span><text:span text:style-name="T14">(size),</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">timerLock</text:span><text:span text:style-name="T14">(timerLock) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14"> *timers = </text:span><text:span text:style-name="T5">new</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">[size];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> i = 0;i &lt; size;i++) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">freeTimers</text:span><text:span text:style-name="T14">.add(&amp;timers[i]);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>TimerError </text:span><text:span text:style-name="T16">processExpiredTimers</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">enum</text:span><text:span text:style-name="T14"> TimerError </text:span><text:span text:style-name="T16">startTimer</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T31">SystemTime </text:span><text:span text:style-name="T14">&amp;nearestExpirationTime, </text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> applicationData = 0,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">** timer = </text:span><text:span text:style-name="T5">nullptr</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">enum</text:span><text:span text:style-name="T14"> TimerError </text:span><text:span text:style-name="T16">stopTimer</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">Timer </text:span><text:span text:style-name="T14">&amp;timer) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>timer.stop();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> TimerError::</text:span><text:span text:style-name="T51">Ok</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">getNearestExpirationTime</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">nearestExpirationTime</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">inline</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">TimerID</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">getNextId</text:span><text:span text:style-name="T14">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">enum</text:span><text:span text:style-name="T14"> TimerError </text:span><text:span text:style-name="T16">_startTimer</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14">&amp; nearestExpirationTime, </text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> applicationData = 0,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">** timer = </text:span><text:span text:style-name="T5">nullptr</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>TimerError </text:span><text:span text:style-name="T16">_processExpiredTimers</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">Timeout</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">timeout</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">TimerExpirationHandler</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">expirationHandler</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">callExpiredForStoppedTimers</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">nearestExpirationTime</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">CyclicBufferDynamic</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">*, </text:span><text:span text:style-name="T31">LockDummy</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T50">freeTimers</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">CyclicBufferDynamic</text:span><text:span text:style-name="T14">&lt;</text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">*, </text:span><text:span text:style-name="T31">LockDummy</text:span><text:span text:style-name="T14">&gt; </text:span><text:span text:style-name="T50">runningTimers</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">TimerLock </text:span><text:span text:style-name="T14">&amp;</text:span><text:span text:style-name="T50">timerLock</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Protected methods of the TimerList class are not necessary thread safe. For example getNextId() implementation is not thread safe. Only a child class or another method can access protected class members and shall take care of synchronization of the access.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T29">TimerID</text:span> <text:span text:style-name="T53">TimerList::getNextId</text:span>() {</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">TimerID</text:span><text:span text:style-name="T14"> id = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>id++;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> id;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">enum</text:span><text:span text:style-name="T14"> TimerError </text:span><text:span text:style-name="T16">TimerList::startTimer</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14">&amp; nearestExpirationTime, </text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> applicationData,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">** timer) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">timerLock</text:span><text:span text:style-name="T14">.get();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>TimerError res = </text:span><text:span text:style-name="T31">TimerList</text:span><text:span text:style-name="T14">::_startTimer(currentTime,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="12"/>nearestExpirationTime, applicationData,</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="12"/>timer);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">timerLock</text:span><text:span text:style-name="T14">.release();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Method startTimer() moves a timer from the list of free timers to the list of running timers</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">enum</text:span><text:span text:style-name="T14"> TimerError </text:span><text:span text:style-name="T16">TimerList::_startTimer</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14">&amp; nearestExpirationTime, </text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> applicationData,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">** timer) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">* newTimer;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T50">freeTimers</text:span><text:span text:style-name="T14">.isEmpty())</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> TimerError::</text:span><text:span text:style-name="T51">NoFreeTimer</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">freeTimers</text:span><text:span text:style-name="T14">.remove(&amp;newTimer);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>newTimer-&gt;setStartTime(currentTime);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>newTimer-&gt;setApplicationData(applicationData);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>newTimer-&gt;setId(</text:span><text:span text:style-name="T19">getNextId</text:span><text:span text:style-name="T14">());</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>newTimer-&gt;start();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">runningTimers</text:span><text:span text:style-name="T14">.add(newTimer);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">* headTimer;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">runningTimers</text:span><text:span text:style-name="T14">.getHead(&amp;headTimer);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>nearestExpirationTime = headTimer-&gt;getStartTime() + </text:span><text:span text:style-name="T50">timeout</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">nearestExpirationTime</text:span><text:span text:style-name="T14"> = nearestExpirationTime;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (timer != </text:span><text:span text:style-name="T5">nullptr</text:span><text:span text:style-name="T14">)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>*timer = newTimer;</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> TimerError::</text:span><text:span text:style-name="T51">Ok</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14">TimerError </text:span><text:span text:style-name="T16">TimerList::processExpiredTimers</text:span><text:span text:style-name="T14">(</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">timerLock</text:span><text:span text:style-name="T14">.get();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>TimerError res = </text:span><text:span text:style-name="T31">TimerList</text:span><text:span text:style-name="T14">::_processExpiredTimers(currentTime);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">timerLock</text:span><text:span text:style-name="T14">.release();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body">Method processExpiredTimers() moves stopped and expired timers from the head of the list of running timers to the list of free timers. A user of the timer list shall call processExpiredTimers() which will remove stopped timers from the list of the running timers and call the application callback for expired timers. The user shall call getNearestExpirationTime() to get expiration time for the next timer – time when processExpiredTimers() shall be called again. Difference between nearestExpirationTime and currentTime can be used, for example, in the system call to sleep(). The timers on the runningTimers list is ordered by expiration time – I always add a timer to the tail and timeout is the same for all timers on the list. Protected method is not reentrant.</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P49"><text:span text:style-name="T14">TimerError </text:span><text:span text:style-name="T16">TimerList::_processExpiredTimers</text:span><text:span text:style-name="T14">(</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">Timer</text:span><text:span text:style-name="T14">* timer;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">while</text:span><text:span text:style-name="T14"> (!</text:span><text:span text:style-name="T50">runningTimers</text:span><text:span text:style-name="T14">.isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!</text:span><text:span text:style-name="T50">runningTimers</text:span><text:span text:style-name="T14">.getHead(&amp;timer))</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">break</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> timerExpired = isTimerExpired(timer-&gt;getStartTime(), </text:span><text:span text:style-name="T50">timeout</text:span><text:span text:style-name="T14">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="16"/>currentTime);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> timerIsRunning = timer-&gt;isRunning();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> callExpirationHandler = timerExpired;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>callExpirationHandler = callExpirationHandler</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="16"/>|| (!timerIsRunning &amp;&amp; </text:span><text:span text:style-name="T50">callExpiredForStoppedTimers</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (callExpirationHandler) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/>(</text:span><text:span text:style-name="T50">expirationHandler</text:span><text:span text:style-name="T14">)(*timer);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (timerExpired || !timerIsRunning) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">runningTimers</text:span><text:span text:style-name="T14">.remove(&amp;timer);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">freeTimers</text:span><text:span text:style-name="T14">.add(timer);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!timerExpired &amp;&amp; timerIsRunning) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">nearestExpirationTime</text:span><text:span text:style-name="T14"> = timer-&gt;getStartTime() + </text:span><text:span text:style-name="T50">timeout</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!</text:span><text:span text:style-name="T50">runningTimers</text:span><text:span text:style-name="T14">.isEmpty())</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> TimerError::</text:span><text:span text:style-name="T51">Ok</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">else</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> TimerError::</text:span><text:span text:style-name="T51">NoRunningTimers</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Public method is reentrant.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14">TimerError </text:span><text:span text:style-name="T16">TimerList::processExpiredTimers</text:span><text:span text:style-name="T14">(</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">timerLock</text:span><text:span text:style-name="T14">.get();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>TimerError res = </text:span><text:span text:style-name="T31">TimerList</text:span><text:span text:style-name="T14">::_processExpiredTimers(currentTime);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T50">timerLock</text:span><text:span text:style-name="T14">.release();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> res;</text:span></text:p>
   <text:p text:style-name="P18">}</text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">I group timer lists in “sets”. For example, a set of relatively long, low priority timers with timeouts 5s, 20s, 60s and a set of high priority timers. Different sets can be served by threads running in different priorities. I know what timers types belong to a set at compilation time. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T8">class</text:span> <text:span text:style-name="T29">TimerSet</text:span> {</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T16">TimerSet</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14">* name, </text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> size) :</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T50">name</text:span><text:span text:style-name="T14">(name), </text:span><text:span text:style-name="T50">listCount</text:span><text:span text:style-name="T14">(size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T14">-&gt;</text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14"> = size;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">timerLists</text:span><text:span text:style-name="T14"> = </text:span><text:span text:style-name="T5">new</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">TimerList</text:span><text:span text:style-name="T14">*[size];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *</text:span><text:span text:style-name="T16">getName</text:span><text:span text:style-name="T14">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">name</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>TimerError </text:span><text:span text:style-name="T16">processExpiredTimers</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14">&amp; expirationTime);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">addList</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">TimerList</text:span><text:span text:style-name="T14">* list);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T14">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">char</text:span><text:span text:style-name="T14"> *</text:span><text:span text:style-name="T50">name</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">TimerList</text:span><text:span text:style-name="T14"> **</text:span><text:span text:style-name="T50">timerLists</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">listCount</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="P30"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Add list API fills the array timerLists:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">TimerSet::addList</text:span><text:span text:style-name="T14">(</text:span><text:span text:style-name="T31">TimerList</text:span><text:span text:style-name="T14">* list) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T50">listCount</text:span><text:span text:style-name="T14"> &lt; </text:span><text:span text:style-name="T50">size</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">timerLists</text:span><text:span text:style-name="T14">[</text:span><text:span text:style-name="T50">listCount</text:span><text:span text:style-name="T14">] = list;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T50">listCount</text:span><text:span text:style-name="T14">++;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">true</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Method processExpiredTimers() calls corresponding API in all timer lists and conveniently returns next time the method should be called. Complexity of the method is O(number of timer lists).</text:p>
   <text:p text:style-name="Preformatted_20_Text">TimerError <text:span text:style-name="T53">TimerSet::processExpiredTimers</text:span>(</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime, </text:span><text:span text:style-name="T31">SystemTime </text:span><text:span text:style-name="T14">&amp;expirationTime) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">TimerList</text:span><text:span text:style-name="T14">* timerList;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">size_t</text:span><text:span text:style-name="T14"> i;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> nearestExpirationTime;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T14"> res = </text:span><text:span text:style-name="T5">false</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (i = 0; i &lt; </text:span><text:span text:style-name="T50">listCount</text:span><text:span text:style-name="T14">; i++) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>timerList = </text:span><text:span text:style-name="T50">timerLists</text:span><text:span text:style-name="T14">[i];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>TimerError timerRes = timerList-&gt;processExpiredTimers(currentTime);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/>res = res || (timerRes == TimerError::</text:span><text:span text:style-name="T51">Ok</text:span><text:span text:style-name="T14">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (timerRes == TimerError::</text:span><text:span text:style-name="T51">Ok</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> listExpirationTime =</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="20"/>timerList-&gt;getNearestExpirationTime();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (!res) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="16"/>nearestExpirationTime = listExpirationTime;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="16"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (nearestExpirationTime &gt; listExpirationTime) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="20"/>nearestExpirationTime = listExpirationTime;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="16"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="12"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (res)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> TimerError::</text:span><text:span text:style-name="T51">Ok</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">else</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> TimerError::</text:span><text:span text:style-name="T51">NoRunningTimers</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P41">Finally a usage example:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T8">static</text:span> <text:span text:style-name="T8">void</text:span> <text:span text:style-name="T53">mainExpirationHandler</text:span>(<text:span text:style-name="T8">const</text:span> <text:span text:style-name="T29">Timer</text:span>&amp; timer) {</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">TimerID</text:span><text:span text:style-name="T14"> timerId = timer.getId();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">uintptr_t</text:span><text:span text:style-name="T14"> data = timer.getApplicationData();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;Expired id=&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; timerId &lt;&lt; </text:span><text:span text:style-name="T37">&quot;,</text:span><text:span text:style-name="T39">appdata</text:span><text:span text:style-name="T37">=&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; data &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T31">TimerLockDummy</text:span><text:span text:style-name="T14"> timerLock;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">static</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T31">TimerList</text:span><text:span text:style-name="T14"> timerList(3, 3, mainExpirationHandler, timerLock);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T16">main</text:span><text:span text:style-name="T14">()</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> currentTime = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">for</text:span><text:span text:style-name="T14"> (</text:span><text:span text:style-name="T5">int</text:span><text:span text:style-name="T14"> i = 0;i &lt; 3;i++) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T31">SystemTime</text:span><text:span text:style-name="T14"> nearestExpirationTime;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>TimerError err = timerList.startTimer(currentTime, nearestExpirationTime, i);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T14"> (err == TimerError::</text:span><text:span text:style-name="T51">Ok</text:span><text:span text:style-name="T14">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;nearestExpirationTime=&quot;</text:span><text:span text:style-name="T14"> &lt;&lt; nearestExpirationTime &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="8"/></text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T14"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="12"/>cout &lt;&lt; </text:span><text:span text:style-name="T37">&quot;timer start failed for timer &quot;</text:span><text:span text:style-name="T14"> &lt;&lt; i &lt;&lt; </text:span><text:span text:style-name="T41">endl</text:span><text:span text:style-name="T14">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>timerList.processExpiredTimers(3);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14"><text:s text:c="4"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T14"> 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:h text:style-name="P66" text:outline-level="1"/>
   <text:h text:style-name="P45" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__12016_732733800"/>Conclusion.<text:bookmark-end text:name="__RefHeading__12016_732733800"/></text:h>
   <text:p text:style-name="Quotations">You have delighted us long enough. Let the other young ladies have time to exhibit - Jane Austen, Pride and Prejudice</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">I hope you have found the book interesting and worth the time and money spent. This book gets updates often. You can always get the updated version by turning “Automatic Update” on in the “Manage Your Content and Devices”. </text:p>
   <text:p text:style-name="Text_20_body">Please let me know what do you think or ask questions – my e-mail <text:a xlink:type="simple" xlink:href="mailto:larytet@yahoo.com?subject=C++%20for%20embedded%20systems:%20...">mailto:arkady.miasnikov@gmail.com?subject=C++ for embedded systems: …</text:a></text:p>
   <text:p text:style-name="Text_20_body">Thank you, Arkady.</text:p>
  </office:text>
 </office:body>
</office:document>