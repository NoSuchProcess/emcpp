<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><meta:initial-creator>arkady </meta:initial-creator><meta:creation-date>2015-04-24T15:47:16.425999108</meta:creation-date><dc:date>2015-04-26T19:30:15</dc:date><dc:creator>arkady </dc:creator><meta:editing-duration>P1DT10H26M6S</meta:editing-duration><meta:editing-cycles>457</meta:editing-cycles><meta:generator>LibreOffice/3.5$Linux_X86_64 LibreOffice_project/350m1$Build-2</meta:generator><meta:document-statistic meta:table-count="0" meta:image-count="0" meta:object-count="0" meta:page-count="1" meta:paragraph-count="429" meta:word-count="2920" meta:character-count="19927" meta:non-whitespace-character-count="15825"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">229426</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">1002</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">32461</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">14217</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">true</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">19366</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">237488</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">1002</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">229426</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">33461</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">243641</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">153</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="OpenSymbol" svg:font-family="OpenSymbol" style:font-charset="x-symbol"/>
  <style:font-face style:name="Monospace1" svg:font-family="Monospace" style:font-family-generic="roman"/>
  <style:font-face style:name="FreeSans1" svg:font-family="FreeSans" style:font-family-generic="swiss"/>
  <style:font-face style:name="Monospace" svg:font-family="Monospace" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Droid Sans Fallback" svg:font-family="&apos;Droid Sans Fallback&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="FreeSans" svg:font-family="FreeSans" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:writing-mode="lr-tb" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.5in" style:writing-mode="lr-tb"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Droid Sans Fallback" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-size="14pt" style:font-name-asian="Droid Sans Fallback" style:font-size-asian="14pt" style:font-name-complex="FreeSans" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0972in" fo:line-height="120%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.0835in" fo:margin-bottom="0.0835in" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="FreeSans1" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1"/>
  </style:style>
  <style:style style:name="Heading_20_1" style:display-name="Heading 1" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="1" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in"/>
   <style:text-properties fo:font-size="130%" fo:font-weight="bold" style:font-size-asian="130%" style:font-weight-asian="bold" style:font-size-complex="130%" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Text_20_body_20_indent" style:display-name="Text body indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin="100%" fo:margin-left="0.1965in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Heading_20_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="2" style:class="text">
   <style:paragraph-properties fo:margin-top="0.139in" fo:margin-bottom="0.0835in"/>
   <style:text-properties fo:font-size="115%" fo:font-weight="bold" style:font-size-asian="115%" style:font-weight-asian="bold" style:font-size-complex="115%" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="First_20_line_20_indent" style:display-name="First line indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin="100%" fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:text-indent="0.1965in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Hanging_20_indent" style:display-name="Hanging indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin="100%" fo:margin-left="0.3937in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:text-indent="-0.1965in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="0in"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Preformatted_20_Text" style:display-name="Preformatted Text" style:family="paragraph" style:parent-style-name="Standard" style:class="html"/>
  <style:style style:name="Quotations" style:family="paragraph" style:parent-style-name="Standard" style:class="html"/>
  <style:style style:name="Title" style:family="paragraph" style:parent-style-name="Heading" style:class="chapter"/>
  <style:style style:name="Subtitle" style:family="paragraph" style:parent-style-name="Heading" style:class="chapter"/>
  <style:style style:name="Heading_20_3" style:display-name="Heading 3" style:family="paragraph" style:parent-style-name="Heading" style:class="text"/>
  <style:style style:name="Marginalia" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text"/>
  <style:style style:name="Header_20_right" style:display-name="Header right" style:family="paragraph" style:parent-style-name="Standard" style:class="extra"/>
  <style:style style:name="List_20_1" style:display-name="List 1" style:family="paragraph" style:parent-style-name="List" style:class="list"/>
  <style:style style:name="Numbering_20_1" style:display-name="Numbering 1" style:family="paragraph" style:parent-style-name="List" style:class="list"/>
  <style:style style:name="List_20_Indent" style:display-name="List Indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text"/>
  <style:style style:name="Contents_20_Heading" style:display-name="Contents Heading" style:family="paragraph" style:parent-style-name="Heading" style:class="index">
   <style:paragraph-properties fo:margin="100%" fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:text-indent="0in" style:auto-text-indent="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="16pt" fo:font-weight="bold" style:font-size-asian="16pt" style:font-weight-asian="bold" style:font-size-complex="16pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Contents_20_1" style:display-name="Contents 1" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin="100%" fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Contents_20_2" style:display-name="Contents 2" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin="100%" fo:margin-left="0.1965in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="6.7283in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Bullet_20_Symbols" style:display-name="Bullet Symbols" style:family="text">
   <style:text-properties style:font-name="OpenSymbol" style:font-name-asian="OpenSymbol" style:font-name-complex="OpenSymbol"/>
  </style:style>
  <style:style style:name="Emphasis" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text">
   <style:text-properties fo:color="#000080" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="Index_20_Link" style:display-name="Index Link" style:family="text"/>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.3in" fo:text-indent="-0.3in" fo:margin-left="0.3in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.4in" fo:text-indent="-0.4in" fo:margin-left="0.4in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.5in" fo:text-indent="-0.5in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.6in" fo:text-indent="-0.6in" fo:margin-left="0.6in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.7in" fo:text-indent="-0.7in" fo:margin-left="0.7in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.8in" fo:text-indent="-0.8in" fo:margin-left="0.8in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.9in" fo:text-indent="-0.9in" fo:margin-left="0.9in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1in" fo:text-indent="-1in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.1in" fo:text-indent="-1.1in" fo:margin-left="1.1in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.2in" fo:text-indent="-1.2in" fo:margin-left="1.2in"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
  <style:default-page-layout>
   <style:page-layout-properties style:writing-mode="lr-tb" style:layout-grid-standard-mode="true"/>
  </style:default-page-layout>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
   <style:text-properties fo:color="#000000" style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P12" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P14" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:text-align="start" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P15" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="11.0102in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P16" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:margin-left="11in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="11in" style:auto-text-indent="false">
    <style:tab-stops/>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P17" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="15.3752in" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P18" style:family="paragraph" style:parent-style-name="Contents_20_2">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P19" style:family="paragraph" style:parent-style-name="Contents_20_1">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties fo:color="#3f7f5f"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:color="#3f7f5f" style:font-name-asian="Monospace" style:font-name-complex="Monospace"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties fo:color="#7f0055" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T6" style:family="text">
   <style:text-properties fo:color="#000000"/>
  </style:style>
  <style:style style:name="T7" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T8" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T9" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="none" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T10" style:family="text">
   <style:text-properties fo:color="#000000" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T11" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name-asian="Monospace" style:font-name-complex="Monospace"/>
  </style:style>
  <style:style style:name="T12" style:family="text">
   <style:text-properties fo:color="#005032"/>
  </style:style>
  <style:style style:name="T13" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T14" style:family="text">
   <style:text-properties fo:color="#2a00ff"/>
  </style:style>
  <style:style style:name="T15" style:family="text">
   <style:text-properties fo:color="#2a00ff" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T16" style:family="text">
   <style:text-properties fo:color="#642880" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T17" style:family="text">
   <style:text-properties fo:color="#644632" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T18" style:family="text">
   <style:text-properties fo:color="#644632" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T19" style:family="text">
   <style:text-properties fo:color="#0000c0"/>
  </style:style>
  <style:style style:name="T20" style:family="text">
   <style:text-properties fo:color="#0000c0" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T21" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Sect1" style:family="section">
   <style:section-properties fo:background-color="transparent" style:editable="false">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
    <style:background-image/>
   </style:section-properties>
  </style:style>
  <style:style style:name="Sect2" style:family="section">
   <style:section-properties style:editable="false">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
   </style:section-properties>
  </style:style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="8.5in" fo:page-height="11in" style:num-format="1" style:print-orientation="portrait" fo:margin="0.7874in" fo:margin-top="0.7874in" fo:margin-bottom="0.7874in" fo:margin-left="0.7874in" fo:margin-right="0.7874in" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="44" style:layout-grid-base-height="0.2165in" style:layout-grid-ruby-height="0in" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="true" style:layout-grid-display="true" style:layout-grid-base-width="0.1457in" style:layout-grid-snap-to="true" style:layout-grid-snap-to-characters="true" style:footnote-max-height="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text>
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
   </text:sequence-decls>
   <text:p text:style-name="Title"><text:bookmark-start text:name="__RefHeading__2311_977618933"/>C++ for hard real-time applications.<text:bookmark-end text:name="__RefHeading__2311_977618933"/></text:p>
   <text:table-of-content text:style-name="Sect1" text:protected="true" text:name="Table of Contents1">
    <text:table-of-content-source text:outline-level="10" text:use-index-marks="false" text:use-index-source-styles="true">
     <text:index-title-template text:style-name="Contents_20_Heading">Table of Contents</text:index-title-template>
     <text:table-of-content-entry-template text:outline-level="1" text:style-name="Contents_20_1">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="2" text:style-name="Contents_20_2">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="3" text:style-name="Contents_20_3">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="4" text:style-name="Contents_20_4">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="5" text:style-name="Contents_20_5">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="6" text:style-name="Contents_20_6">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="7" text:style-name="Contents_20_7">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="8" text:style-name="Contents_20_8">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="9" text:style-name="Contents_20_9">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="10" text:style-name="Contents_20_10">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:index-source-styles text:outline-level="1">
      <text:index-source-style text:style-name="Heading_20_2"/>
     </text:index-source-styles>
     <text:index-source-styles text:outline-level="2">
      <text:index-source-style text:style-name="Heading_20_3"/>
     </text:index-source-styles>
    </text:table-of-content-source>
    <text:index-body>
     <text:index-title text:style-name="Sect2" text:name="Table of Contents1_Head">
      <text:p text:style-name="Contents_20_Heading">Table of Contents</text:p>
     </text:index-title>
     <text:p text:style-name="P19"><text:a xlink:type="simple" xlink:href="#__RefHeading__2313_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Introduction.<text:tab/>1</text:a></text:p>
     <text:p text:style-name="P19"><text:a xlink:type="simple" xlink:href="#__RefHeading__2315_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Mutual exclusion.<text:tab/>1</text:a></text:p>
     <text:p text:style-name="P18"><text:a xlink:type="simple" xlink:href="#__RefHeading__2531_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Simple lock<text:tab/>1</text:a></text:p>
     <text:p text:style-name="P18"><text:a xlink:type="simple" xlink:href="#__RefHeading__2533_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Template based lock.<text:tab/>3</text:a></text:p>
     <text:p text:style-name="P19"><text:a xlink:type="simple" xlink:href="#__RefHeading__2317_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Containers.<text:tab/>4</text:a></text:p>
     <text:p text:style-name="P18"><text:a xlink:type="simple" xlink:href="#__RefHeading__2535_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Cyclic buffer.<text:tab/>5</text:a></text:p>
     <text:p text:style-name="P18"><text:a xlink:type="simple" xlink:href="#__RefHeading__2537_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Cyclic buffer – C alternative.<text:tab/>7</text:a></text:p>
     <text:p text:style-name="P18"><text:a xlink:type="simple" xlink:href="#__RefHeading__2646_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Use of templates in embedded.<text:tab/>10</text:a></text:p>
     <text:p text:style-name="P19"><text:a xlink:type="simple" xlink:href="#__RefHeading__2319_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Timers.<text:tab/>12</text:a></text:p>
     <text:p text:style-name="P19"><text:a xlink:type="simple" xlink:href="#__RefHeading__2321_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Hardware.<text:tab/>12</text:a></text:p>
     <text:p text:style-name="P19"><text:a xlink:type="simple" xlink:href="#__RefHeading__2758_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">ROM and RAM.<text:tab/>12</text:a></text:p>
     <text:p text:style-name="P18"><text:a xlink:type="simple" xlink:href="#__RefHeading__2648_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Data in ROM<text:tab/>12</text:a></text:p>
     <text:p text:style-name="P18"><text:a xlink:type="simple" xlink:href="#__RefHeading__2650_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Code in ROM<text:tab/>12</text:a></text:p>
    </text:index-body>
   </text:table-of-content>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2313_977618933"/>Introduction.<text:bookmark-end text:name="__RefHeading__2313_977618933"/></text:h>
   <text:p text:style-name="First_20_line_20_indent">This book is intended for the firmware developers who often use C language use assembler from time to time. I assume that a reader is comfortable with ARM or Intel assembler. In this book I am trying to give examples of C++ code in situations where, arguably, C is not a perfect fit for the task. Many C++ code examples come with snippets of resulting assembler. The examples of code are constructed in a way that allows immediate reuse in a real world application. Examples cover topics like memory and speed optimizations, organizing arrays, FIFOs, mutual exclusion in the real-time multi-task environment, direct access to the hardware. In all examples I assume that C++ compiler supports version 11 of the language. One example of such compiler is GNUC 4.8. Availability of C++ compiler supporting version 11 for a specific hardware is not required and most code examples can be rewritten for older C++ compilers. </text:p>
   <text:p text:style-name="Text_20_body">Any problem can be solved in multiple ways. Where it is possible and makes sense I to provide an alternative implementation in C and compare performance of C and C++ solutions.</text:p>
   <text:p text:style-name="Quotations">I want to end the introduction with famous quote from one of Linus Torvalds e-mails: “... I&apos;ve come to the conclusion that any programmer that would prefer the project to be in C++ over C is likely a programmer that I really would prefer to piss off, so that he doesn&apos;t come and screw up any project I&apos;m involved with .... the only way to do good, efficient, and system-level and portable C++ ends up to limit yourself to all the things that are basically available in C. And limiting your project to C means that people don&apos;t screw that up, and also means that you get a lot of programmers that do actually understand low-level issues and don&apos;t screw things up with any idiotic &apos;object model&apos; crap”. </text:p>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2315_977618933"/>Mutual exclusion.<text:bookmark-end text:name="__RefHeading__2315_977618933"/></text:h>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2531_977618933"/>Simple lock<text:bookmark-end text:name="__RefHeading__2531_977618933"/></text:h>
   <text:p text:style-name="Quotations">The great thing about Object Oriented code is that it can make small, simple problems look like large, complex ones.</text:p>
   <text:p text:style-name="P17"/>
   <text:p text:style-name="First_20_line_20_indent">In the multi-task environment threads and interrupts can concurrently read and write data objects. I can use different tools for synchronization of access to the data between different contexts. Among available for me tools are semaphore, mutex, disable all interrupts, disable some interrupt, disable operating system scheduler, spin locks. When I write a wrapper around API provided by my real-time operating system or by hardware I want the wrapper to be as thin as possible. Usually I measure the overhead of the wrapper by number of assembler instructions. Number of instructions provide good approximation of CPU cycles or execution time. I am starting from a code snippet which creates and calls a dummy lock object.</text:p>
   <text:p text:style-name="P3">/**</text:p>
   <text:p text:style-name="P3"><text:s/>* Dummy lock</text:p>
   <text:p text:style-name="P3"><text:s/>*/</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T7"> LockDummy {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T7">:</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P4"><text:s text:c="4"/>LockDummy() {</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T15">&quot;Locked context&quot;</text:span><text:span text:style-name="T7"> &lt;&lt; endl;</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P4"><text:s text:c="4"/>~LockDummy() {</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T15">&quot;Lock is freed&quot;</text:span><text:span text:style-name="T7"> &lt;&lt; endl;</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">protected</text:span><text:span text:style-name="T7">:</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">private</text:span><text:span text:style-name="T7">:</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T7">};</text:span><text:span text:style-name="T2">// class LockDummy</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P3">/*</text:p>
   <text:p text:style-name="P3"><text:s/>* Output of this code is going to be</text:p>
   <text:p text:style-name="P3"><text:s/>* Locked context</text:p>
   <text:p text:style-name="P3"><text:s/>* Lock is freed</text:p>
   <text:p text:style-name="P3"><text:s/>*/</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T7"> main() {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">#if</text:span><text:span text:style-name="T7"> (__cplusplus &gt;= 201103) </text:span><text:span text:style-name="T2">// use &quot;auto&quot; if C++11 or better</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">auto</text:span><text:span text:style-name="T7"> myDummyLock = LockDummy();</text:span></text:p>
   <text:p text:style-name="P6">#else</text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>LockDummy myDummyLock = LockDummy();</text:p>
   <text:p text:style-name="P6">#endif</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> 0;</text:span></text:p>
   <text:p text:style-name="P4">}</text:p>
   <text:p text:style-name="Text_20_body">A short note here regarding a word “auto” in the code above – C++11 compiler knows to deduct types of variables.</text:p>
   <text:p text:style-name="Text_20_body">In the function main() compiler will call output function two times and will not add any other code. The lock is released - destructor ~LockDummy is called – when the scope of the variable myDummyLock ends. The scope could be a while loop. I do not have to care to call “unlock” before each and every return from the function. C++ compiler makes sure that destructor is always called and called exactly only once. This convenient service comes without any performance overhead. I want to stress this idea by another example. In the following code I set a scope around the declaration of the lock variable. </text:p>
   <text:p text:style-name="P12">/*</text:p>
   <text:p text:style-name="P3"><text:s/>* Output of this code is going to be</text:p>
   <text:p text:style-name="P3"><text:s/>* Locked context</text:p>
   <text:p text:style-name="P3"><text:s/>* Lock is freed</text:p>
   <text:p text:style-name="P3"><text:s/>* End of main</text:p>
   <text:p text:style-name="P3"><text:s/>*/</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T7"> main() {</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>{</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">auto</text:span><text:span text:style-name="T7"> myDummyLock = LockDummy();</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T15">&quot;End of main&quot;</text:span><text:span text:style-name="T7"> &lt;&lt; endl;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> 0;</text:span></text:p>
   <text:p text:style-name="P4">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2533_977618933"/>Template based lock.<text:bookmark-end text:name="__RefHeading__2533_977618933"/></text:h>
   <text:p text:style-name="Quotations">C++: Hard to learn and built to stay that way.</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="First_20_line_20_indent">My second lock is more realistic and <text:s/>does some work – a lock which disables a hardware interrupt. I assume that there is an API which disables and enables an interrupt. I am refactoring the original lock code a little bit. First of all I use a template – a feature of C++ that allows to declare a class which operates with generic types. I am going to reuse the code in the template Lock for different synchronization objects. Code in the template Lock can manipulate any structure or class which implement two public methods static methods get() and release(). I carefully avoid polymorphism here – I do not require synchronization objects to belong to the same hierarchy of classes. Wrapper around disable/enable interrupts API – likely write to the dedicated hardware - is not going to be child/friend/parent/relative type of a wrapper for operating system semaphore. Finally I drop a declaration of a variable myDummyLock in the function main(). </text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">interruptDisable</text:span><text:span text:style-name="T7">(</text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7">) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T15">&quot;Disable&quot;</text:span><text:span text:style-name="T7"> &lt;&lt; </text:span><text:span text:style-name="T16">endl</text:span><text:span text:style-name="T7">;</text:span></text:p>
   <text:p text:style-name="P4">}</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">interruptEnable</text:span><text:span text:style-name="T7">(</text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7">) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T15">&quot;Enable&quot;</text:span><text:span text:style-name="T7"> &lt;&lt; </text:span><text:span text:style-name="T16">endl</text:span><text:span text:style-name="T7">;</text:span></text:p>
   <text:p text:style-name="P4">}</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T13">SynchroObject</text:span><text:span text:style-name="T7"> {</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T2">/**</text:span></text:p>
   <text:p text:style-name="P3"><text:s text:c="5"/>* Default constructor is private - I do not want any objects of this type</text:p>
   <text:p text:style-name="P3"><text:s text:c="5"/>*/</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T8">SynchroObject</text:span><text:span text:style-name="T7">() {};</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T7">:</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">get</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="8"/>interruptDisable();</text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">release</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="8"/>interruptEnable();</text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T7">};</text:span><text:span text:style-name="T2">// class SynchroObject</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T7">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T17">Mutex</text:span><text:span text:style-name="T7">&gt; </text:span><text:span text:style-name="T4">class</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T13">Lock</text:span><text:span text:style-name="T7"> {</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T7">:</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">Lock</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T17">Mutex</text:span><text:span text:style-name="T7">::get();</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">~Lock</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T17">Mutex</text:span><text:span text:style-name="T7">::release();</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7">};</text:span><text:span text:style-name="T2">// class Lock</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P3">/**</text:p>
   <text:p text:style-name="P3"><text:s/>* Declare a new type Lock which uses SynchroObject to</text:p>
   <text:p text:style-name="P3"><text:s/>* disable/enable interrupts</text:p>
   <text:p text:style-name="P3"><text:s/>*/</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">typedef</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T13">Lock</text:span><text:span text:style-name="T7">&lt;</text:span><text:span text:style-name="T13">SynchroObject</text:span><text:span text:style-name="T7">&gt; </text:span><text:span text:style-name="T13">Lock_t</text:span><text:span text:style-name="T7">;</text:span></text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P3">/*</text:p>
   <text:p text:style-name="P3"><text:s/>* Output of this code is going to be</text:p>
   <text:p text:style-name="P3"><text:s/>* Disable</text:p>
   <text:p text:style-name="P3"><text:s/>* Enable</text:p>
   <text:p text:style-name="P3"><text:s/>*/</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">main</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>{</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T2">/*</text:span></text:p>
   <text:p text:style-name="P3"><text:s text:c="9"/>* Just call a constructor, I skip declaring of a variable here</text:p>
   <text:p text:style-name="P3"><text:s text:c="9"/>*/</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T13">Lock_t</text:span><text:span text:style-name="T7">();</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> 0;</text:span></text:p>
   <text:p text:style-name="P4">}</text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="Text_20_body">In the code snippet above overhead of the wrapper around functions which disable and enable interrupts is exactly zero. Indeed if I check the disassembler I will see two calls to the print function in the main routine and nothing else. I got some C++ code which gets optimized to nothing. What did I gain? I can not miss out calling enable interrupts after I called disable. No matter how many return points or breaks out of loop my function has C++ compiler ensures that function interruptEnable is called exactly once. <text:s/>I will return to synchronization objects later in this book. </text:p>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2317_977618933"/>Containers.<text:bookmark-end text:name="__RefHeading__2317_977618933"/></text:h>
   <text:p text:style-name="Quotations">When your hammer is C++, everything begins to look like a thumb.</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="First_20_line_20_indent">C++ is all about containers. Standard template library (STL) contains lot of very smart code dealing with vectors and stacks and queues. Unfortunately a firmware developer frequently needs something else. In this chapter I will demonstrate a container which makes sense in a mission critical hard real -time application running in the environment with limited resources. I want to avoid dynamic allocation – I want all my allocations to be static. I want my code to be reentrant and allow safe concurrent access from more than one context. I want performance of my containers be at least not worse than a C alternative. </text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2535_977618933"/>Cyclic buffer.<text:bookmark-end text:name="__RefHeading__2535_977618933"/></text:h>
   <text:p text:style-name="First_20_line_20_indent">My first example is going to be a cyclic buffer. A “producer” adds objects to the “tail” of the cyclic buffer and “consumer” pulls the objects from the “head” of the cyclic buffer. Example of a producer can be an interrupt routine which gets characters from the UART (serial port). Consumer can be a function called from a main loop which handles commands arriving from the UART.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T7">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T17">ObjectType</text:span><text:span text:style-name="T7">, </text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T17">Lock</text:span><text:span text:style-name="T7">, std::</text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T17">Size</text:span><text:span text:style-name="T7">&gt; </text:span><text:span text:style-name="T4">class</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T13">CyclicBuffer</text:span><text:span text:style-name="T7"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T7">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T8">CyclicBuffer</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T2">/**</text:span></text:p>
   <text:p text:style-name="P9"><text:s text:c="9"/>* I want to fail compilation if the ObjectType not an integer</text:p>
   <text:p text:style-name="P9"><text:s text:c="9"/>* I check the type traits</text:p>
   <text:p text:style-name="P9"><text:s text:c="9"/>* In C++11 I have &apos;static_assert&apos;</text:p>
   <text:p text:style-name="P9"><text:s text:c="9"/>*/</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#if</text:span><text:span text:style-name="T7"> (__cplusplus &gt;= 201103)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">static_assert</text:span><text:span text:style-name="T7">(std::</text:span><text:span text:style-name="T13">numeric_limits</text:span><text:span text:style-name="T7">&lt;</text:span><text:span text:style-name="T17">ObjectType</text:span><text:span text:style-name="T7">&gt;::</text:span><text:span text:style-name="T20">is_integer</text:span><text:span text:style-name="T7">, </text:span><text:span text:style-name="T15">&quot;CyclicBuffer is intended to work only with integer types&quot;</text:span><text:span text:style-name="T7">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#elif</text:span><text:span text:style-name="T7"> defined(__GNUC____)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">__attribute__</text:span><text:span text:style-name="T7">((unused)) ObjectType val1 = 1;</text:span></text:p>
   <text:p text:style-name="P10">#else</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T7"> ObjectType val1;</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>*(&amp;val1) = 1;</text:p>
   <text:p text:style-name="P10">#endif</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7"> = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7"> = 0;</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T8">~CyclicBuffer</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T2">/**</text:span></text:p>
   <text:p text:style-name="P9"><text:s text:c="5"/>* add element to the tail of the buffer</text:p>
   <text:p text:style-name="P9"><text:s text:c="5"/>*/</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">add</text:span><text:span text:style-name="T7">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T17">ObjectType</text:span><text:span text:style-name="T7"> object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T17">Lock</text:span><text:span text:style-name="T7">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T7"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="12"/></text:span><text:span text:style-name="T20">data</text:span><text:span text:style-name="T7">[</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7">] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="12"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7"> = increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T7"> {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="12"/>errorOverflow();</text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T2">/**</text:span></text:p>
   <text:p text:style-name="P9"><text:s text:c="5"/>* Remove element from the head of the buffer</text:p>
   <text:p text:style-name="P9"><text:s text:c="5"/>*/</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">remove</text:span><text:span text:style-name="T7">(</text:span><text:span text:style-name="T17">ObjectType</text:span><text:span text:style-name="T7"> &amp;object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T17">Lock</text:span><text:span text:style-name="T7">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T7"> (!isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="12"/>object = </text:span><text:span text:style-name="T20">data</text:span><text:span text:style-name="T7">[</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7">];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="12"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7"> = </text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T7"> {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="12"/>errorUnderflow();</text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">isEmpty</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T7"> res = (</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7"> == </text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> res;</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">isFull</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> tail = increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T7"> res = (</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7"> == tail);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> res;</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">private</text:span><text:span text:style-name="T7">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">increment</text:span><text:span text:style-name="T7">(</text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> index) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T7"> (index &lt; </text:span><text:span text:style-name="T17">Size</text:span><text:span text:style-name="T7">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="12"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> (index + 1);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T7"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="12"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> 0;</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">errorOverflow</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">errorUnderflow</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T17">ObjectType</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T20">data</text:span><text:span text:style-name="T7">[</text:span><text:span text:style-name="T17">Size</text:span><text:span text:style-name="T7"> + 1];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7">;</text:span></text:p>
   <text:p text:style-name="P11">};</text:p>
   <text:p text:style-name="P9">// class CyclicBuffer</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P9">/**</text:p>
   <text:p text:style-name="P9"><text:s/>* Instantiate a new type - lock which does nothing</text:p>
   <text:p text:style-name="P9"><text:s/>*/</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">typedef</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T13">Lock</text:span><text:span text:style-name="T7">&lt;</text:span><text:span text:style-name="T13">SynchroObjectDummy</text:span><text:span text:style-name="T7">&gt; </text:span><text:span text:style-name="T13">LockDummy_t</text:span><text:span text:style-name="T7">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P9">/**</text:p>
   <text:p text:style-name="P9"><text:s/>* Function returns number of elements in the cyclic buffer.</text:p>
   <text:p text:style-name="P9"><text:s/>* Compiler will fail if the value can not be calculated in compilation time.</text:p>
   <text:p text:style-name="P9"><text:s/>*/</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">constexpr</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">calculateCyclicBufferSize</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> 10;</text:span></text:p>
   <text:p text:style-name="P11">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T13">CyclicBuffer</text:span><text:span text:style-name="T7">&lt;</text:span><text:span text:style-name="T13">uint8_t</text:span><text:span text:style-name="T7">, </text:span><text:span text:style-name="T13">LockDummy_t</text:span><text:span text:style-name="T7">, calculateCyclicBufferSize()&gt; myCyclicBuffer;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">main</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T2">// I want to inspect assembler code generated by the C++ compiler</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>myCyclicBuffer.add(0);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T2">// I demonstrate here a range based loop from C++11</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">for</text:span><text:span text:style-name="T7"> (</text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T7"> i : { 1, 2, 3 }) {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>myCyclicBuffer.add(i);</text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">while</text:span><text:span text:style-name="T7"> (!myCyclicBuffer.isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T13">uint8_t</text:span><text:span text:style-name="T7"> val;</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>myCyclicBuffer.remove(val);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/>cout &lt;&lt; (</text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T7">) val &lt;&lt; </text:span><text:span text:style-name="T16">endl</text:span><text:span text:style-name="T7">;</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> 0;</text:span></text:p>
   <text:p text:style-name="P11">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body">Let&apos;s examine the assembler generated by the GNUC compiler for Intel. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">xor</text:span><text:span text:style-name="T7"> %esi,%esi</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="2"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> add(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T7"> ObjectType object) {</text:span></text:p>
   <text:p text:style-name="P11">mov 0x2009c0(%rip),%rax</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="10"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P11">mov %rsi,%r8</text:p>
   <text:p text:style-name="P11">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="2"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> add(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T7"> ObjectType object) {</text:span></text:p>
   <text:p text:style-name="P11">mov %rcx,%rdx</text:p>
   <text:p text:style-name="P11">cmovbe %rdi,%r8</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="6"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T7"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="P11">cmp %r8,%rax</text:p>
   <text:p text:style-name="P11">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="10"/>data[</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;tail] = object;</text:span></text:p>
   <text:p text:style-name="P11">movb $0x0,0x6011a0(%rcx)</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="10"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P11">mov %r8,%rdx</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="10"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;tail = increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T7">-&gt;tail);</text:span></text:p>
   <text:p text:style-name="P11">mov %r8,0x2009a0(%rip)</text:p>
   <text:p text:style-name="P11"/>
   <text:p text:style-name="Text_20_body">I see a couple of move instructions – update of the tail and update of the data in the cyclic buffer, compare when the tail is incremented. There are 9 opcodes total. There is no unexpected overhead in this code. </text:p>
   <text:p text:style-name="Text_20_body">I coded one cyclic buffer implementation, but I gained four different cyclic buffers optimized for four different integer types and equally efficient when working with 8, 16, 32, 64 bits integers on different CPUs. Class CyclicBuffer encapsulates the data in the private region making it accessible only via the class methods and this is another good thing. </text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2537_977618933"/>Cyclic buffer – C alternative.<text:bookmark-end text:name="__RefHeading__2537_977618933"/></text:h>
   <text:p text:style-name="Quotations">/**</text:p>
   <text:p text:style-name="Quotations"><text:s/>* Returns true</text:p>
   <text:p text:style-name="Quotations"><text:s/>*/</text:p>
   <text:p text:style-name="Quotations">int compare(int C)</text:p>
   <text:p text:style-name="Quotations">{</text:p>
   <text:p text:style-name="Quotations"><text:s text:c="4"/>return (C &gt; C++);</text:p>
   <text:p text:style-name="Quotations">}</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="First_20_line_20_indent">The suggested below C implementation of the cyclic buffer is type safe. C implementation contains approximately the same number of C lines – ~80 lines vs ~90 lines in C++.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#undef</text:span><text:span text:style-name="T7"> CYCLIC_BUFFRE_SIZE</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#define</text:span><text:span text:style-name="T7"> CYCLIC_BUFFRE_SIZE 10</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#undef</text:span><text:span text:style-name="T7"> CYCLIC_BUFFER_OBJECT_TYPE</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#define</text:span><text:span text:style-name="T7"> CYCLIC_BUFFER_OBJECT_TYPE uint8_t</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#define</text:span><text:span text:style-name="T7"> CYCLIC_BUFFRE_DECLARE(ObjectType, Size) \</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">typedef</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">struct</text:span><text:span text:style-name="T7"> { <text:s text:c="26"/>\</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>ObjectType data[Size+1]; <text:s text:c="16"/>\</text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>size_t head; <text:s text:c="28"/>\</text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>size_t tail; <text:s text:c="28"/>\</text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>} CyclicBuffer; <text:s text:c="29"/>\</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P11">CYCLIC_BUFFRE_DECLARE(CYCLIC_BUFFER_OBJECT_TYPE, CYCLIC_BUFFRE_SIZE);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T13">CyclicBuffer</text:span><text:span text:style-name="T7"> myCyclicBuffer;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">CyclicBufferIncrement</text:span><text:span text:style-name="T7">(</text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> index, </text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T7"> (index &lt; size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T7"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> 0;</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P11">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">CyclicBufferIsEmpty</text:span><text:span text:style-name="T7">(</text:span><text:span text:style-name="T13">CyclicBuffer</text:span><text:span text:style-name="T7">* cyclicBuffer) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T7"> res = (cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7"> == cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> res;</text:span></text:p>
   <text:p text:style-name="P11">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">CyclicBufferIsFull</text:span><text:span text:style-name="T7">(</text:span><text:span text:style-name="T13">CyclicBuffer</text:span><text:span text:style-name="T7">* cyclicBuffer) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T13">size_t</text:span><text:span text:style-name="T7"> tail = CyclicBufferIncrement(cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7">, CYCLIC_BUFFRE_SIZE);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T7"> res = (cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7"> == tail);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> res;</text:span></text:p>
   <text:p text:style-name="P11">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">errorOverflow</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P11">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">errorUnderflow</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P11">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">CyclicBufferAdd</text:span><text:span text:style-name="T7">(</text:span><text:span text:style-name="T13">CyclicBuffer</text:span><text:span text:style-name="T7">* cyclicBuffer, </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T7"> CYCLIC_BUFFER_OBJECT_TYPE object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T7"> (!CyclicBufferIsFull(cyclicBuffer)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/>cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">data</text:span><text:span text:style-name="T7">[cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7">] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/>cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7"> = CyclicBufferIncrement(cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">tail</text:span><text:span text:style-name="T7">, CYCLIC_BUFFRE_SIZE);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T7"> {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>errorOverflow();</text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P11">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">CyclicBufferRemove</text:span><text:span text:style-name="T7">(</text:span><text:span text:style-name="T13">CyclicBuffer</text:span><text:span text:style-name="T7">* cyclicBuffer, CYCLIC_BUFFER_OBJECT_TYPE* object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T7"> (!CyclicBufferIsEmpty(cyclicBuffer)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/>*object = cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">data</text:span><text:span text:style-name="T7">[cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7">];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/>cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7"> = CyclicBufferIncrement(cyclicBuffer-&gt;</text:span><text:span text:style-name="T20">head</text:span><text:span text:style-name="T7">, CYCLIC_BUFFRE_SIZE);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T7"> {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>errorUnderflow();</text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P11">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T8">main</text:span><text:span text:style-name="T7">() {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>CyclicBufferAdd(&amp;myCyclicBuffer, 0);</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">for</text:span><text:span text:style-name="T7"> (</text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T7"> i = 1;i &lt; 4;i++) {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>CyclicBufferAdd(&amp;myCyclicBuffer, i);</text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">while</text:span><text:span text:style-name="T7"> (!CyclicBufferIsEmpty(&amp;myCyclicBuffer)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T13">uint8_t</text:span><text:span text:style-name="T7"> val;</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>CyclicBufferRemove(&amp;myCyclicBuffer, &amp;val);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/>cout &lt;&lt; (</text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T7">) val &lt;&lt; </text:span><text:span text:style-name="T16">endl</text:span><text:span text:style-name="T7">;</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> 0;</text:span></text:p>
   <text:p text:style-name="P11">}</text:p>
   <text:p text:style-name="Text_20_body">One limitation of this code is that only cyclic buffers working with the same integer type can be instantiated in the same C source file. Add/remove functions can be defined only once in a C file. </text:p>
   <text:p text:style-name="Text_20_body">Corresponding assembler contains 10 opcodes in total for call to add API:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> (index + 1);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="2"/></text:span><text:span text:style-name="T4">xor</text:span><text:span text:style-name="T7"> %esi,%esi</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> CyclicBufferAdd(CyclicBuffer* cyclicBuffer, </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T7"> CYCLIC_BUFFER_OBJECT_TYPE object) {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="2"/>mov 0x2009be(%rip),%rax <text:s text:c="7"/># 0x6011b0 &lt;myCyclicBuffer+16&gt;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="2"/>mov %rsi,%r8</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T7"> main() {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="2"/>push %rbp</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="2"/>lea 0x1(%rcx),%rdi</text:p>
   <text:p text:style-name="P11">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T7"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T7"> CyclicBufferAdd(CyclicBuffer* cyclicBuffer, </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T7"> CYCLIC_BUFFER_OBJECT_TYPE object) {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="2"/>mov %rcx,%rdx</text:p>
   <text:p text:style-name="P11"><text:s text:c="2"/>push %rbx</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T7"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="2"/>cmovbe %rdi,%r8</text:p>
   <text:p text:style-name="P11">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T7"> (!CyclicBufferIsFull(cyclicBuffer)) {</text:span></text:p>
   <text:p text:style-name="P11"><text:s text:c="2"/>cmp %r8,%rax</text:p>
   <text:p text:style-name="P11">...............................................</text:p>
   <text:p text:style-name="P11"><text:s text:c="8"/>cyclicBuffer-&gt;data[cyclicBuffer-&gt;tail] = object;</text:p>
   <text:p text:style-name="P11"><text:s text:c="2"/>movb $0x0,0x6011a0(%rcx)</text:p>
   <text:p text:style-name="Text_20_body">GNUC for ARM produces essentially the same assembler for C and C++ code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">xor</text:span><text:span text:style-name="T7"> <text:s text:c="3"/>%esi,%esi</text:span></text:p>
   <text:p text:style-name="P11">mov <text:s text:c="3"/>0x2009be(%rip),%rax</text:p>
   <text:p text:style-name="P11">mov <text:s text:c="3"/>%rsi,%r8</text:p>
   <text:p text:style-name="P11">push <text:s text:c="2"/>%rbp</text:p>
   <text:p text:style-name="P11">lea <text:s text:c="3"/>0x1(%rdx),%rdi</text:p>
   <text:p text:style-name="P11">cmp <text:s text:c="3"/>$0x9,%rdx</text:p>
   <text:p text:style-name="P11">mov <text:s text:c="3"/>%rdx,%rcx</text:p>
   <text:p text:style-name="P11">push <text:s text:c="2"/>%rbx</text:p>
   <text:p text:style-name="P11">cmovbe %rdi,%r8</text:p>
   <text:p text:style-name="P11">cmp <text:s text:c="3"/>%r8,%rax</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T7">je <text:s text:c="4"/></text:span><text:span text:style-name="T9">40081c</text:span><text:span text:style-name="T7"> &lt;main+0x3c&gt;</text:span></text:p>
   <text:p text:style-name="P11">movb <text:s text:c="2"/>$0x0,0x6011a0(%rdx)</text:p>
   <text:p text:style-name="P11">mov <text:s text:c="3"/>%r8,%rcx</text:p>
   <text:p text:style-name="P11">mov <text:s text:c="3"/>%r8,0x20099c(%rip)</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">xor</text:span><text:span text:style-name="T7"> <text:s text:c="3"/>%r12d,%r12d</text:span></text:p>
   <text:p text:style-name="Text_20_body">Performance of C and C++ versions measured on Intel is the same. </text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2646_977618933"/>Use of templates in embedded.<text:bookmark-end text:name="__RefHeading__2646_977618933"/></text:h>
   <text:p text:style-name="First_20_line_20_indent">At this point a patient reader would ask about “code bloat” caused by C++ templates and object code duplication. Typically an implementation in C should have a smaller memory footprint, should not it? </text:p>
   <text:p text:style-name="Text_20_body">In the specific case of the cyclic buffer all methods are inline and there is no any separate “template code”. In general case for every unique combination ObjectsType/Size used in the code the C++ compiler is going to instantiate a class and add a full set of methods to the application code. A careful C++ programmer shall move the methods which do not require template arguments to a base class and inherit the CyclicBuffer template from the new class. Moving type-invariant code into a base class sometimes is called “code hoisting”. Code hoisting does not necessary cause a performance hit. Template CyclicBuffer can look like this:</text:p>
   <text:p text:style-name="P13"><text:span text:style-name="T5">class</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T12">CyclicBufferApi</text:span><text:span text:style-name="T6"> {</text:span></text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T6">:</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T10">isEmpty</text:span><text:span text:style-name="T6">() {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T6"> res = (</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">head</text:span><text:span text:style-name="T6"> == </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">tail</text:span><text:span text:style-name="T6">);</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T6"> res;</text:span></text:p>
   <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T10">isFull</text:span><text:span text:style-name="T6">() {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T12">size_t</text:span><text:span text:style-name="T6"> tail = increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">tail</text:span><text:span text:style-name="T6">);</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">bool</text:span><text:span text:style-name="T6"> res = (</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">head</text:span><text:span text:style-name="T6"> == tail);</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T6"> res;</text:span></text:p>
   <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T5">protected</text:span><text:span text:style-name="T6">:</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T10">CyclicBufferApi</text:span><text:span text:style-name="T6">(</text:span><text:span text:style-name="T12">size_t</text:span><text:span text:style-name="T6"> size) {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">size</text:span><text:span text:style-name="T6"> = size;</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">head</text:span><text:span text:style-name="T6"> = 0;</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">tail</text:span><text:span text:style-name="T6"> = 0;</text:span></text:p>
   <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T10">errorOverflow</text:span><text:span text:style-name="T6">() {</text:span></text:p>
   <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T10">errorUnderflow</text:span><text:span text:style-name="T6">() {</text:span></text:p>
   <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T12">size_t</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T10">increment</text:span><text:span text:style-name="T6">(</text:span><text:span text:style-name="T12">size_t</text:span><text:span text:style-name="T6"> index) {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T6"> (index &lt; </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">size</text:span><text:span text:style-name="T6">) {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="12"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T6"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T6"> {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="12"/></text:span><text:span text:style-name="T5">return</text:span><text:span text:style-name="T6"> 0;</text:span></text:p>
   <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T12">size_t</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T19">head</text:span><text:span text:style-name="T6">;</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T12">size_t</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T19">tail</text:span><text:span text:style-name="T6">;</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T12">size_t</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T19">size</text:span><text:span text:style-name="T6">;</text:span></text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T6">};</text:span><text:span text:style-name="T1">// CyclicBufferApi</text:span></text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T5">template</text:span><text:span text:style-name="T6">&lt;</text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T18">ObjectType</text:span><text:span text:style-name="T6">, </text:span><text:span text:style-name="T5">typename</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T18">Lock</text:span><text:span text:style-name="T6">, std::</text:span><text:span text:style-name="T12">size_t</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T18">Size</text:span><text:span text:style-name="T6">&gt; </text:span><text:span text:style-name="T5">class</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T12">CyclicBuffer</text:span><text:span text:style-name="T6">: </text:span><text:span text:style-name="T12">CyclicBufferApi</text:span><text:span text:style-name="T6"> {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T5">public</text:span><text:span text:style-name="T6">:</text:span></text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T21">CyclicBuffer</text:span>() :</text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="12"/>CyclicBufferApi(</text:span><text:span text:style-name="T18">Size</text:span><text:span text:style-name="T6">) {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">static_assert</text:span><text:span text:style-name="T6">(std::</text:span><text:span text:style-name="T12">numeric_limits</text:span><text:span text:style-name="T6">&lt;</text:span><text:span text:style-name="T18">ObjectType</text:span><text:span text:style-name="T6">&gt;::</text:span><text:span text:style-name="T19">is_integer</text:span><text:span text:style-name="T6">, </text:span><text:span text:style-name="T14">&quot;CyclicBuffer is intended to work only with integer types&quot;</text:span><text:span text:style-name="T6">);</text:span></text:p>
   <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P5"><text:s text:c="4"/><text:span text:style-name="T21">~CyclicBuffer</text:span>() {</text:p>
   <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T10">add</text:span><text:span text:style-name="T6">(</text:span><text:span text:style-name="T5">const</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T18">ObjectType</text:span><text:span text:style-name="T6"> object) {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T18">Lock</text:span><text:span text:style-name="T6">();</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T6"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="12"/></text:span><text:span text:style-name="T19">data</text:span><text:span text:style-name="T6">[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">tail</text:span><text:span text:style-name="T6">] = object;</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="12"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">tail</text:span><text:span text:style-name="T6"> = increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">tail</text:span><text:span text:style-name="T6">);</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T6"> {</text:span></text:p>
   <text:p text:style-name="P5"><text:s text:c="12"/>errorOverflow();</text:p>
   <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T5">void</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T10">remove</text:span><text:span text:style-name="T6">(</text:span><text:span text:style-name="T18">ObjectType</text:span><text:span text:style-name="T6"> &amp;object) {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T18">Lock</text:span><text:span text:style-name="T6">();</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/></text:span><text:span text:style-name="T5">if</text:span><text:span text:style-name="T6"> (!isEmpty()) {</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="12"/>object = </text:span><text:span text:style-name="T19">data</text:span><text:span text:style-name="T6">[</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">head</text:span><text:span text:style-name="T6">];</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="12"/></text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">head</text:span><text:span text:style-name="T6"> = </text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;increment(</text:span><text:span text:style-name="T5">this</text:span><text:span text:style-name="T6">-&gt;</text:span><text:span text:style-name="T19">head</text:span><text:span text:style-name="T6">);</text:span></text:p>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="8"/>} </text:span><text:span text:style-name="T5">else</text:span><text:span text:style-name="T6"> {</text:span></text:p>
   <text:p text:style-name="P5"><text:s text:c="12"/>errorUnderflow();</text:p>
   <text:p text:style-name="P5"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="P5"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T5">private</text:span><text:span text:style-name="T6">:</text:span></text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7"><text:span text:style-name="T6"><text:s text:c="4"/></text:span><text:span text:style-name="T18">ObjectType</text:span><text:span text:style-name="T6"> </text:span><text:span text:style-name="T19">data</text:span><text:span text:style-name="T6">[</text:span><text:span text:style-name="T18">Size</text:span><text:span text:style-name="T6"> + 1];</text:span></text:p>
   <text:p text:style-name="P8"><text:span text:style-name="T11">};</text:span><text:span text:style-name="T3">// class CyclicBuffer</text:span></text:p>
   <text:p text:style-name="Text_20_body">Note. Constructor of the base class CyclicBufferAPI is protected. Only a child of CyclicBufferAPI can be created by the application.</text:p>
   <text:p text:style-name="Text_20_body">Where C++ template can potentially cause object code duplication C code can lead to the source code duplication. Analyzing of the assembler and object code generated by the C/C++ compiler is very useful in locating of code responsible for object code duplication. For example, a post build utility can look for patterns in the object code which occur more than once and use map file to report the corresponding position in assembler. </text:p>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2319_977618933"/>Timers.<text:bookmark-end text:name="__RefHeading__2319_977618933"/></text:h>
   <text:p text:style-name="P16"/>
   <text:p text:style-name="Quotations">C++ is a write only, high-level assembler language.</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="First_20_line_20_indent">Timers are often a part of a real-time application. I want my timers API to have O(1) complexity. I am not looking for a framework which allows to start a timer for arbitrary period of time. I assume that all timeouts used in the system known at compilation time. I assume that number of different timeouts is small – less than 10. In the same system can coexist short and highly accurate timers and long timers where accuracy is less important. I want my timers framework to support priorities. I want to allow the application to choose the context which handles the timer expiration – interrupt, task, main loop or anything else.</text:p>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2321_977618933"/>Hardware.<text:bookmark-end text:name="__RefHeading__2321_977618933"/></text:h>
   <text:p text:style-name="Quotations">How many programmers does it take to change a light bulb? None - it&apos;s a hardware problem.</text:p>
   <text:p text:style-name="P15"/>
   <text:p text:style-name="First_20_line_20_indent">Embedded software accesses hardware via hardware registers. I will assume that there are three groups of registers – read and write registers, read only registers and write only registers. All registers are memory mapped – there is an address for every register. The software can access a register in the same way as it reads or writes a variable given the variable&apos;s address. In case of write only registers it is a custom to keep a shadow – variable in the data memory which contains the latest written to the write only register value. </text:p>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2758_977618933"/>ROM and RAM.<text:bookmark-end text:name="__RefHeading__2758_977618933"/></text:h>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2648_977618933"/>Data in ROM<text:bookmark-end text:name="__RefHeading__2648_977618933"/></text:h>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2650_977618933"/>Code in ROM<text:bookmark-end text:name="__RefHeading__2650_977618933"/></text:h>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Quotations">If at first you don&apos;t succeed; call it version 1.0. </text:p>
   <text:p text:style-name="Quotations">Programming is like sex, one mistake and you have to support it for the rest of your life. </text:p>
   <text:p text:style-name="Quotations">Asking from C++ programmers more content, less bloat is a bit unfair</text:p>
   <text:p text:style-name="Quotations">Polymorphism in C vs C++</text:p>
  </office:text>
 </office:body>
</office:document>