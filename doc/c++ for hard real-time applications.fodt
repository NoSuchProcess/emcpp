<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><meta:initial-creator>arkady </meta:initial-creator><meta:creation-date>2015-04-24T15:47:16.425999108</meta:creation-date><dc:date>2015-04-30T07:16:51.233508651</dc:date><dc:creator>arkady </dc:creator><meta:editing-duration>P3DT12H53M3S</meta:editing-duration><meta:editing-cycles>1276</meta:editing-cycles><meta:generator>LibreOffice/4.2.8.2$Linux_X86_64 LibreOffice_project/420m0$Build-2</meta:generator><meta:document-statistic meta:table-count="1" meta:image-count="0" meta:object-count="0" meta:page-count="36" meta:paragraph-count="916" meta:word-count="7080" meta:character-count="48779" meta:non-whitespace-character-count="39777"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">256434</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">33339</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">15759</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">11919</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">259540</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">256434</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">33338</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">272191</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">200</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">213796</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="Rsid" config:type="int">710052</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="OpenSymbol" svg:font-family="OpenSymbol" style:font-charset="x-symbol"/>
  <style:font-face style:name="arial" svg:font-family="arial, helvetica, clean, sans-serif"/>
  <style:font-face style:name="monospace" svg:font-family="monospace, sans-serif"/>
  <style:font-face style:name="Monospace1" svg:font-family="Monospace" style:font-family-generic="roman"/>
  <style:font-face style:name="FreeSans1" svg:font-family="FreeSans" style:font-family-generic="swiss"/>
  <style:font-face style:name="Monospace" svg:font-family="Monospace" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Droid Sans Fallback" svg:font-family="&apos;Droid Sans Fallback&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="FreeSans" svg:font-family="FreeSans" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:writing-mode="lr-tb" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Droid Sans Fallback" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.5in" style:writing-mode="lr-tb"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Droid Sans Fallback" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" style:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Droid Sans Fallback" style:font-family-asian="&apos;Droid Sans Fallback&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="FreeSans" style:font-family-complex="FreeSans" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0972in" style:contextual-spacing="false" fo:line-height="120%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.0835in" fo:margin-bottom="0.0835in" style:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Heading_20_1" style:display-name="Heading 1" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="1" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" style:contextual-spacing="false"/>
   <style:text-properties fo:font-size="130%" fo:font-weight="bold" style:font-size-asian="130%" style:font-weight-asian="bold" style:font-size-complex="130%" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Text_20_body_20_indent" style:display-name="Text body indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-left="0.1965in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Heading_20_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_20_body" style:default-outline-level="2" style:class="text">
   <style:paragraph-properties fo:margin-top="0.139in" fo:margin-bottom="0.0835in" style:contextual-spacing="false"/>
   <style:text-properties fo:font-size="115%" fo:font-weight="bold" style:font-size-asian="115%" style:font-weight-asian="bold" style:font-size-complex="115%" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="First_20_line_20_indent" style:display-name="First line indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0.1965in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="Hanging_20_indent" style:display-name="Hanging indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-left="0.3937in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="-0.1965in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="0in"/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Preformatted_20_Text" style:display-name="Preformatted Text" style:family="paragraph" style:parent-style-name="Standard" style:class="html"/>
  <style:style style:name="Quotations" style:family="paragraph" style:parent-style-name="Standard" style:class="html" style:master-page-name="">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="3in" fo:text-indent="0in" style:auto-text-indent="false" style:page-number="auto" fo:background-color="transparent" style:shadow="none">
    <style:tab-stops/>
    <style:background-image/>
   </style:paragraph-properties>
   <style:text-properties fo:font-style="italic" style:font-size-asian="10.5pt"/>
  </style:style>
  <style:style style:name="Title" style:family="paragraph" style:parent-style-name="Heading" style:class="chapter"/>
  <style:style style:name="Subtitle" style:family="paragraph" style:parent-style-name="Heading" style:class="chapter"/>
  <style:style style:name="Heading_20_3" style:display-name="Heading 3" style:family="paragraph" style:parent-style-name="Heading" style:class="text"/>
  <style:style style:name="Marginalia" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text"/>
  <style:style style:name="Header_20_right" style:display-name="Header right" style:family="paragraph" style:parent-style-name="Standard" style:class="extra"/>
  <style:style style:name="List_20_1" style:display-name="List 1" style:family="paragraph" style:parent-style-name="List" style:class="list"/>
  <style:style style:name="Numbering_20_1" style:display-name="Numbering 1" style:family="paragraph" style:parent-style-name="List" style:class="list"/>
  <style:style style:name="List_20_Indent" style:display-name="List Indent" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="text"/>
  <style:style style:name="Contents_20_Heading" style:display-name="Contents Heading" style:family="paragraph" style:parent-style-name="Heading" style:class="index">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="16pt" fo:font-weight="bold" style:font-size-asian="16pt" style:font-weight-asian="bold" style:font-size-complex="16pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="Contents_20_1" style:display-name="Contents 1" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Contents_20_2" style:display-name="Contents 2" style:family="paragraph" style:parent-style-name="Index" style:class="index">
   <style:paragraph-properties fo:margin-left="0.1965in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false" fo:text-indent="0in" style:auto-text-indent="false">
    <style:tab-stops>
     <style:tab-stop style:position="6.7283in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="Table_20_Contents" style:display-name="Table Contents" style:family="paragraph" style:parent-style-name="Standard" style:class="extra"/>
  <style:style style:name="Table_20_Heading" style:display-name="Table Heading" style:family="paragraph" style:parent-style-name="Table_20_Contents" style:class="extra"/>
  <style:style style:name="Bullet_20_Symbols" style:display-name="Bullet Symbols" style:family="text">
   <style:text-properties style:font-name="OpenSymbol" fo:font-family="OpenSymbol" style:font-charset="x-symbol" style:font-name-asian="OpenSymbol" style:font-family-asian="OpenSymbol" style:font-charset-asian="x-symbol" style:font-name-complex="OpenSymbol" style:font-family-complex="OpenSymbol" style:font-charset-complex="x-symbol"/>
  </style:style>
  <style:style style:name="Emphasis" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text">
   <style:text-properties fo:color="#000080" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="Index_20_Link" style:display-name="Index Link" style:family="text"/>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.3in" fo:text-indent="-0.3in" fo:margin-left="0.3in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.4in" fo:text-indent="-0.4in" fo:margin-left="0.4in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.5in" fo:text-indent="-0.5in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.6in" fo:text-indent="-0.6in" fo:margin-left="0.6in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.7in" fo:text-indent="-0.7in" fo:margin-left="0.7in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.8in" fo:text-indent="-0.8in" fo:margin-left="0.8in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.9in" fo:text-indent="-0.9in" fo:margin-left="0.9in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1in" fo:text-indent="-1in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.1in" fo:text-indent="-1.1in" fo:margin-left="1.1in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.2in" fo:text-indent="-1.2in" fo:margin-left="1.2in"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
  <style:default-page-layout>
   <style:page-layout-properties style:writing-mode="lr-tb" style:layout-grid-standard-mode="true"/>
  </style:default-page-layout>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="PIOUserInterface" style:family="table">
   <style:table-properties style:width="6.6875in" table:align="left"/>
  </style:style>
  <style:style style:name="PIOUserInterface.A" style:family="table-column">
   <style:table-column-properties style:column-width="0.8125in"/>
  </style:style>
  <style:style style:name="PIOUserInterface.B" style:family="table-column">
   <style:table-column-properties style:column-width="3.25in"/>
  </style:style>
  <style:style style:name="PIOUserInterface.C" style:family="table-column">
   <style:table-column-properties style:column-width="1.125in"/>
  </style:style>
  <style:style style:name="PIOUserInterface.D" style:family="table-column">
   <style:table-column-properties style:column-width="1.5in"/>
  </style:style>
  <style:style style:name="PIOUserInterface.A1" style:family="table-cell">
   <style:table-cell-properties fo:padding="0.0382in" fo:border-left="0.05pt solid #000000" fo:border-right="none" fo:border-top="0.05pt solid #000000" fo:border-bottom="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="PIOUserInterface.D1" style:family="table-cell">
   <style:table-cell-properties fo:padding="0.0382in" fo:border="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="PIOUserInterface.A2" style:family="table-cell">
   <style:table-cell-properties fo:padding="0.0382in" fo:border-left="0.05pt solid #000000" fo:border-right="none" fo:border-top="none" fo:border-bottom="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="PIOUserInterface.D2" style:family="table-cell">
   <style:table-cell-properties fo:padding="0.0382in" fo:border-left="0.05pt solid #000000" fo:border-right="0.05pt solid #000000" fo:border-top="none" fo:border-bottom="0.05pt solid #000000"/>
  </style:style>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties officeooo:paragraph-rsid="00078fed"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" officeooo:paragraph-rsid="00036e21" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
   <style:text-properties fo:color="#000000" style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P12" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="0in" style:auto-text-indent="false" style:text-autospace="none"/>
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P14" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="P15" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P16" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P17" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:font-size="10pt" officeooo:paragraph-rsid="00060882" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P18" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties officeooo:rsid="00036e21" officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P19" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P20" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P21" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties officeooo:paragraph-rsid="00060882"/>
  </style:style>
  <style:style style:name="P22" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P23" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" officeooo:paragraph-rsid="00036e21" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="P24" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P25" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties officeooo:rsid="00036e21" officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P26" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:color="#000000" style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="P27" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:text-align="start" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P28" style:family="paragraph" style:parent-style-name="Quotations">
   <style:text-properties officeooo:paragraph-rsid="00040a3a"/>
  </style:style>
  <style:style style:name="P29" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:text-align="end" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P30" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:text-align="end" style:justify-single-word="false"/>
   <style:text-properties officeooo:rsid="0004fc0d"/>
  </style:style>
  <style:style style:name="P31" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="11.0102in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P32" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="11.0102in" style:auto-text-indent="false"/>
   <style:text-properties officeooo:paragraph-rsid="00040a3a"/>
  </style:style>
  <style:style style:name="P33" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:margin-left="11in" fo:margin-right="0in" fo:text-align="start" style:justify-single-word="false" fo:text-indent="11in" style:auto-text-indent="false">
    <style:tab-stops/>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P34" style:family="paragraph" style:parent-style-name="Quotations">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="15.3752in" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P35" style:family="paragraph" style:parent-style-name="Contents_20_2">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P36" style:family="paragraph" style:parent-style-name="Contents_20_1">
   <style:paragraph-properties>
    <style:tab-stops>
     <style:tab-stop style:position="6.9252in" style:type="right" style:leader-style="dotted" style:leader-text="."/>
    </style:tab-stops>
   </style:paragraph-properties>
  </style:style>
  <style:style style:name="P37" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="00034324"/>
  </style:style>
  <style:style style:name="P38" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="00036e21" officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P39" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="00036e21" officeooo:paragraph-rsid="0004fc0d"/>
  </style:style>
  <style:style style:name="P40" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P41" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="00040a3a"/>
  </style:style>
  <style:style style:name="P42" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="0004fc0d"/>
  </style:style>
  <style:style style:name="P43" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="0004fc0d" officeooo:paragraph-rsid="0004fc0d"/>
  </style:style>
  <style:style style:name="P44" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="00060882"/>
  </style:style>
  <style:style style:name="P45" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="00060882"/>
  </style:style>
  <style:style style:name="P46" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="00060882" officeooo:paragraph-rsid="00060882"/>
  </style:style>
  <style:style style:name="P47" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="000647a9" officeooo:paragraph-rsid="000647a9"/>
  </style:style>
  <style:style style:name="P48" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:text-properties officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P49" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:text-properties officeooo:paragraph-rsid="00040a3a"/>
  </style:style>
  <style:style style:name="P50" style:family="paragraph" style:parent-style-name="First_20_line_20_indent">
   <style:text-properties officeooo:paragraph-rsid="00034324"/>
  </style:style>
  <style:style style:name="P51" style:family="paragraph" style:parent-style-name="First_20_line_20_indent">
   <style:text-properties officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P52" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P53" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:rsid="00036e21" officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P54" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P55" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P56" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P57" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:rsid="0004fc0d" officeooo:paragraph-rsid="00060882"/>
  </style:style>
  <style:style style:name="P58" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P59" style:family="paragraph" style:parent-style-name="Title">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P60" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:text-properties officeooo:rsid="0004fc0d" officeooo:paragraph-rsid="0004fc0d"/>
  </style:style>
  <style:style style:name="P61" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:text-properties officeooo:rsid="0004fc0d" officeooo:paragraph-rsid="00060882"/>
  </style:style>
  <style:style style:name="P62" style:family="paragraph" style:parent-style-name="Table_20_Contents">
   <style:text-properties officeooo:rsid="0004fc0d" officeooo:paragraph-rsid="0004fc0d"/>
  </style:style>
  <style:style style:name="P63" style:family="paragraph" style:parent-style-name="Title">
   <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="P64" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="00036e21" officeooo:paragraph-rsid="0004fc0d"/>
  </style:style>
  <style:style style:name="P65" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="000a5da0" officeooo:paragraph-rsid="000a5da0"/>
  </style:style>
  <style:style style:name="P66" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:paragraph-rsid="000a5da0"/>
  </style:style>
  <style:style style:name="P67" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties officeooo:rsid="00060882" officeooo:paragraph-rsid="000ad5a4"/>
  </style:style>
  <style:style style:name="P68" style:family="paragraph" style:parent-style-name="Heading_20_1" style:list-style-name=""/>
  <style:style style:name="P69" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P70" style:family="paragraph" style:parent-style-name="Heading_20_1">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:paragraph-rsid="00036e21"/>
  </style:style>
  <style:style style:name="P71" style:family="paragraph" style:parent-style-name="Heading_20_2" style:list-style-name=""/>
  <style:style style:name="P72" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:text-properties officeooo:rsid="0004fc0d" officeooo:paragraph-rsid="0004fc0d"/>
  </style:style>
  <style:style style:name="P73" style:family="paragraph" style:parent-style-name="Heading_20_2" style:list-style-name="">
   <style:text-properties officeooo:rsid="0004fc0d" officeooo:paragraph-rsid="00060882"/>
  </style:style>
  <style:style style:name="P74" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P75" style:family="paragraph" style:parent-style-name="Heading_20_2">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties officeooo:rsid="0004fc0d" officeooo:paragraph-rsid="00060882"/>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties fo:color="#3f7f5f"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties fo:color="#3f7f5f" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:color="#3f7f5f" style:font-name-asian="Monospace" style:font-name-complex="Monospace"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" officeooo:rsid="00060882" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T6" style:family="text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace1" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T7" style:family="text">
   <style:text-properties fo:color="#7f0055" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T8" style:family="text">
   <style:text-properties fo:color="#7f0055" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T9" style:family="text">
   <style:text-properties fo:color="#7f0055" style:font-name="Monospace" fo:font-size="10pt" fo:font-weight="bold" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-weight-asian="bold" style:font-name-complex="Monospace" style:font-size-complex="10pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T10" style:family="text">
   <style:text-properties fo:color="#000000"/>
  </style:style>
  <style:style style:name="T11" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1"/>
  </style:style>
  <style:style style:name="T12" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T13" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" officeooo:rsid="0004fc0d" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T14" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T15" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" officeooo:rsid="0004fc0d" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T16" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="none" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T17" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T18" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-size="10pt" fo:font-style="italic" style:font-size-asian="10pt" style:font-style-asian="italic"/>
  </style:style>
  <style:style style:name="T19" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace1" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T20" style:family="text">
   <style:text-properties fo:color="#000000" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T21" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name-asian="Monospace" style:font-name-complex="Monospace"/>
  </style:style>
  <style:style style:name="T22" style:family="text">
   <style:text-properties fo:color="#000000" style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="T23" style:family="text">
   <style:text-properties fo:color="#000000" officeooo:rsid="00036e21"/>
  </style:style>
  <style:style style:name="T24" style:family="text">
   <style:text-properties fo:color="#000000" officeooo:rsid="00060882"/>
  </style:style>
  <style:style style:name="T25" style:family="text">
   <style:text-properties fo:color="#000000" officeooo:rsid="000ad5a4"/>
  </style:style>
  <style:style style:name="T26" style:family="text">
   <style:text-properties fo:color="#005032"/>
  </style:style>
  <style:style style:name="T27" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace1"/>
  </style:style>
  <style:style style:name="T28" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T29" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace1" fo:font-size="10pt" officeooo:rsid="0004fc0d" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T30" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T31" style:family="text">
   <style:text-properties fo:color="#005032" style:font-name="Monospace" fo:font-size="10pt" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-name-complex="Monospace" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="T32" style:family="text">
   <style:text-properties fo:color="#2a00ff"/>
  </style:style>
  <style:style style:name="T33" style:family="text">
   <style:text-properties fo:color="#2a00ff" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T34" style:family="text">
   <style:text-properties fo:color="#2a00ff" style:font-name="Monospace1" fo:font-size="10pt" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T35" style:family="text">
   <style:text-properties fo:color="#642880" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T36" style:family="text">
   <style:text-properties fo:color="#644632" style:font-name="Monospace1" fo:font-size="10pt" fo:font-weight="bold" style:font-size-asian="10pt" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T37" style:family="text">
   <style:text-properties fo:color="#644632" style:font-name="Monospace1" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T38" style:family="text">
   <style:text-properties fo:color="#644632" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T39" style:family="text">
   <style:text-properties fo:color="#644632" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T40" style:family="text">
   <style:text-properties fo:color="#644632" style:font-name="Monospace" fo:font-size="10pt" fo:font-weight="bold" style:font-name-asian="Monospace" style:font-size-asian="10pt" style:font-weight-asian="bold" style:font-name-complex="Monospace" style:font-size-complex="10pt" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T41" style:family="text">
   <style:text-properties fo:color="#0000c0"/>
  </style:style>
  <style:style style:name="T42" style:family="text">
   <style:text-properties fo:color="#0000c0" style:font-name="Monospace1" fo:font-size="10pt" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T43" style:family="text">
   <style:text-properties fo:color="#0000c0" style:font-name="Monospace1" fo:font-size="10pt" officeooo:rsid="00040a3a" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T44" style:family="text">
   <style:text-properties fo:color="#0000c0" style:font-name="Monospace1" fo:font-size="10pt" officeooo:rsid="00078fed" style:font-size-asian="10pt"/>
  </style:style>
  <style:style style:name="T45" style:family="text">
   <style:text-properties fo:color="#0000c0" style:font-name="Monospace1" fo:font-size="10pt" fo:font-style="italic" style:font-size-asian="10pt" style:font-style-asian="italic"/>
  </style:style>
  <style:style style:name="T46" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="T47" style:family="text">
   <style:text-properties officeooo:rsid="00034324"/>
  </style:style>
  <style:style style:name="T48" style:family="text">
   <style:text-properties officeooo:rsid="00036e21"/>
  </style:style>
  <style:style style:name="T49" style:family="text">
   <style:text-properties style:font-name="Monospace1"/>
  </style:style>
  <style:style style:name="T50" style:family="text">
   <style:text-properties style:font-name="Monospace1" fo:font-weight="bold" style:font-weight-asian="bold"/>
  </style:style>
  <style:style style:name="T51" style:family="text">
   <style:text-properties officeooo:rsid="00040a3a"/>
  </style:style>
  <style:style style:name="T52" style:family="text">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="T53" style:family="text">
   <style:text-properties officeooo:rsid="0004fc0d"/>
  </style:style>
  <style:style style:name="T54" style:family="text">
   <style:text-properties officeooo:rsid="00060882"/>
  </style:style>
  <style:style style:name="T55" style:family="text">
   <style:text-properties officeooo:rsid="000647a9"/>
  </style:style>
  <style:style style:name="T56" style:family="text">
   <style:text-properties officeooo:rsid="0006a17d"/>
  </style:style>
  <style:style style:name="T57" style:family="text">
   <style:text-properties fo:font-variant="normal" fo:text-transform="none" fo:color="#a21f11" style:font-name="arial" fo:font-size="9.75pt" fo:letter-spacing="normal" fo:font-style="normal" fo:font-weight="bold"/>
  </style:style>
  <style:style style:name="T58" style:family="text">
   <style:text-properties officeooo:rsid="000a5da0"/>
  </style:style>
  <style:style style:name="T59" style:family="text">
   <style:text-properties officeooo:rsid="000ad5a4"/>
  </style:style>
  <style:style style:name="Sect1" style:family="section">
   <style:section-properties fo:background-color="transparent" style:editable="false">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
    <style:background-image/>
   </style:section-properties>
  </style:style>
  <style:style style:name="Sect2" style:family="section">
   <style:section-properties style:editable="false">
    <style:columns fo:column-count="1" fo:column-gap="0in"/>
   </style:section-properties>
  </style:style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="8.5in" fo:page-height="11in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.7874in" fo:margin-bottom="0.7874in" fo:margin-left="0.7874in" fo:margin-right="0.7874in" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="44" style:layout-grid-base-height="0.2165in" style:layout-grid-ruby-height="0in" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="true" style:layout-grid-display="true" style:layout-grid-base-width="0.1457in" style:layout-grid-snap-to="true" style:layout-grid-snap-to-characters="true" style:footnote-max-height="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
   </text:sequence-decls>
   <text:p text:style-name="P63"><text:bookmark-start text:name="__RefHeading__2311_977618933"/>C++ <text:span text:style-name="T56">for embedded systems</text:span>.<text:bookmark-end text:name="__RefHeading__2311_977618933"/></text:p>
   <text:p text:style-name="Title"/>
   <text:p text:style-name="P59"/>
   <text:table-of-content text:style-name="Sect1" text:protected="true" text:name="Table of Contents1">
    <text:table-of-content-source text:outline-level="10" text:use-index-marks="false" text:use-index-source-styles="true">
     <text:index-title-template text:style-name="Contents_20_Heading">Table of Contents</text:index-title-template>
     <text:table-of-content-entry-template text:outline-level="1" text:style-name="Contents_20_1">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="2" text:style-name="Contents_20_2">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="3" text:style-name="Contents_20_3">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="4" text:style-name="Contents_20_4">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="5" text:style-name="Contents_20_5">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="6" text:style-name="Contents_20_6">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="7" text:style-name="Contents_20_7">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="8" text:style-name="Contents_20_8">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="9" text:style-name="Contents_20_9">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:table-of-content-entry-template text:outline-level="10" text:style-name="Contents_20_10">
      <text:index-entry-link-start text:style-name="Index_20_Link"/>
      <text:index-entry-chapter/>
      <text:index-entry-text/>
      <text:index-entry-tab-stop style:type="right" style:leader-char="."/>
      <text:index-entry-page-number/>
      <text:index-entry-link-end/>
     </text:table-of-content-entry-template>
     <text:index-source-styles text:outline-level="1">
      <text:index-source-style text:style-name="Heading_20_2"/>
     </text:index-source-styles>
     <text:index-source-styles text:outline-level="2">
      <text:index-source-style text:style-name="Heading_20_3"/>
     </text:index-source-styles>
    </text:table-of-content-source>
    <text:index-body>
     <text:index-title text:style-name="Sect2" text:name="Table of Contents1_Head">
      <text:p text:style-name="Contents_20_Heading">Table of Contents</text:p>
     </text:index-title>
     <text:p text:style-name="P36"><text:a xlink:type="simple" xlink:href="#__RefHeading__2313_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Introduction.<text:tab/>3</text:a></text:p>
     <text:p text:style-name="P36"><text:a xlink:type="simple" xlink:href="#__RefHeading__13919_1660174531" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">C++ code style.<text:tab/>4</text:a></text:p>
     <text:p text:style-name="P36"><text:a xlink:type="simple" xlink:href="#__RefHeading__2315_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Mutual exclusion.<text:tab/>4</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__2531_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Simple lock<text:tab/>4</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__2533_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Template based lock.<text:tab/>6</text:a></text:p>
     <text:p text:style-name="P36"><text:a xlink:type="simple" xlink:href="#__RefHeading__2317_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Containers.<text:tab/>8</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__2535_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Cyclic buffer.<text:tab/>9</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__2537_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Cyclic buffer – C alternative.<text:tab/>13</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__2646_977618933" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Use of C++ templates in the embedded systems.<text:tab/>16</text:a></text:p>
     <text:p text:style-name="P36"><text:a xlink:type="simple" xlink:href="#__RefHeading__2948_1515059145" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Memory Management.<text:tab/>18</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__2950_1515059145" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Stack.<text:tab/>18</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__13921_1660174531" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Memory Pool.<text:tab/>21</text:a></text:p>
     <text:p text:style-name="P36"><text:a xlink:type="simple" xlink:href="#__RefHeading__6684_1272265156" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Hardware.<text:tab/>27</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__8080_1329019087" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">I/O access in C.<text:tab/>28</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__8082_1329019087" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">I/O access in C++.<text:tab/>30</text:a></text:p>
     <text:p text:style-name="P36"><text:a xlink:type="simple" xlink:href="#__RefHeading__7726_2007975351" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">Code ROM and data RAM.<text:tab/>33</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__7728_2007975351" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">C++ Initialized data.<text:tab/>34</text:a></text:p>
     <text:p text:style-name="P35"><text:a xlink:type="simple" xlink:href="#__RefHeading__7954_2007975351" text:style-name="Index_20_Link" text:visited-style-name="Index_20_Link">ROM patching.<text:tab/>35</text:a></text:p>
    </text:index-body>
   </text:table-of-content>
   <text:h text:style-name="P68" text:outline-level="1"/>
   <text:h text:style-name="P54" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2313_977618933"/>Introduction.<text:bookmark-end text:name="__RefHeading__2313_977618933"/></text:h>
   <text:p text:style-name="Quotations">I&apos;ve come to the conclusion that any programmer that would prefer the project to be in C++ over C is likely a programmer that I really would prefer to piss off, so that he doesn&apos;t come and screw up any project I&apos;m involved with.</text:p>
   <text:p text:style-name="P30">Linus Torvalds</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="P66">This book is intended for firmware developers who <text:span text:style-name="T51">mainly </text:span>use C language. I assume that <text:span text:style-name="T51">the</text:span> reader is comfortable with ARM or Intel assembly language <text:span text:style-name="T53">and has working knowledge of the C++ syntax</text:span>. In this book I am trying to give examples of C++ code in situations where, arguably, C is not a perfect <text:span text:style-name="T51">tool </text:span>for the task. Many C++ code examples come with snippets of <text:span text:style-name="T54">the </text:span>resulting assembly. The examples of code are constructed in a way that allows immediate reuse in a real world application. Examples cover topics like memory and speed optimizations, organizing arrays, FIFOs, mutual exclusion in <text:span text:style-name="T58">a</text:span> multi-task environment, direct access to the hardware. <text:span text:style-name="T58">The book addresses issues like code bloat and hidden performance costs of C++. </text:span></text:p>
   <text:p text:style-name="P66">In all examples I assume that <text:span text:style-name="T54">the </text:span>C++ compiler supports version 11 of the language. One example of such compiler is GNUC 4.8. Availability of <text:span text:style-name="T54">the </text:span>C++ compiler supporting version 11 for a specific hardware is not required and most code examples can be rewritten for older C++ compilers. <text:span text:style-name="T48">Through the book I demonstrate some of the less known features of the C++11 standard like type traits, static assertion, constant expressions.</text:span></text:p>
   <text:p text:style-name="Text_20_body">Any problem can be solved in multiple ways. Where it is possible and makes sense I provide an alternative implementation in C and compare performance of C and C++ solutions.</text:p>
   <text:p text:style-name="P41"/>
   <text:h text:style-name="P55" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__13919_1660174531"/><text:span text:style-name="T48">C++ code style</text:span>.<text:bookmark-end text:name="__RefHeading__13919_1660174531"/></text:h>
   <text:p text:style-name="Quotations">#define AND <text:s/>&amp;&amp; </text:p>
   <text:p text:style-name="Quotations">#define OR <text:s text:c="2"/>|| </text:p>
   <text:p text:style-name="Quotations">#define EQ <text:s text:c="2"/>==</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T48">I am doing my best to follow consistent C/C++ code style in all source code examples. </text:span>In <text:span text:style-name="T48">this book I am not placing curly brackets on a separate line. Please, do not send me hate mail. The only reason is to make the code snippets shorter. Shorter code has better chance to fit the smaller e-readers displays. There is no comments in the code itself for the same reason. Hopefully lack of comments is compensated by the interspersed explanations. I am using camelcase name convention. Types and classes names start with uppercase, variables start with lower case, constants are all upper case with the underscore delimiter. </text:span></text:p>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2315_977618933"/>Mutual exclusion.<text:bookmark-end text:name="__RefHeading__2315_977618933"/></text:h>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2531_977618933"/>Simple lock<text:bookmark-end text:name="__RefHeading__2531_977618933"/></text:h>
   <text:p text:style-name="Quotations">The great thing about Object Oriented code is that it can make small, simple problems look like large, complex ones.</text:p>
   <text:p text:style-name="P34"/>
   <text:p text:style-name="P44">In the multi-task environment threads and interrupts can concurrently read and write data objects. I can use different tools for synchronization of access to the data between different contexts. Among available for me tools are semaphore, mutex, disable all interrupts, disable some interrupt, disable operating system scheduler, spin locks. When I write a wrapper around API provided by my real-time operating system or by <text:span text:style-name="T54">the </text:span>hardware I want the wrapper to be as thin as possible. Usually I measure the overhead of the wrapper by <text:span text:style-name="T54">a </text:span>number of assembly instructions. Number of instructions <text:span text:style-name="T54">a </text:span>provide good approximation of <text:span text:style-name="T54">the </text:span>CPU cycles or execution time. </text:p>
   <text:p text:style-name="P44">I am starting from a code snippet which creates and calls a dummy lock object.</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> LockDummy {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P8"><text:s text:c="4"/>LockDummy() {</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T33">&quot;Locked context&quot;</text:span><text:span text:style-name="T12"> &lt;&lt; endl;</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P8"><text:s text:c="4"/>~LockDummy() {</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T33">&quot;Lock is freed&quot;</text:span><text:span text:style-name="T12"> &lt;&lt; endl;</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P8">};</text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P40"><text:span text:style-name="T48">In the following usage example the</text:span> C++ specifier “auto” tells to the compiler to automatically supply <text:span text:style-name="T54">the </text:span>correct type – C++11 compiler knows to deduct types of variables in some situations. For example, <text:soft-page-break/>C++ compiler can figure out the return type of <text:span text:style-name="T54">the </text:span>left side of <text:span text:style-name="T54">an </text:span>assignment or return type of a function. </text:p>
   <text:p text:style-name="P40">In the function main() compiler will call output function two times and will not add any other code. The lock is released - destructor ~LockDummy <text:span text:style-name="T48">gets</text:span> called – when the scope of the variable myDummyLock ends. The scope could be a while loop. I do not have to care to call “unlock” before each and every return from the function. C++ compiler makes sure that <text:span text:style-name="T48">the </text:span>destructor is always called and called exactly once. This convenient service comes without any performance overhead. Output of <text:span text:style-name="T54">the following code </text:span>code is going to be Locked context, Lock is freed.</text:p>
   <text:p text:style-name="P3"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> main() {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">#if</text:span><text:span text:style-name="T12"> (__cplusplus &gt;= 201103) </text:span><text:span text:style-name="T2">// use &quot;auto&quot; if C++11 or better</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">auto</text:span><text:span text:style-name="T12"> myDummyLock = LockDummy();</text:span></text:p>
   <text:p text:style-name="P10">#else</text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>LockDummy myDummyLock = LockDummy();</text:p>
   <text:p text:style-name="P10">#endif</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> 0;</text:span></text:p>
   <text:p text:style-name="P8">}</text:p>
   <text:p text:style-name="Text_20_body">I want to stress this idea by another example. In the following code I set a scope around the declaration of the lock variable. I can drop a declaration of <text:span text:style-name="T48">the </text:span>variable myDummyLock – the constructor and destructor of the class are going to be called anyway. </text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> main() {</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>{</text:p>
   <text:p text:style-name="P8"><text:s text:c="8"/>LockDummy();</text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T33">&quot;End of main&quot;</text:span><text:span text:style-name="T12"> &lt;&lt; endl;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> 0;</text:span></text:p>
   <text:p text:style-name="P8">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:h text:style-name="P71" text:outline-level="2"/>
   <text:h text:style-name="P56" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2533_977618933"/>Template based lock.<text:bookmark-end text:name="__RefHeading__2533_977618933"/></text:h>
   <text:p text:style-name="Quotations">C++: Hard to learn and built to stay that way.</text:p>
   <text:p text:style-name="P27"/>
   <text:p text:style-name="Text_20_body">My second lock is <text:span text:style-name="T54">a </text:span>more realistic <text:span text:style-name="T54">one </text:span>and does some work – a lock which disables a hardware interrupt. I assume that there is an API which disables and enables an interrupt. I am refactoring the original lock code a little bit. First of all I use a template – a feature of C++ that allows to declare a class which operates with generic types. I am going to reuse the code in the template Lock for different synchronization objects. Code in the template Lock can manipulate any structure or class which implement<text:span text:style-name="T48">s</text:span> two public methods - static methods get() and release(). I carefully avoid polymorphism here – I do not require synchronization objects to belong to the same hierarchy of classes. Wrapper around disable/enable interrupts API – likely write<text:span text:style-name="T48">s</text:span> to the hardware - is not going to be <text:span text:style-name="T48">a </text:span>child/friend/parent/relative/<text:span text:style-name="T54">derivation</text:span> of a wrapper for <text:span text:style-name="T48">the </text:span>operating system semaphore. </text:p>
   <text:p text:style-name="Text_20_body">This is how the API which disables and enables interrupts looks like:</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">interruptDisable</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12">) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T33">&quot;Disable&quot;</text:span><text:span text:style-name="T12"> &lt;&lt; </text:span><text:span text:style-name="T35">endl</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P8">}</text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">interruptEnable</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12">) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T33">&quot;Enable&quot;</text:span><text:span text:style-name="T12"> &lt;&lt; </text:span><text:span text:style-name="T35">endl</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P8">}</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T48">I am </text:span>describing <text:span text:style-name="T48">a </text:span>synchronization object. The class implements two methods - “get” and “release”. Both methods are “inline” which helps the optimizer to decide if calls to the methods should be substituted by the methods code. The end effect is going to be similar to using a macro definition in C. Default constructor <text:span text:style-name="T48">in the class SynchroObject </text:span>is private - I do not want any objects of this type <text:span text:style-name="T48">in the application</text:span>. <text:span text:style-name="T48">My C++ compiler so far did not add any object code to my executable file.</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">SynchroObject</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">SynchroObject</text:span><text:span text:style-name="T12">() {};</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">get</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="8"/>interruptDisable();</text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">release</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="8"/>interruptEnable();</text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P8">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52">Template class Lock can manipulate any type of synchronization objects which provide get/release API. All methods of the template class Lock are “inline”. C++ compiler is not going to add <text:span text:style-name="T48">any </text:span>functions to the object code, but instead <text:span text:style-name="T48">will </text:span>replace the calls to the Lock methods by the code of get/release from the synchronization object. </text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Mutex</text:span><text:span text:style-name="T12">&gt; </text:span><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">Lock</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">Lock</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T36">Mutex</text:span><text:span text:style-name="T12">::get();</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">~Lock</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T36">Mutex</text:span><text:span text:style-name="T12">::release();</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P8">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="Text_20_body">Declare a new type <text:span text:style-name="T53">My</text:span>Lock which uses my SynchroObject to disable/enable interrupts. <text:span text:style-name="T48">Still there is no additional data or code in my executable besides calls to the interrupt enable and interrupt disable API.</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">typedef</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">Lock</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T28">SynchroObject</text:span><text:span text:style-name="T12">&gt; </text:span><text:span text:style-name="T29">MyL</text:span><text:span text:style-name="T28">ock</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="Text_20_body">Output of main() is going to be two words: Disable, Enable</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">main</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>{</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T29">MyLock</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> 0;</text:span></text:p>
   <text:p text:style-name="P8">}</text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="P40">Overhead of the wrapper <text:span text:style-name="T48">around the </text:span>functions which disable and enable interrupts is exactly zero. Indeed if I check the disassembly I will see two calls to the print function in the main routine and nothing else. I got some C++ code which gets optimized to nothing. What did I gain? <text:span text:style-name="T48">What is an added value? </text:span></text:p>
   <text:p text:style-name="P40"><text:span text:style-name="T48">The code does not allow me to</text:span> leave out calling enable interrupts after I called disable <text:span text:style-name="T48">interrupt</text:span>. No matter how many return points or breaks out of <text:span text:style-name="T54">a </text:span>loop my function has C++ compiler ensures that <text:span text:style-name="T48">the </text:span>function interruptEnable is called exactly once. I will return to <text:span text:style-name="T48">the </text:span>synchronization objects later in this book. </text:p>
   <text:h text:style-name="P68" text:outline-level="1"/>
   <text:h text:style-name="P54" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2317_977618933"/>Containers.<text:bookmark-end text:name="__RefHeading__2317_977618933"/></text:h>
   <text:p text:style-name="Quotations">When your hammer is C++, everything begins to look like a thumb.</text:p>
   <text:p text:style-name="P27"/>
   <text:p text:style-name="Text_20_body">C++ is all about containers. Standard template library (STL) contains <text:span text:style-name="T54">a </text:span>lot of very smart and convenient code dealing with vectors, stacks, queues, hash tables, <text:span text:style-name="T48">trees</text:span> and many other types of <text:span text:style-name="T48">dynamic and static </text:span>data storage. Unfortunately a firmware developer frequently needs something <text:span text:style-name="T48">very different</text:span>. <text:span text:style-name="T48">In some cases high performance and small code/data footprint should coexist in one application. </text:span>In this chapter I will demonstrate a container which makes sense in a <text:span text:style-name="T59">an embedded</text:span> environment with limited resources. <text:span text:style-name="T48">The API should </text:span>be reentrant and allow safe concurrent access. <text:span text:style-name="T48">The </text:span>performance of <text:span text:style-name="T48">the </text:span>container <text:span text:style-name="T59">is going </text:span>to be at least not worse than a C alternative. <text:span text:style-name="T48">A</text:span>ll my allocations <text:span text:style-name="T48">are going </text:span>to be static <text:span text:style-name="T48">and done at build time </text:span>– I will deal with <text:span text:style-name="T48">the </text:span>dynamic allocation later in this book. </text:p>
   <text:h text:style-name="P71" text:outline-level="2"/>
   <text:h text:style-name="P56" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2535_977618933"/>Cyclic buffer.<text:bookmark-end text:name="__RefHeading__2535_977618933"/></text:h>
   <text:p text:style-name="Text_20_body">My first example is going to be a cyclic buffer. A “producer” adds objects to the “tail” of the cyclic buffer and <text:span text:style-name="T59">a </text:span>“consumer” pulls the objects from the “head” of the cyclic buffer. Example of a producer can be an interrupt routine which gets characters from <text:span text:style-name="T59">an</text:span> UART <text:span text:style-name="T59">device </text:span>(serial port). <text:span text:style-name="T54">A c</text:span>onsumer can be a function called from <text:span text:style-name="T54">the</text:span> main loop which handles commands arriving from the UART. My CyclicBuffer class is a template class which should help the optimizer to generate the most efficient code possible for <text:span text:style-name="T54">the </text:span>given integer type and CPU architecture.</text:p>
   <text:p text:style-name="P22"><text:span text:style-name="T7">template</text:span><text:span text:style-name="T10">&lt;</text:span><text:span text:style-name="T7">typename</text:span><text:span text:style-name="T10"> </text:span><text:span text:style-name="T38">ObjectType</text:span><text:span text:style-name="T10">, </text:span><text:span text:style-name="T7">typename</text:span><text:span text:style-name="T10"> </text:span><text:span text:style-name="T38">Lock</text:span><text:span text:style-name="T10">, std::</text:span><text:span text:style-name="T26">size_t</text:span><text:span text:style-name="T10"> </text:span><text:span text:style-name="T38">Size</text:span><text:span text:style-name="T10">&gt;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">CyclicBufferSimple</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">CyclicBufferSimple</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">~CyclicBufferSimple</text:span><text:span text:style-name="T12">() {}</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">add</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12"> object);</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">remove</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12"> &amp;object);</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">isEmpty</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">isFull</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T4">private</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">increment</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> index);</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">errorOverflow</text:span><text:span text:style-name="T12">() {}</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">errorUnderflow</text:span><text:span text:style-name="T12">() {}</text:span></text:p>
   <text:p text:style-name="P5"/>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">data</text:span><text:span text:style-name="T12">[</text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12"> + 1];</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P8">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52"><text:span text:style-name="T10">The CyclickBufferSimple constructor will fail the build if the application attempts to store in the buffer anything but integer. </text:span><text:span text:style-name="T23">Storage for </text:span><text:span text:style-name="T24">the </text:span><text:span text:style-name="T23">objects larger than size of integer on the given CPU architecture should probably have </text:span><text:span text:style-name="T25">a </text:span><text:span text:style-name="T23">different API. </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">, std::</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::CyclicBufferSimple</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#if</text:span><text:span text:style-name="T12"> (__cplusplus &gt;= 201103)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">static_assert</text:span><text:span text:style-name="T12">(std::</text:span><text:span text:style-name="T28">numeric_limits</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12">&gt;::</text:span><text:span text:style-name="T42">is_integer</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T33">&quot;CyclicBuffer is intended to work only with integer types&quot;</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#elif</text:span><text:span text:style-name="T12"> defined(__GNUC____)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">__attribute__</text:span><text:span text:style-name="T12">((unused)) ObjectType val1 = 1;</text:span></text:p>
   <text:p text:style-name="P14">#else</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> ObjectType val1;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>*(&amp;val1) = 1;</text:p>
   <text:p text:style-name="P14">#endif</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12"> = 0;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T48">There are two </text:span>methods which return state of the buffer</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">, std::</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::isEmpty</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res = (</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> == </text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">, std::</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::isFull</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> tail = increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res = (</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> == tail);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body">A method <text:span text:style-name="T48">which knows to handle wrap around of the buffer index</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">, std::</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::increment</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> index) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (index &lt; </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (index + 1);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> 0;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52">Add/remove API of the cyclic buffer:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">, std::</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::add</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12"> object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">data</text:span><text:span text:style-name="T12">[</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12"> = increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">true</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>errorOverflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">false</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">, std::</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">CyclicBufferSimple&lt;ObjectType, Lock, Size&gt;::remove</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12"> &amp;object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (!isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>object = </text:span><text:span text:style-name="T42">data</text:span><text:span text:style-name="T12">[</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12">];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> = </text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">true</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>errorUnderflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">false</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="P18"/>
   <text:p text:style-name="Text_20_body">Instantiate a new type - lock which does nothing</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">typedef</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">Lock</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T28">SynchroObjectDummy</text:span><text:span text:style-name="T12">&gt; </text:span><text:span text:style-name="T28">LockDummy</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body">Following function returns <text:span text:style-name="T54">a </text:span>number of elements in the cyclic buffer. Compiler will fail if the value can not be calculated <text:span text:style-name="T54">at</text:span> <text:span text:style-name="T54">the build</text:span> time.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">constexpr</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">calculateCyclicBufferSize</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> 10;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T48">C</text:span>reate an object of class CyclicBuffer which deals with unsigned 8 bits integers</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">CyclicBufferSimple</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T28">LockDummy</text:span><text:span text:style-name="T12">, calculateCyclicBufferSize()&gt; myCyclicBuffer;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52"><text:span text:style-name="T48">In the usage example there is </text:span>a range loop from <text:span text:style-name="T54">the </text:span>C++11 <text:span text:style-name="T48">standard. Main function will print numbers 1, 3, 11</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T6">int</text:span><text:span text:style-name="T49"> </text:span><text:span text:style-name="T50">main</text:span><text:span text:style-name="T49">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">for</text:span><text:span text:style-name="T12"> (</text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> i : { 1, 3, 11 }) {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>myCyclicBuffer.add(i);</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12"> val;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">while</text:span><text:span text:style-name="T12"> (myCyclicBuffer.remove(val)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>cout &lt;&lt; (</text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12">) val &lt;&lt; </text:span><text:span text:style-name="T35">endl</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> 0;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="P19"/>
   <text:p text:style-name="Text_20_body">Let&apos;s examine the assembly generated by the GNUC compiler for <text:span text:style-name="T54">the </text:span>Intel <text:span text:style-name="T54">CPU for a single call to the method add()</text:span>. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">xor</text:span><text:span text:style-name="T12"> %esi,%esi</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="2"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> add(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> ObjectType object) {</text:span></text:p>
   <text:p text:style-name="P15">mov 0x2009c0(%rip),%rax</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="10"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P15">mov %rsi,%r8</text:p>
   <text:p text:style-name="P15">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="2"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> add(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> ObjectType object) {</text:span></text:p>
   <text:p text:style-name="P15">mov %rcx,%rdx</text:p>
   <text:p text:style-name="P15">cmovbe %rdi,%r8</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="6"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="P15">cmp %r8,%rax</text:p>
   <text:p text:style-name="P15">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="10"/>data[</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;tail] = object;</text:span></text:p>
   <text:p text:style-name="P15">movb $0x0,0x6011a0(%rcx)</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="10"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P15">mov %r8,%rdx</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="10"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;tail = increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;tail);</text:span></text:p>
   <text:p text:style-name="P15">mov %r8,0x2009a0(%rip)</text:p>
   <text:p text:style-name="P15"/>
   <text:p text:style-name="Text_20_body">I see a couple of move instructions – update of the tail and update of the data in the cyclic buffer, <text:span text:style-name="T54">a </text:span>compare when the tail is incremented. There are 9 opcodes total. There is no unexpected overhead in this code. </text:p>
   <text:p text:style-name="Text_20_body">I coded one cyclic buffer implementation, but I gained four different cyclic buffers optimized for four different integer types and equally efficient when working with 8, 16, 32, 64 bits integers on different CPUs. Class CyclicBuffer encapsulates the data in the private region making it accessible only via the class methods and this is <text:span text:style-name="T54">a</text:span> good thing. </text:p>
   <text:h text:style-name="P71" text:outline-level="2"/>
   <text:h text:style-name="P56" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2537_977618933"/>Cyclic buffer – C alternative.<text:bookmark-end text:name="__RefHeading__2537_977618933"/></text:h>
   <text:p text:style-name="Quotations">/**</text:p>
   <text:p text:style-name="Quotations"><text:s/>* Returns true</text:p>
   <text:p text:style-name="Quotations"><text:s/>*/</text:p>
   <text:p text:style-name="Quotations">int compare(int C)</text:p>
   <text:p text:style-name="Quotations">{</text:p>
   <text:p text:style-name="Quotations"><text:s text:c="4"/>return (C &gt; C++);</text:p>
   <text:p text:style-name="Quotations">}</text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="P51">The C implementation of the cyclic buffer suggested below is type safe. C implementation contains approximately the same number of <text:span text:style-name="T48">source code</text:span> lines – ~80 lines <text:span text:style-name="T48">in C </text:span>vs ~90 lines in C++.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T6">#undef</text:span><text:span text:style-name="T49"> CYCLIC_BUFFRE_SIZE</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#define</text:span><text:span text:style-name="T12"> CYCLIC_BUFFRE_SIZE 10</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#undef</text:span><text:span text:style-name="T12"> CYCLIC_BUFFER_OBJECT_TYPE</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#define</text:span><text:span text:style-name="T12"> CYCLIC_BUFFER_OBJECT_TYPE uint8_t</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#define</text:span><text:span text:style-name="T12"> CYCLIC_BUFFRE_DECLARE(ObjectType, Size) \</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">typedef</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">struct</text:span><text:span text:style-name="T12"> { \</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>ObjectType data[Size+1]; \</text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>size_t head; \</text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>size_t tail; \</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>} CyclicBuffer;\</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P15">CYCLIC_BUFFRE_DECLARE(CYCLIC_BUFFER_OBJECT_TYPE, CYCLIC_BUFFRE_SIZE);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T28">CyclicBuffer</text:span><text:span text:style-name="T12"> myCyclicBuffer;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">CyclicBufferIncrement</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> index, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (index &lt; size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> 0;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">CyclicBufferIsEmpty</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">CyclicBuffer</text:span><text:span text:style-name="T12">* cyclicBuffer) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res = (cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> == cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">CyclicBufferIsFull</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">CyclicBuffer</text:span><text:span text:style-name="T12">* cyclicBuffer) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> tail = CyclicBufferIncrement(cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">, CYCLIC_BUFFRE_SIZE);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res = (cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> == tail);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">errorOverflow</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">errorUnderflow</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">CyclicBufferAdd</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">CyclicBuffer</text:span><text:span text:style-name="T12">* cyclicBuffer, </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> CYCLIC_BUFFER_OBJECT_TYPE object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (!CyclicBufferIsFull(cyclicBuffer)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">data</text:span><text:span text:style-name="T12">[cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12"> = CyclicBufferIncrement(cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">, CYCLIC_BUFFRE_SIZE);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">true</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>errorOverflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">false</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">CyclicBufferRemove</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">CyclicBuffer</text:span><text:span text:style-name="T12">* cyclicBuffer, CYCLIC_BUFFER_OBJECT_TYPE* object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (!CyclicBufferIsEmpty(cyclicBuffer)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>*object = cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">data</text:span><text:span text:style-name="T12">[cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12">];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> = CyclicBufferIncrement(cyclicBuffer-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12">, CYCLIC_BUFFRE_SIZE);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">true</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>errorUnderflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">false</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body">Function main prints number 0,1,2,3</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T6">int</text:span><text:span text:style-name="T49"> </text:span><text:span text:style-name="T50">main</text:span><text:span text:style-name="T49">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">for</text:span><text:span text:style-name="T12"> (</text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> i = 0;i &lt; 4;i++) {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>CyclicBufferAdd(&amp;myCyclicBuffer, i);</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12"> val;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">while</text:span><text:span text:style-name="T12"> (CyclicBufferRemove(&amp;myCyclicBuffer, &amp;val)) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>cout &lt;&lt; (</text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12">) val &lt;&lt; </text:span><text:span text:style-name="T35">endl</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> 0;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="P15"/>
   <text:p text:style-name="Text_20_body">One limitation of this code is that only cyclic buffers working with the same integer type can be instantiated in the same C source file. Add/remove functions can be defined only once in a C file. </text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52">Corresponding assembly contains 10 opcodes in total for <text:span text:style-name="T54">a </text:span>call to add API:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (index + 1);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="2"/></text:span><text:span text:style-name="T4">xor</text:span><text:span text:style-name="T12"> %esi,%esi</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> CyclicBufferAdd(CyclicBuffer* cyclicBuffer, </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> CYCLIC_BUFFER_OBJECT_TYPE object) {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="2"/>mov 0x2009be(%rip),%rax <text:s text:c="7"/># 0x6011b0 &lt;myCyclicBuffer+16&gt;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="2"/>mov %rsi,%r8</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> main() {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="2"/>push %rbp</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="2"/>lea 0x1(%rcx),%rdi</text:p>
   <text:p text:style-name="P15">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> CyclicBufferAdd(CyclicBuffer* cyclicBuffer, </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> CYCLIC_BUFFER_OBJECT_TYPE object) {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="2"/>mov %rcx,%rdx</text:p>
   <text:p text:style-name="P15"><text:s text:c="2"/>push %rbx</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (index + 1);</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="2"/>cmovbe %rdi,%r8</text:p>
   <text:p text:style-name="P15">...............................................</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (!CyclicBufferIsFull(cyclicBuffer)) {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="2"/>cmp %r8,%rax</text:p>
   <text:p text:style-name="P15">...............................................</text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>cyclicBuffer-&gt;data[cyclicBuffer-&gt;tail] = object;</text:p>
   <text:p text:style-name="P15"><text:s text:c="2"/>movb $0x0,0x6011a0(%rcx)</text:p>
   <text:p text:style-name="Text_20_body">GNUC for ARM produces essentially the same assembly for C and C++ code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">xor</text:span><text:span text:style-name="T12"> <text:s text:c="3"/>%esi,%esi</text:span></text:p>
   <text:p text:style-name="P15">mov <text:s text:c="3"/>0x2009be(%rip),%rax</text:p>
   <text:p text:style-name="P15">mov <text:s text:c="3"/>%rsi,%r8</text:p>
   <text:p text:style-name="P15">push <text:s text:c="2"/>%rbp</text:p>
   <text:p text:style-name="P15">lea <text:s text:c="3"/>0x1(%rdx),%rdi</text:p>
   <text:p text:style-name="P15">cmp <text:s text:c="3"/>$0x9,%rdx</text:p>
   <text:p text:style-name="P15">mov <text:s text:c="3"/>%rdx,%rcx</text:p>
   <text:p text:style-name="P15">push <text:s text:c="2"/>%rbx</text:p>
   <text:p text:style-name="P15">cmovbe %rdi,%r8</text:p>
   <text:p text:style-name="P15">cmp <text:s text:c="3"/>%r8,%rax</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12">je <text:s text:c="4"/></text:span><text:span text:style-name="T16">40081c</text:span><text:span text:style-name="T12"> &lt;main+0x3c&gt;</text:span></text:p>
   <text:p text:style-name="P15">movb <text:s text:c="2"/>$0x0,0x6011a0(%rdx)</text:p>
   <text:p text:style-name="P15">mov <text:s text:c="3"/>%r8,%rcx</text:p>
   <text:p text:style-name="P15">mov <text:s text:c="3"/>%r8,0x20099c(%rip)</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">xor</text:span><text:span text:style-name="T12"> <text:s text:c="3"/>%r12d,%r12d</text:span></text:p>
   <text:p text:style-name="Text_20_body">Performance of C and C++ versions measured on Intel is the same. </text:p>
   <text:h text:style-name="P71" text:outline-level="2"/>
   <text:h text:style-name="P56" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2646_977618933"/>Use of C++ templates in the embedded systems.<text:bookmark-end text:name="__RefHeading__2646_977618933"/></text:h>
   <text:p text:style-name="Text_20_body">At this point a patient reader would ask about “code bloat” caused by C++ templates and object code duplication. Typically an implementation in C should have a smaller memory footprint, should <text:span text:style-name="T54">no</text:span>t it? </text:p>
   <text:p text:style-name="Text_20_body">In case of the cyclic buffer all methods are inline and there is no any specific “template code”. In general case for every unique combination ObjectsType/Size used in the code the C++ compiler is going to instantiate a class and add a full set of methods to the application code. A careful C++ programmer shall move the methods which do not require template arguments to a base class and derive the CyclicBuffer template from the new class. Moving type-invariant code into a base class sometimes is called “code hoisting”. Code hoisting does not necessary cause a performance hit. I will call the base class <text:span text:style-name="T47">CyclicBufferBase</text:span>. Constructor of the base class <text:span text:style-name="T47">CyclicBufferBase</text:span> is protected and no objects of the base class can be created by an application. </text:p>
   <text:p text:style-name="P16"><text:span text:style-name="T6">class</text:span><text:span text:style-name="T11"> </text:span><text:span text:style-name="T27">CyclicBufferBase</text:span><text:span text:style-name="T11"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">isEmpty</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res = (</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> == </text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">isFull</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> tail = increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res = (</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> == tail);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">protected</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">CyclicBufferBase</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">size</text:span><text:span text:style-name="T12"> = size;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12"> = 0;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">errorOverflow</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">errorUnderflow</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">increment</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> index) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (index &lt; </text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">size</text:span><text:span text:style-name="T12">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (index + 1);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> 0;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">size</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12">};</text:span><text:span text:style-name="T2">// CyclicBufferBase</text:span></text:p>
   <text:p text:style-name="P26"><text:soft-page-break/></text:p>
   <text:p text:style-name="P44">Template class CyclicBuffer has data which depends on the template argument Size and add/remove methods which depend on the size of the integer. Class CyclicBuffer derives from class CyclicBuffer<text:span text:style-name="T54">Base</text:span>, inherits all methods of the class CyclicBuffer<text:span text:style-name="T54">Base</text:span> and exposes <text:span text:style-name="T54">all</text:span> methods of the class CyclicBuffer<text:span text:style-name="T54">Base</text:span>.</text:p>
   <text:p text:style-name="P17"><text:span text:style-name="T6">template</text:span><text:span text:style-name="T11">&lt;</text:span><text:span text:style-name="T6">typename</text:span><text:span text:style-name="T11"> </text:span><text:span text:style-name="T37">ObjectType</text:span><text:span text:style-name="T11">, </text:span><text:span text:style-name="T6">typename</text:span><text:span text:style-name="T11"> </text:span><text:span text:style-name="T37">Lock</text:span><text:span text:style-name="T11">, std::</text:span><text:span text:style-name="T27">size_t</text:span><text:span text:style-name="T11"> </text:span><text:span text:style-name="T37">Size</text:span><text:span text:style-name="T11">&gt; </text:span><text:span text:style-name="T6">class</text:span><text:span text:style-name="T11"> </text:span><text:span text:style-name="T27">CyclicBuffer</text:span><text:span text:style-name="T11">: <text:s text:c="4"/></text:span></text:p>
   <text:p text:style-name="P17"><text:span text:style-name="T19"><text:s text:c="5"/></text:span><text:span text:style-name="T6">public</text:span><text:span text:style-name="T11"> </text:span><text:span text:style-name="T27">CyclicBufferBase</text:span><text:span text:style-name="T11"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">CyclicBuffer</text:span><text:span text:style-name="T12">() :</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>CyclicBufferBase(</text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">static_assert</text:span><text:span text:style-name="T12">(std::</text:span><text:span text:style-name="T28">numeric_limits</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12">&gt;::</text:span><text:span text:style-name="T42">is_integer</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T33">&quot;CyclicBuffer is intended to work only with integer types&quot;</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">~CyclicBuffer</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">add</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12"> object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/></text:span><text:span text:style-name="T42">data</text:span><text:span text:style-name="T12">[</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12"> = increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">tail</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">true</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="12"/>errorOverflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">false</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">remove</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12"> &amp;object) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (!isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/>object = </text:span><text:span text:style-name="T42">data</text:span><text:span text:style-name="T12">[</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12">];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12"> = </text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;increment(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">head</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">true</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="12"/>errorUnderflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">false</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>}</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">private</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T36">ObjectType</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">data</text:span><text:span text:style-name="T12">[</text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12"> + 1];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12">};</text:span><text:span text:style-name="T2">// class CyclicBuffer</text:span></text:p>
   <text:p text:style-name="Text_20_body">Where C++ template can potentially cause object code duplication C code can lead to the source code <text:span text:style-name="T54">and object code </text:span>duplication. Analyzing of the assembly and object code generated by the C/C++ compiler is very useful in locating of <text:span text:style-name="T54">the </text:span>code responsible for <text:span text:style-name="T54">the </text:span>object code duplication. For example, a post build utility can look for patterns in the object code which occur more than once and use <text:span text:style-name="T54">a </text:span>map file to report the corresponding position in assembly. </text:p>
   <text:h text:style-name="Heading_20_1" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__2948_1515059145"/><text:soft-page-break/>Memory <text:span text:style-name="T51">Management</text:span>.<text:bookmark-end text:name="__RefHeading__2948_1515059145"/></text:h>
   <text:p text:style-name="Quotations">Programming is like sex, one mistake and you have to support it for the rest of your life. </text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="Text_20_body">I am going to discuss two frequently used types of memory allocation in the embedded software – static allocation at build time and allocation from memory pools. </text:p>
   <text:h text:style-name="Heading_20_2" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__2950_1515059145"/>Stack.<text:bookmark-end text:name="__RefHeading__2950_1515059145"/></text:h>
   <text:p text:style-name="Text_20_body">I will start the discussion of the dynamic memory allocation from memory pools by declaration of a new class Stack. Template class Stack is similar to the class CyclicBuffer <text:span text:style-name="T54">used</text:span> previously. Class Stack implements two methods “push” and “pop”.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> ObjectType, </text:span><text:span text:style-name="T4">ty</text:span><text:span text:style-name="T14">pen</text:span><text:span text:style-name="T4">a</text:span><text:span text:style-name="T36">me Lock, s</text:span><text:span text:style-name="T12">td::size_t Size&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">clas</text:span><text:span text:style-name="T36">s St</text:span><text:span text:style-name="T12">ack: </text:span><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12"> StackBase {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P15"><text:s text:c="4"/>Stack() :</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="5"/></text:span><text:span text:style-name="T42"><text:s text:c="3"/>S</text:span><text:span text:style-name="T12">tackBase(Size) {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P15"><text:s text:c="4"/>~Stack() {</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> push(ObjectType* object);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> pop(ObjectType** object);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">private</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P15"><text:s text:c="4"/>ObjectType* data[Size + 1];</text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52">Base class StackBase <text:span text:style-name="T47">contains “top”, “size” fields and a couple of useful APIs</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">StackBase</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">isEmpty</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res = (</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">top</text:span><text:span text:style-name="T12"> == 0);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">isFull</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res = (</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">top</text:span><text:span text:style-name="T12"> == </text:span><text:span text:style-name="T42">size</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">protected</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">StackBase</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">size</text:span><text:span text:style-name="T12"> = size;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">top</text:span><text:span text:style-name="T12"> = 0;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">errorOverflow</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">errorUnderflow</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">top</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">size</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="P53">Example of implementation of the class Stack push and pop methods:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">templa</text:span><text:span text:style-name="T36">te&lt;typenam</text:span><text:span text:style-name="T4">e</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">Obje</text:span><text:span text:style-name="T12">c</text:span><text:span text:style-name="T36">tTyp</text:span><text:span text:style-name="T12">e, </text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> Lock, std::size_t Size&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> Stack&lt;ObjectType, Lock, Size&gt;::push(ObjectType* object) {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>Lock();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (!isFull()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>data[</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;top] = object;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;top++;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">true</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>errorOverflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">false</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> ObjectType, </text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> Lock, std::size_t Size&gt;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> Stack&lt;ObjectType, Lock, Size&gt;::pop(ObjectType** object) {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>Lock();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (!isEmpty()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;top--;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>*object = (data[</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;top]);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">true</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>} </text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>errorUnderflow();</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">false</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:h text:style-name="P71" text:outline-level="2"/>
   <text:h text:style-name="P56" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__13921_1660174531"/>Memory Pool.<text:bookmark-end text:name="__RefHeading__13921_1660174531"/></text:h>
   <text:p text:style-name="Text_20_body">My next step is to define a block of “raw” data memory. A block of memory is a correctly aligned array of bytes which optionally can be place<text:span text:style-name="T54">d</text:span> at <text:span text:style-name="T54">a </text:span>specific memory address. One popular application for such memory blocks are data buffers for DMA transfers. Data buffer can be placed in the regular RAM or in the dedicated address space. <text:span text:style-name="T47">First I define a memory region. I use operator “new” <text:s/>- a placement new operator - to “place” the data at the specified address. My memory region has a name for debug purposes. </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">MemoryRegion</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">MemoryRegion</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">char</text:span><text:span text:style-name="T12"> *name, </text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> address, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> size) :</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">name</text:span><text:span text:style-name="T12">(name), </text:span><text:span text:style-name="T42">address</text:span><text:span text:style-name="T12">(address), </text:span><text:span text:style-name="T42">size</text:span><text:span text:style-name="T12">(size) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">data</text:span><text:span text:style-name="T12"> = </text:span><text:span text:style-name="T4">new</text:span><text:span text:style-name="T12"> (</text:span><text:span text:style-name="T4">reinterpret_cast</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12">*&gt;(address)) </text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12">[size];</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">getSize</text:span><text:span text:style-name="T12">() </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">size</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">char</text:span><text:span text:style-name="T12">* </text:span><text:span text:style-name="T14">getName</text:span><text:span text:style-name="T12">() </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">name</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">getAddress</text:span><text:span text:style-name="T12">() </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">address</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">protected</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">char</text:span><text:span text:style-name="T12">* </text:span><text:span text:style-name="T42">name</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">address</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">size</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12"> *</text:span><text:span text:style-name="T42">data</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="Text_20_body">I create an object of MemoryRegion type and point to <text:span text:style-name="T54">the </text:span>allocated by the compiler area in the dynamic data dmaMemoryData</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12"> dmaMemoryDummy[512];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">MemoryRegion</text:span><text:span text:style-name="T12"> dmaMemoryRegion(</text:span><text:span text:style-name="T33">&quot;dmaMem&quot;</text:span><text:span text:style-name="T12">, (</text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12">)dmaMemoryDummy, </text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(dmaMemoryDummy));</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="P58">I need an allocator – a class which deals with allocation of memory blocks. The allocator handles <text:span text:style-name="T54">the </text:span>correct alignment. <text:span text:style-name="T47">I am going to use the allocator code only once (or rarely) – when I fill my memory pool with data blocks and the performance is not extremely important here. Method reset “frees” all allocated blocks back to the allocator.</text:span></text:p>
   <text:p text:style-name="P16"><text:span text:style-name="T6">class</text:span><text:span text:style-name="T49"> </text:span><text:span text:style-name="T27">MemoryAllocatorRaw</text:span><text:span text:style-name="T49"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">MemoryAllocatorRaw</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">MemoryRegion</text:span><text:span text:style-name="T12"> memoryRegion, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> blockSize, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> count, </text:span><text:span text:style-name="T4">unsigned</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> alignment);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12">* </text:span><text:span text:style-name="T14">getBlock</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">blockBelongs</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12">* block) </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">MemoryRegion</text:span><text:span text:style-name="T12">&amp; </text:span><text:span text:style-name="T14">getRegion</text:span><text:span text:style-name="T12">() </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">memoryRegion</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">reset</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">firstNotAllocatedAddress</text:span><text:span text:style-name="T12"> = </text:span><text:span text:style-name="T42">memoryRegion</text:span><text:span text:style-name="T12">.getAddress();</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">constexpr</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">predictMemorySize</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> blockSize, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> count, </text:span><text:span text:style-name="T4">unsigned</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> alignment) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> count * </text:span><text:span text:style-name="T18">alignConst</text:span><text:span text:style-name="T12">(blockSize, alignment);</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">protected</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">alignment</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">blockSize</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">MemoryRegion</text:span><text:span text:style-name="T12">&amp; </text:span><text:span text:style-name="T42">memoryRegion</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">count</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">sizeTotalBytes</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">alignedBlockSize</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">firstNotAllocatedAddress</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">constexpr</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">alignConst</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> value, </text:span><text:span text:style-name="T4">unsigned</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> alignment) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (value + ((</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12">)alignment-1)) &amp; (~((</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12">)alignment-1));</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">alignAddress</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> address, </text:span><text:span text:style-name="T4">unsigned</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> alignment) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> res = (address+((</text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12">)alignment-1)) &amp; (~((</text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12">)alignment-1));</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52">Implementation of the allocator methods follows. The allocator constructor makes sure that there is enough space in the memory region. <text:span text:style-name="T54">I initialize the fields in the first line of the constructor right after the constructor name.</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T14">MemoryAllocatorRaw::MemoryAllocatorRaw</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">MemoryRegion</text:span><text:span text:style-name="T12"> memoryRegion, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> blockSize, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> count, </text:span><text:span text:style-name="T4">unsigned</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> alignment) :</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T42">alignment</text:span><text:span text:style-name="T12">(alignment), </text:span><text:span text:style-name="T42">blockSize</text:span><text:span text:style-name="T12">(blockSize), </text:span><text:span text:style-name="T42">memoryRegion</text:span><text:span text:style-name="T12">(memoryRegion), </text:span><text:span text:style-name="T42">count</text:span><text:span text:style-name="T12">(count) <text:s/>{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T42">alignedBlockSize</text:span><text:span text:style-name="T12"> = </text:span><text:span text:style-name="T18">alignAddress</text:span><text:span text:style-name="T12">(blockSize, alignment);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T42">sizeTotalBytes</text:span><text:span text:style-name="T12"> = </text:span><text:span text:style-name="T42">alignedBlockSize</text:span><text:span text:style-name="T12"> * count;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (</text:span><text:span text:style-name="T42">sizeTotalBytes</text:span><text:span text:style-name="T12"> &gt; memoryRegion.getSize()) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T2">// handle error</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T42">firstNotAllocatedAddress</text:span><text:span text:style-name="T12"> = memoryRegion.getAddress();</text:span></text:p>
   <text:p text:style-name="P20"><text:s text:c="4"/>reset();</text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body">Allocator implements only “get a block” API. Memory pool call<text:span text:style-name="T48">s</text:span> “get block” API from the <text:span text:style-name="T54">pool </text:span>constructor.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12">* </text:span><text:span text:style-name="T14">MemoryAllocatorRaw::getBlock</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> block;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>block = </text:span><text:span text:style-name="T18">alignAddress</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T42">firstNotAllocatedAddress</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T42">alignment</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T42">firstNotAllocatedAddress</text:span><text:span text:style-name="T12"> += </text:span><text:span text:style-name="T42">alignedBlockSize</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> (</text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12">*)block;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T54">My p</text:span>ool <text:span text:style-name="T54">needs</text:span> sanity check to ensure that “free” is called <text:span text:style-name="T54">only for</text:span> <text:span text:style-name="T54">the </text:span>block<text:span text:style-name="T54">s</text:span> which indeed “belong” to the pool.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">MemoryAllocatorRaw::blockBelongs</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12">* block) </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> blockPtr = (</text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12">)block;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res = </text:span><text:span text:style-name="T4">true</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>res = res &amp;&amp; blockPtr &gt;= </text:span><text:span text:style-name="T42">memoryRegion</text:span><text:span text:style-name="T12">.getAddress();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> maxAddress = </text:span><text:span text:style-name="T42">memoryRegion</text:span><text:span text:style-name="T12">.getAddress()+</text:span><text:span text:style-name="T42">sizeTotalBytes</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>res = res &amp;&amp; (blockPtr &lt;= maxAddress);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> alignedAddress = </text:span><text:span text:style-name="T18">alignAddress</text:span><text:span text:style-name="T12">(blockPtr, </text:span><text:span text:style-name="T42">alignment</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>res = res &amp;&amp; (blockPtr == alignedAddress);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body">Before I declare an object of the allocator I check that the memory region I created is large enough. If the memory region is too small <text:span text:style-name="T54">I want the </text:span>compilation <text:span text:style-name="T54">to</text:span> fail.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static_assert</text:span><text:span text:style-name="T12">((</text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(dmaMemoryDummy) &gt;= </text:span><text:span text:style-name="T28">MemoryAllocatorRaw</text:span><text:span text:style-name="T12">::</text:span><text:span text:style-name="T18">predictMemorySize</text:span><text:span text:style-name="T12">(63, 3, 2)), </text:span><text:span text:style-name="T33">&quot;DmaMemoryDummy region is not large enough&quot;</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">MemoryAllocatorRaw</text:span><text:span text:style-name="T12"> dmaAllocator(dmaMemoryRegion, 63, 3, 2);</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52"><text:span text:style-name="T48">My </text:span>memory pool <text:span text:style-name="T48">is a stack of data blocks. The class </text:span>contains allocate/free API, some debug statistics. Every memory pool has a name – this is useful for logging and printing debug statistics. <text:span text:style-name="T48">The stack in the memory pool is intentionally protected by a LockDummy – not protected. I am going to use a real synchronizer in the memory pool methods. Class methods with “const” keyword in the signature, for example resetMaxInUse() can not alter any member of the class. How comes that resetMaxInUse() changes the statistics field anyway?. Field statistics is mutable which allows const methods to modify it. Debug counters is a book example of using keyword mutable. Method resetMaxInUse() </text:span>does not affect <text:span text:style-name="T53">(meaningfully?) </text:span>the visible <text:span text:style-name="T54">to the user </text:span>state of the object.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt; </text:span><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">MemoryPoolRaw</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">MemoryPoolRaw</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">char</text:span><text:span text:style-name="T12">* name, </text:span><text:span text:style-name="T28">MemoryAllocatorRaw</text:span><text:span text:style-name="T12">* memoryAllocator);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">~MemoryPoolRaw</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">memoryAllocator-</text:span><text:span text:style-name="T43">&gt;</text:span><text:span text:style-name="T12">reset();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">resetMaxInUse</text:span><text:span text:style-name="T12">() </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">.</text:span><text:span text:style-name="T42">maxInUse</text:span><text:span text:style-name="T12"> = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">typedef</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">struct</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">inUse</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">maxInUse</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">errBadBlock</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>} </text:span><text:span text:style-name="T28">Statistics</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">allocate</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12">** block);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">free</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12">* block);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">Statistics</text:span><text:span text:style-name="T12"> &amp;</text:span><text:span text:style-name="T14">getStatistics</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12">) </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> {</text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">;}</text:span></text:p>
   <text:p text:style-name="P15"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">protected</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">mutable</text:span><text:span text:style-name="T14"> </text:span><text:span text:style-name="T28">Statistics</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">char</text:span><text:span text:style-name="T12">* </text:span><text:span text:style-name="T42">name</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">Stack</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T28">LockDummy</text:span><text:span text:style-name="T12">, <text:s/></text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt; </text:span><text:span text:style-name="T42">pool</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">MemoryAllocatorRaw</text:span><text:span text:style-name="T12">* </text:span><text:span text:style-name="T42">memoryAllocator</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52">Memory pool constructor calls the allocator to fill the stack of free blocks. <text:span text:style-name="T51">Constructor can, for example, register the newly created memory pool in the data base of the memory pools. Application can provide meanings for the run-time inspection of the memory pools. Destructor would remove the pool from the data base</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt; </text:span><text:span text:style-name="T14">MemoryPoolRaw&lt;Lock, Size&gt;::MemoryPoolRaw</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">char</text:span><text:span text:style-name="T12">* name, </text:span><text:span text:style-name="T28">MemoryAllocatorRaw</text:span><text:span text:style-name="T12">* memoryAllocator) :</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T42">name</text:span><text:span text:style-name="T12">(name), </text:span><text:span text:style-name="T42">memoryAllocator</text:span><text:span text:style-name="T12">(memoryAllocator) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T35">memset</text:span><text:span text:style-name="T12">(&amp;</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">, 0, </text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">));</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">name</text:span><text:span text:style-name="T12"> = name;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">for</text:span><text:span text:style-name="T12"> (</text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> i = 0;i &lt; </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">;i++) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12"> *block = memoryAllocator-&gt;getBlock();</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">pool</text:span><text:span text:style-name="T12">.push(block);</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52">Memory pool allocate/free API is reentrant and supports <text:span text:style-name="T54">a</text:span> multitasking environment. <text:span text:style-name="T48">All activity which can modify the state of the stack is protected by Lock. If the application uses the pool only in one task it can provide LockDummy template argument for the memory pool. Statistics counters are relatively low cost, but can be immensely helpful for debugging cases like allocation failure. </text:span></text:p>
   <text:p text:style-name="P25"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">MemoryPoolRaw&lt;Lock, Size&gt;::allocate</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12">** block) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/>res = </text:span><text:span text:style-name="T42">pool</text:span><text:span text:style-name="T12">.pop(block);</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (res) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">.</text:span><text:span text:style-name="T42">inUse</text:span><text:span text:style-name="T12">++;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (</text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">.</text:span><text:span text:style-name="T42">inUse</text:span><text:span text:style-name="T12"> &gt; </text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">.</text:span><text:span text:style-name="T42">maxInUse</text:span><text:span text:style-name="T12">)</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="12"/></text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">.</text:span><text:span text:style-name="T42">maxInUse</text:span><text:span text:style-name="T12"> = </text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">.</text:span><text:span text:style-name="T42">inUse</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P8">}</text:p>
   <text:p text:style-name="P42">Memory pool “<text:span text:style-name="T48">free” makes sure that the pointer to be freed indeed belongs to the pool. Blocks allocator knows to recognize it&apos;s own blocks. </text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">template</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T4">typename</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T28">size_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T36">Size</text:span><text:span text:style-name="T12">&gt;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">MemoryPoolRaw&lt;Lock, Size&gt;::free</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint8_t</text:span><text:span text:style-name="T12">* block) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">bool</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T36">Lock</text:span><text:span text:style-name="T12">();</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/>res = </text:span><text:span text:style-name="T42">memoryAllocator</text:span><text:span text:style-name="T12">-&gt;blockBelongs(block);</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (res) {</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="8"/>res = </text:span><text:span text:style-name="T42">pool</text:span><text:span text:style-name="T12">.push(block);</text:span></text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">.</text:span><text:span text:style-name="T42">inUse</text:span><text:span text:style-name="T12">--;</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="P4"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">stati</text:span><text:span text:style-name="T44">s</text:span><text:span text:style-name="T57">followin</text:span><text:span text:style-name="T42">tics</text:span><text:span text:style-name="T12">.</text:span><text:span text:style-name="T42">errBadBlock</text:span><text:span text:style-name="T12">++;</text:span></text:p>
   <text:p text:style-name="P8"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P1"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> res;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="P39">It is going to be fairly easy to prevent release of the same block more than once. If the data blocks are part of the continuous <text:s/>memory the allocator can provide a method generating a unique index based on the address of the block. Memory pool can contain an array where blocks are marked as allocated or free and method free() can check the block against this array. If the memory region is not continuous the allocator can implement a hash function which translates <text:span text:style-name="T54">the </text:span>address of a data block to a unique data block index.</text:p>
   <text:h text:style-name="P56" text:outline-level="2">Timers.</text:h>
   <text:p text:style-name="P65">I will use memory allocation in the implementation of software timers. Software timers API shall have O(1) complexity. API is going to be reentrant, <text:s/>will not assume and not dictate any specific application design, is not going to contain operating system specific system calls. </text:p>
   <text:p text:style-name="P65">At this point you know the object-oriented routine. Let&apos;s declare a timer object. My timer is a plain C structure for a reason. I want to know exactly the size of the data the C compiler allocates for every timer object.</text:p>
   <text:p text:style-name="P65"/>
   <text:h text:style-name="P54" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__6684_1272265156"/>Hardware.<text:bookmark-end text:name="__RefHeading__6684_1272265156"/></text:h>
   <text:p text:style-name="P28">How many programmers does it take to change a light bulb? None - it&apos;s a hardware problem.</text:p>
   <text:p text:style-name="P32"/>
   <text:p text:style-name="Text_20_body">Embedded software accesses <text:span text:style-name="T54">the </text:span>hardware via hardware registers. I will assume that there are three groups of registers – read and write registers, read only registers and write only registers. All registers are memory mapped – there is an address for every register. The software can access a register in the same way as it reads or writes a variable given the variable&apos;s address. In case of write only registers it is a custom to keep a <text:span text:style-name="T47">cached value</text:span> – <text:span text:style-name="T54">a </text:span>variable <text:span text:style-name="T54">sitting </text:span>in the data memory which contains the latest written to the write only register value. </text:p>
   <text:p text:style-name="P43">The following example is based on the user interface of the Parallel Input/Output controller (PIO) in the Atmel SAMA5d3 microcontroller. I have simplified the interface to save lines of code and text. </text:p>
   <table:table table:name="PIOUserInterface" table:style-name="PIOUserInterface">
    <table:table-column table:style-name="PIOUserInterface.A"/>
    <table:table-column table:style-name="PIOUserInterface.B"/>
    <table:table-column table:style-name="PIOUserInterface.C"/>
    <table:table-column table:style-name="PIOUserInterface.D"/>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A1" office:value-type="string">
      <text:p text:style-name="P62">0x0000</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A1" office:value-type="string">
      <text:p text:style-name="P62">PIO Enable Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A1" office:value-type="string">
      <text:p text:style-name="P62">PIO_PER</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D1" office:value-type="string">
      <text:p text:style-name="P62">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0004</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">PIO Disable Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">PIO_PDR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="P62">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0008</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">PIO Status Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">PIO_PSR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="P62">Read-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x000C</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Reserved</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0010</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Output Enable Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">PIO_OER</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="P62">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0014</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Output Disable Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">PIO_ODR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="P62">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0018</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Output Status Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">PIO_OSR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="P62">Read-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x001C</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Reserved</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0020</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Not used</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0024</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Not used</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0028</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Not used</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x002C</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Reserved</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="Table_20_Contents"/>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0030</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Set Output Data Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">PIO_SODR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="P62">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0034</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Clear Output Data Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">PIO_CODR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="P62">Write-only</text:p>
     </table:table-cell>
    </table:table-row>
    <table:table-row>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">0x0038</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">Output Status Register</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.A2" office:value-type="string">
      <text:p text:style-name="P62">PIO_ODSR</text:p>
     </table:table-cell>
     <table:table-cell table:style-name="PIOUserInterface.D2" office:value-type="string">
      <text:p text:style-name="P62">Read-only</text:p>
     </table:table-cell>
    </table:table-row>
   </table:table>
   <text:p text:style-name="P43"/>
   <text:p text:style-name="P43">There are 5 32 bits I/Os like this called A, B, C, D, E, F in the microcontroller. The registers are mapped starting at <text:span text:style-name="T54">the </text:span>address 0xFFFFF200. User shall write 1 to the bit she wishes to modify in a write-only registers. For example, user will write 0x04 to PIO_SODR – set the output value first, PIO_PER, PIO_OER to drive pin 2 (zero based) of the PIO high. Write to the PIO registers is an atomic operation. The hardware interface allows to change the configuration of a single bit in the multi thread environment. Hardware provides convenient status registers which keep the current value of the register<text:span text:style-name="T54">s</text:span>, also called a shadow.</text:p>
   <text:h text:style-name="P60" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__8080_1329019087"/><text:soft-page-break/>I/O access in C.<text:bookmark-end text:name="__RefHeading__8080_1329019087"/></text:h>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T54">I am providing quick and dirty C implementation. </text:span>Declare the PIO structure first:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#define</text:span><text:span text:style-name="T12"> TOKEN_CAT(x, y) x </text:span><text:span text:style-name="T4">##</text:span><text:span text:style-name="T12"> y</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#define</text:span><text:span text:style-name="T12"> TOKEN_CAT2(x, y) TOKEN_CAT(x, y)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#define</text:span><text:span text:style-name="T12"> RESERVED TOKEN_CAT2(reserved, __COUNTER__)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">struct</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">__attribute__</text:span><text:span text:style-name="T12"> ((__packed__)) </text:span><text:span text:style-name="T28">PIO</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_PER</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_PDR</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_PSR</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_OER</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_ODR</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_OSR</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_SODR</text:span><text:span text:style-name="T12"> ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_CODR</text:span><text:span text:style-name="T12"> ;</text:span></text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="Text_20_body">Declare a pointer to the memory area:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">#if</text:span><text:span text:style-name="T5">def</text:span><text:span text:style-name="T12"> REAL_HARDWARE</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> PIO *pios = (PIO*)0xFFFFF200;</text:span></text:p>
   <text:p text:style-name="P14">#else</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">PIO</text:span><text:span text:style-name="T12"> pioDummy[5];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">PIO</text:span><text:span text:style-name="T12"> *pios = pioDummy;</text:span></text:p>
   <text:p text:style-name="P14">#endif</text:p>
   <text:p text:style-name="Text_20_body">Five PIO blocks:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">typedef</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">enum</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T45">PIO_A</text:span><text:span text:style-name="T12">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T45">PIO_B</text:span><text:span text:style-name="T12">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T45">PIO_C</text:span><text:span text:style-name="T12">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T45">PIO_D</text:span><text:span text:style-name="T12">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T45">PIO_E</text:span><text:span text:style-name="T12">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T45">PIO_F</text:span><text:span text:style-name="T12">,</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12">} </text:span><text:span text:style-name="T28">PIO_NAME</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Text_20_body">Function which configures a pin as output:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">enableOutput</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">PIO_NAME</text:span><text:span text:style-name="T12"> name, </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> pin, </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> value) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">PIO</text:span><text:span text:style-name="T12"> *pio = &amp;pios[name];</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> mask = 1 &lt;&lt; pin;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (value) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>pio-&gt;</text:span><text:span text:style-name="T42">PIO_SODR</text:span><text:span text:style-name="T12"> = mask;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>pio-&gt;</text:span><text:span text:style-name="T42">PIO_CODR</text:span><text:span text:style-name="T12"> = mask;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>pio-&gt;</text:span><text:span text:style-name="T42">PIO_PER</text:span><text:span text:style-name="T12"> = mask;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>pio-&gt;</text:span><text:span text:style-name="T42">PIO_OER</text:span><text:span text:style-name="T12"> = mask;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52">Function which drives PIO A, pin 2 high can look like <text:span text:style-name="T54">this</text:span>:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T15">main</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>enableOutput(</text:span><text:span text:style-name="T45">PIO_A</text:span><text:span text:style-name="T12">, 2, 1);</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body">This is how the relevant assembly for Intel looks like – as expected there are three 32-bits moves </text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>PIO *pio = &amp;pios[name];</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>uint32_t mask = 1 &lt;&lt; pin;</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>if (value) {</text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>pio-&gt;PIO_SODR = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="2"/></text:span><text:span text:style-name="T4">4007e0:</text:span><text:span text:style-name="T12"><text:tab/>c7 05 e6 19 20 00 04 <text:tab/>movl <text:s text:c="2"/>$0x4,0x2019e6(</text:span><text:span text:style-name="T4">%rip</text:span><text:span text:style-name="T12">)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="2"/></text:span><text:span text:style-name="T4">4007e7:</text:span><text:span text:style-name="T12"><text:tab/>00 00 00 </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="2"/></text:span><text:span text:style-name="T4">4007ea:</text:span><text:span text:style-name="T12"><text:tab/>31 c0 <text:s text:c="15"/><text:tab/>xor <text:s text:c="3"/></text:span><text:span text:style-name="T4">%eax</text:span><text:span text:style-name="T12">,</text:span><text:span text:style-name="T4">%eax</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>pio-&gt;PIO_SODR = mask;</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>else {</text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>pio-&gt;PIO_CODR = mask;</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>pio-&gt;PIO_PER = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="2"/></text:span><text:span text:style-name="T4">4007ec:</text:span><text:span text:style-name="T12"><text:tab/>c7 05 aa 19 20 00 04 <text:tab/>movl <text:s text:c="2"/>$0x4,0x2019aa(</text:span><text:span text:style-name="T4">%rip</text:span><text:span text:style-name="T12">)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="2"/></text:span><text:span text:style-name="T4">4007f3:</text:span><text:span text:style-name="T12"><text:tab/>00 00 00 </text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>pio-&gt;PIO_OER = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="2"/></text:span><text:span text:style-name="T4">4007f6:</text:span><text:span text:style-name="T12"><text:tab/>c7 05 b0 19 20 00 04 <text:tab/>movl <text:s text:c="2"/>$0x4,0x2019b0(</text:span><text:span text:style-name="T4">%rip</text:span><text:span text:style-name="T12">)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="2"/></text:span><text:span text:style-name="T4">4007fd:</text:span><text:span text:style-name="T12"><text:tab/>00 00 00 </text:span></text:p>
   <text:p text:style-name="Text_20_body">Assembly generated for ARM is slightly longer. In ARM the address should be loaded to a register before a value can be stored.</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>PIO *pio = &amp;pios[name];</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>uint32_t mask = 1 &lt;&lt; pin;</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>if (value) {</text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>pio-&gt;PIO_SODR = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">8650:</text:span><text:span text:style-name="T12"><text:tab/>e59f3014 <text:tab/>ldr<text:tab/>r3, [pc, #20]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">8654:</text:span><text:span text:style-name="T12"><text:tab/>e3a02004 <text:tab/>mov<text:tab/>r2, #4</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">8658:</text:span><text:span text:style-name="T12"><text:tab/>e5832090 <text:tab/>str<text:tab/>r2, [r3, #144]</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">865c:</text:span><text:span text:style-name="T12"><text:tab/>e3a00000 <text:tab/>mov<text:tab/>r0, #0</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>pio-&gt;PIO_SODR = mask;</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>else {</text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>pio-&gt;PIO_CODR = mask;</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>pio-&gt;PIO_PER = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">8660:</text:span><text:span text:style-name="T12"><text:tab/>e5832060 <text:tab/>str<text:tab/>r2, [r3, #96]</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>pio-&gt;PIO_OER = mask;</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">8664:</text:span><text:span text:style-name="T12"><text:tab/>e5832070 <text:tab/>str<text:tab/>r2, [r3, #112]</text:span></text:p>
   <text:h text:style-name="P73" text:outline-level="2"/>
   <text:h text:style-name="P57" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__8082_1329019087"/>I/O access in C<text:span text:style-name="T54">++</text:span>.<text:bookmark-end text:name="__RefHeading__8082_1329019087"/></text:h>
   <text:p text:style-name="P44">This is not easy to compete with C when accessing the I/O. Compiler C translates every line of C code into <text:span text:style-name="T54">a </text:span>single machine opcode. There is no need to manually specify an address for every register. <text:span text:style-name="T54">I need C++ implementation with the same perfect performance score, similar convenience of usage AND adding some value, for example type safety. </text:span></text:p>
   <text:p text:style-name="P46">First class is an abstraction of a hardware module. The class constructor is protected – application can create objects only from derived classes.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HardwareModule</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">protected</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">HardwareModule</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> address): </text:span><text:span text:style-name="T42">address</text:span><text:span text:style-name="T12">(address) {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">~HardwareModule</text:span><text:span text:style-name="T12">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">address</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="P46">Next class is a 32 bits register. Static assertion will fail the build if the object consumes more than 32 bits – this is absolutely vital for the correct access to the hardware and comes instead of the “packed” attribute in the C version. </text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HardwareRegister32</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">protected</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">volatile</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">value</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">get</text:span><text:span text:style-name="T12">() </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> {</text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">value</text:span><text:span text:style-name="T12">;}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">set</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> value) {</text:span><text:span text:style-name="T4">this</text:span><text:span text:style-name="T12">-&gt;</text:span><text:span text:style-name="T42">value</text:span><text:span text:style-name="T12"> = value;}</text:span></text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static_assert</text:span><text:span text:style-name="T12">((</text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">HardwareRegister32</text:span><text:span text:style-name="T12">) == </text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12">)), </text:span><text:span text:style-name="T33">&quot;HardwareRegister32 is not 32 bits&quot;</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="P45">Read only and write only registers follow. The classes overload assignment operator which allows to use assignment to read and write the register value. Read/write registers would implement both left and right hand types of the assignment operator.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HardwareRegister32RO</text:span><text:span text:style-name="T12"> : </text:span><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HardwareRegister32</text:span><text:span text:style-name="T12">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">operator=</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HardwareRegister32RO</text:span><text:span text:style-name="T12">&amp; r) </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> get();</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static_assert</text:span><text:span text:style-name="T12">((</text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">HardwareRegister32RO</text:span><text:span text:style-name="T12">) == </text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12">)), </text:span><text:span text:style-name="T33">&quot;HardwareRegister32RO is not 32 bits&quot;</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HardwareRegister32WO</text:span><text:span text:style-name="T12"> : </text:span><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HardwareRegister32</text:span><text:span text:style-name="T12">{</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">operator=</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> value) {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>set(value);</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> value;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static_assert</text:span><text:span text:style-name="T12">((</text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">HardwareRegister32WO</text:span><text:span text:style-name="T12">) == </text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12">)), </text:span><text:span text:style-name="T33">&quot;HardwareRegister32WO is not 32 bits&quot;</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52">For the clarity I add a register “reserved” - I call it “not used”</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HardwareRegister32NotUsed</text:span><text:span text:style-name="T12"> : </text:span><text:span text:style-name="T28">HardwareRegister32</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">HardwareRegister32NotUsed</text:span><text:span text:style-name="T12">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">~HardwareRegister32NotUsed</text:span><text:span text:style-name="T12">() {}</text:span></text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static_assert</text:span><text:span text:style-name="T12">((</text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">HardwareRegister32NotUsed</text:span><text:span text:style-name="T12">) == </text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12">)), </text:span><text:span text:style-name="T33">&quot;HardwareRegister32NotUsed is not 32 bits&quot;</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="P66">The framework is in place and can serve any 32 bits register. Declare the PIO hardware module. <text:span text:style-name="T54">There is nothing unexpected but just a repetition of all the same tricks including compilation time check of the size of the structure. An object of type HardwarePIO requires about the same amount data as the competing C version. Depending on the optimization level and complexity of the class there is going to be one additional pointer in the RAM – pointer “this”. In the specific implementation below all methods of the class are “inline” and the object data is optimized out completely. </text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HardwarePIO</text:span><text:span text:style-name="T12"> : </text:span><text:span text:style-name="T28">HardwareModule</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">HardwarePIO</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12"> address) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T42">interface</text:span><text:span text:style-name="T12"> = (</text:span><text:span text:style-name="T4">struct</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">Interface</text:span><text:span text:style-name="T12">*)address;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">~HardwarePIO</text:span><text:span text:style-name="T12">() {}</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">struct</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">Interface</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32WO</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_PER</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32WO</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_PDR</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32RO</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_PSR</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32NotUsed</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32WO</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_OER</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32WO</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_ODR</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32RO</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_OSR</text:span><text:span text:style-name="T12"> <text:s/>;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32NotUsed</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32NotUsed</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32NotUsed</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32NotUsed</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32NotUsed</text:span><text:span text:style-name="T12"> RESERVED ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32WO</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_SODR</text:span><text:span text:style-name="T12"> ;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T28">HardwareRegister32WO</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">PIO_CODR</text:span><text:span text:style-name="T12"> ;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>};</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">static_assert</text:span><text:span text:style-name="T12">((</text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T4">struct</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">Interface</text:span><text:span text:style-name="T12">) == (14*</text:span><text:span text:style-name="T4">sizeof</text:span><text:span text:style-name="T12">(</text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12">))), </text:span><text:span text:style-name="T33">&quot;</text:span><text:span text:style-name="T34">struct</text:span><text:span text:style-name="T33"> interface is of wrong size, broken alignment?&quot;</text:span><text:span text:style-name="T12">);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">enum</text:span><text:span text:style-name="T12"> Name {</text:span><text:span text:style-name="T45">A</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T45">B</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T45">C</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T45">D</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T45">E</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T45">F</text:span><text:span text:style-name="T12">, </text:span><text:span text:style-name="T45">LAST</text:span><text:span text:style-name="T12">};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">Interface</text:span><text:span text:style-name="T12">&amp; </text:span><text:span text:style-name="T14">getInterface</text:span><text:span text:style-name="T12">(Name name) </text:span><text:span text:style-name="T4">const </text:span><text:span text:style-name="T12">{</text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T42">interface</text:span><text:span text:style-name="T12">[name];};</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">enableOutput</text:span><text:span text:style-name="T12">(Name name, </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> pin, </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> value);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">protected</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">struct</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">Interface</text:span><text:span text:style-name="T12">* </text:span><text:span text:style-name="T42">interface</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="Text_20_body"/>
   <text:p text:style-name="P52">Implementation of the method enableOutput <text:span text:style-name="T54">is </text:span>very similar to the C version:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">inline</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">HardwarePIO::enableOutput</text:span><text:span text:style-name="T12">(Name name, </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> pin, </text:span><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> value)</text:span></text:p>
   <text:p text:style-name="P15">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">struct</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">Interface</text:span><text:span text:style-name="T12">&amp; interface = getInterface(name);</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> mask = 1 &lt;&lt; pin;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (value) {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>interface.</text:span><text:span text:style-name="T42">PIO_SODR</text:span><text:span text:style-name="T12"> = mask;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">else</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>interface.</text:span><text:span text:style-name="T42">PIO_CODR</text:span><text:span text:style-name="T12"> = mask;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>interface.</text:span><text:span text:style-name="T42">PIO_PER</text:span><text:span text:style-name="T12"> = mask;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>interface.</text:span><text:span text:style-name="T42">PIO_OER</text:span><text:span text:style-name="T12"> = mask;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body">Usage example:</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HardwarePIO</text:span><text:span text:style-name="T12"> hardwarePIO(</text:span><text:span text:style-name="T4">reinterpret_cast</text:span><text:span text:style-name="T12">&lt;</text:span><text:span text:style-name="T28">uintptr_t</text:span><text:span text:style-name="T12">&gt;(pioDummy));</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">main</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>hardwarePIO.enableOutput(</text:span><text:span text:style-name="T28">HardwarePIO</text:span><text:span text:style-name="T12">::</text:span><text:span text:style-name="T45">A</text:span><text:span text:style-name="T12">, 2, 1);</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="Text_20_body">This C++ implementation produces the same assembly as the <text:span text:style-name="T54">old </text:span>trusty C one. <text:span text:style-name="T58">There is no more “code bloat” than in the C implementation. </text:span>C++ framework comes with some worthy benefits. If a user attempts to <text:span text:style-name="T54">read</text:span> <text:span text:style-name="T54">a write</text:span> only register build will fail. Th<text:span text:style-name="T54">e following</text:span> statement will break the compilation:</text:p>
   <text:p text:style-name="P21"><text:span text:style-name="T28">uint32_t</text:span><text:span text:style-name="T12"> per = hardwarePIO.getInterface(</text:span><text:span text:style-name="T28">HardwarePIO</text:span><text:span text:style-name="T12">::</text:span><text:span text:style-name="T45">A</text:span><text:span text:style-name="T12">).</text:span><text:span text:style-name="T42">PIO_PER</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P67">Access to the PIO registers is encapsulated in the class methods of the hardware module. The methods in the HardwarePIO class are the only way to modify a register. <text:span text:style-name="T59">C++ implementation allows to catch other wrong doings at compilation time, for example reading or writing reserved registers. </text:span></text:p>
   <text:p text:style-name="P67">It is easy to cache all written values in the hardware module. One way to <text:span text:style-name="T58">cache or log the read and write tran</text:span>s<text:span text:style-name="T58">actions</text:span> <text:span text:style-name="T58">is </text:span>to add a “shadow” interface field to the hardware module class.</text:p>
   <text:h text:style-name="P68" text:outline-level="1"/>
   <text:h text:style-name="P54" text:outline-level="1"><text:bookmark-start text:name="__RefHeading__7726_2007975351"/><text:span text:style-name="T55">Code ROM</text:span> <text:span text:style-name="T55">and data RAM</text:span>.<text:bookmark-end text:name="__RefHeading__7726_2007975351"/></text:h>
   <text:p text:style-name="Quotations">If at first you don&apos;t succeed; call it version 1.0. </text:p>
   <text:p text:style-name="Quotations"/>
   <text:p text:style-name="P47">There are very popular hardware platforms where ROM and RAM distinction is very important. One example of such device is rather popular 8 bits microcontrollers Atmega. In the Atmega MCUs code can not be placed in the data memory – CPU can not execute code sitting in the RAM. Access to the data in the code memory requires special instructions. Another example is Application Specific Integration Circuits or ASICs. An ASIC often contains integrated ROM and RAM. Integrated, also called on die or on chip, ROM storage is relatively cheap because it requires relatively small amount of space on the silicone wafer. RAM is relatively expensive because it requires more logic per bit of memory and square inches on the integrated circuit (die) come at premium. RAM consumes significantly more power. I think that the vast majority of the electronic device around us have integrated ROM and RAM (frequently SRAM) inside and typically on chip RAM is much smaller than the ROM.</text:p>
   <text:p text:style-name="P47">There are two types of ROM – erasable and not erasable. In the Atmega MCUs different areas of the ROM can be programmed by the firmware assuming that the firmware runs from another area. In case of ASICs ROM is often not erasable. ROM programming is a part of the ASIC production process. The ROM can not be modified after the chip leaves the factory (FAB). </text:p>
   <text:p text:style-name="P47">If there is not enough RAM to load the firmware then parts of the firmware code should be located in the chip ROM. In case of an ASIC it means that the ROM based parts of the firmware can be changed only in the future versions of the chip. High complexity of the modern ASIC firmware makes it very hard to reach 100% code coverage in the ASIC verification process. Even if the ROM based firmware is verified and tested completely still there is a chance that this or that protocol has been misunderstood by the development team or product requirements has changed. The development team prepares the firmware and the hardware for the not unlikely event that need to patch the ROM will arise.</text:p>
   <text:p text:style-name="P47">This chapter covers some of the ROM related problems.</text:p>
   <text:h text:style-name="P71" text:outline-level="2"/>
   <text:h text:style-name="P56" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__7728_2007975351"/><text:span text:style-name="T55">C++ Initialized data</text:span>.<text:bookmark-end text:name="__RefHeading__7728_2007975351"/></text:h>
   <text:p text:style-name="P47">At least one code section – boot, constants and initialized data are parts of the ROM. Initialized non-zero data is going to consume memory two times. Initialization values of the initialized data are part of the ROM. Usually boot process copies the values from the ROM to the RAM. If I inspect an object file generated by a compiler I can easily find initialization data for the strings. There are utilities which help to inspect the object files, dump different section into separate files and prepare the images for ROM programming. Example of such utility is GNU objdump. Let&apos;s see some C++ initialized data in action. Following code produces two line of output - “Hello, world!” and “Hello from main()!”</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HelloWorld</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">HelloWorld</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T33">&quot;Hello, world!&quot;</text:span><text:span text:style-name="T12"> &lt;&lt; </text:span><text:span text:style-name="T35">endl</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HelloWorld</text:span><text:span text:style-name="T12"> helloWorld;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">int</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">main</text:span><text:span text:style-name="T12">()</text:span></text:p>
   <text:p text:style-name="P15">{</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/>cout &lt;&lt; </text:span><text:span text:style-name="T33">&quot;Hello from main()!&quot;</text:span><text:span text:style-name="T12"> &lt;&lt; </text:span><text:span text:style-name="T35">endl</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">return</text:span><text:span text:style-name="T12"> 0;</text:span></text:p>
   <text:p text:style-name="P15">}</text:p>
   <text:p text:style-name="P47">Function main() contains only one output. Entity responsible for initializing of the C++ object helloWorld and printing the first line is an object loader running in my operating system. In case of the embedded systems this code is usually part of the boot process. Constructor of the HelloWorld class is text and appears only once in the ROM. Arguments of the cout – the strings can exist in two places in the memory. Original or master copy is in the ROM and a second copy created by the loader is in the RAM. Pointer “this” which contains address of the statically allocated object helloWorld has two copies too. There is an initialization value for “this” pointer in the ROM and “this” pointer in the RAM. <text:s/>Size allocated by helloWorld object in the ROM of 32 bits CPU is at least 4 bytes of “this” and 14 bytes of zero terminated string. Linker script are responsible for correct placement of different sections of the code and data. If the CPU can not access data stored in the code memory linker script should should contain relevant allocation instructions. Specifically place for the initialized data section will be allocated two time – in the ROM address space and in the RAM. See your linker documentation for details. </text:p>
   <text:h text:style-name="P71" text:outline-level="2"/>
   <text:h text:style-name="P56" text:outline-level="2"><text:bookmark-start text:name="__RefHeading__7954_2007975351"/>ROM patching.<text:bookmark-end text:name="__RefHeading__7954_2007975351"/></text:h>
   <text:p text:style-name="Text_20_body">I want to prepare the constructor code for a patch in the future. I will check some well known address in the RAM. If there is a non-zero entry I will use the string from there, if not I will print the default value – the ROMed one.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">static</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">const</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T4">char</text:span><text:span text:style-name="T12"> *helloWorldStr = 0;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HelloWorld</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">HelloWorld</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">if</text:span><text:span text:style-name="T12"> (helloWorldStr == 0)</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/>cout &lt;&lt; </text:span><text:span text:style-name="T33">&quot;Hello, world!&quot;</text:span><text:span text:style-name="T12"> &lt;&lt; </text:span><text:span text:style-name="T35">endl</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/></text:span><text:span text:style-name="T4">else</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="12"/>cout &lt;&lt; helloWorldStr &lt;&lt; </text:span><text:span text:style-name="T35">endl</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="Text_20_body">Loading of a ASIC which can be patched contains two stages. In the first phase external CPU (also called a host processor) loads some firmware to the ASIC RAM – there is a dedicated hardware/boot firmware which supports load of the application firmware to the RAM. An alternative can be that boot code in the ASIC loads the application firmware from some external programmable memory chip, for example EEPROM or SPI FLASH. The second phase is when boot jumps to the application code in the RAM. If the code loaded by the host processor contains non-zero at the address helloWorldStr the ROM based application code will print a new string. I am calling this type of patch Patch Type A. In the patch type A I fix part of the function. </text:p>
   <text:p text:style-name="P47">For the Patch type B I need hardware support. If the CPU fetches an instruction from a specific address or a range of addresses – in case of the code below this is an address of the function printHello(), I want to receive interrupt and switch control to the interrupt handler located in the RAM. Default interrupt handler does nothing – it is empty and simply returns allowing the function printHello() to complete it&apos;s useful work. Patched interrupt handler can modify the string “Hello, world” in the RAM before letting the function printHello() to print it The interrupt handler can execute some arbitrary code and return the control to the caller of the printHello() skipping the original print code completely.</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">class</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T28">HelloWorld</text:span><text:span text:style-name="T12"> {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">public</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T14">HelloWorld</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="8"/>printHello();</text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T4">protected</text:span><text:span text:style-name="T12">:</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="4"/></text:span><text:span text:style-name="T4">void</text:span><text:span text:style-name="T12"> </text:span><text:span text:style-name="T14">printHello</text:span><text:span text:style-name="T12">() {</text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="T12"><text:s text:c="8"/>cout &lt;&lt; </text:span><text:span text:style-name="T33">&quot;Hello, world!&quot;</text:span><text:span text:style-name="T12"> &lt;&lt; </text:span><text:span text:style-name="T35">endl</text:span><text:span text:style-name="T12">;</text:span></text:p>
   <text:p text:style-name="P15"><text:s text:c="4"/>}</text:p>
   <text:p text:style-name="P15">};</text:p>
   <text:p text:style-name="P47">For Patch Type C I need support in the linker script. I want to place constructor of the HelloWorld in the RAM, but method printHello() I want to execute in the RAM. If the HelloWorld constructor calls a function in the RAM I can easily patch the function code. </text:p>
  </office:text>
 </office:body>
</office:document>