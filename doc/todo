
https://graphics.stanford.edu/~seander/bithacks.html
http://www.careercup.com/
http://www.poemofquotes.com/funny-quotes/computer-nerds.php
http://mithileshjoshi.blogspot.co.il/2015/08/every-programmers-see-at-1-time.html
C++ guidelines https://isocpp.org/blog/2015/09/bjarne-stroustrup-announces-cpp-core-guidelines

http://puddleofriddles.blogspot.co.il/2011/07/basketball-riddle.html
http://yosefk.com/c++fqa/  Why not C++


Here is a first hand story. Some time ago I applied for a job at an algo trading shop. Before they started any interview process I was asked to 
write in real-time online environment programming (C/C++) solution for 3 non-trivial algorithmic problems. 
I was allowed total 160 minutes for this. Naturally I entered Google.com. 
In less than 5 minutes I have discovered solutions for all three. 
By my estimation 160 minutes were barely enough to translate the solution in Java - the one I found - to C and run unitest 
and see if it works. I personally know people who work in the middle management positions. These are smart guys, but they are not there. 
They are not and never was able to find a solution for these kind of problems, neither implement a solution with such time constrain. 


One writing thread, N reading threads. In between a queue of messages. 
How to implement a synchronization message - a message which will be processed only after all reading threads
complet their work.

Travel single linked list in the reverse order. Tip switch direction of the links - O(n) Check that the question is not 
duplicated.


Block diagram for the bakcup system which target backup of the virtual machines - scalable, reliable. 
How many threads should be in the backup? Tip: if the CPU/IO is not a bottleneck and networking 
is the main bottleneck (typical) two thread read/write should be sufficient
to move the data between network interfaces
How to scale the system while keeping the united frontend/management system?
What is the performance of the modern I/O? Tip: consider 128 DDR bus. 
When the CPU will be a bottleneck? Tip: deduplication, real time compression

Different between mutex and a binary semaphore? Tip: mutex is context aware. Only a thread which locks a mutex can free the mutex.
The mutext owner can enter the critical section protected by the mutex multiple times. 

There is a single writer and multiple reader threads. How to implement a mutex protected a data base? 
Tip: in Linux you can use a conditional variable.
Tip2: a global variable discribes a state of the data base - writing, reading. Before a thread enters the critical section it shall check 
and probably modify the state. The test-modify operation shall be atomic.

    

Implemet three functions which manipulate a binary tree:

void insert(node **root, int val)
node *delete(node *root, int val)
void print(node *root)


You have a storage (a hard disk) and two or more servers which can access the storage concurrently. A block write/read is an atomic operation. 
How mutex can be implemented? Tip: https://en.wikipedia.org/wiki/Peterson%27s_algorithm

// Implement following class
class Bandwidth
{
 	void notify(unsigned);
	unsiged byetsPerSecond();
	const unsigned WINDOW_SIZE = 500; //ms
}

// Assume that exists function
extern unsigned getTimeMs();


The system has two inpiuts and four outputs. Implement a thrad which reads the inputs and write outputs. 
Insure fairness between the outputs. You have following functions
void select(fdW[], fdR[])
bool isReady(fd)
void write(fd, buffer)
void read(fd, buffer)

Tip: maintane a list of output fds where the latest used output moves to the end of the list.



class Base 
{ 
public : 
virtual void X() 
{ 
cout << "X in parent" << endl; 
} 
}; 

class Child : public Base 
{ 
public : 
virtual void X() 
{ 
cout << "X in child" << endl; 
} 

void Y() 
{ 
cout << " Y in child" << endl; 
} 
}; 


int main() 
{ 
Child c; 
Base b = c; 
b.X();	

Base *ptr = new Child(); 
ptr->X();	// how is this call different from "b.X()" 
return 0; 
} 

Output : 
X in parent 
X in child


Implement a thread pool 

Implement a timer using hash table, hash key is based on the expiration tick



Real programmers do not comment their code. It was hard to write, it should be hard to understand.

Programer needs job, Willing to do Windows.


     

Hello

-Assume most recent language standard are available (ES5, SE8, C11, C++11...).
- We expect good performance.
- If missing more requirements details, just make reasonable assumptions of
  your own.
- Solution must be simple and compact.
  No defensive coding, no comments, no unrequested features.
  Only one file 10-20 lines of code
- Work only inside Google Docs: no external editor/IDE/debugger, no copy-paste
  to/from such an editor. We must see the flow of how you write the code.

Implement function check (text) which checks whether brackets within text are
correctly nested. You need to consider brackets of three kinds: (), [], {}.


Examples:
    
check("a(b)") -> true
check("[{}]") -> true
check("[(]") -> false
check("}{") -> false
check("z([{}-()]{a})") -> true
check("") -> true



#!/usr/bin/env python
# -*- coding: utf-8 -*-
def checkP1arentheses(s):
    stack = []
    openningP1arentheses = ['{', '[', '('] 
    closingP1arentheses = ['}', ']', ')'] 
    pairs = {'}':'{', ']':'[', ')':'('}
    for ch in s:
        if ch in openningP1arentheses:
            stack.append(ch)
        elif (ch in closingP1arentheses):
            if (len(stack) == 0):
                return False
            translatedCh = pairs[ch]
            stackTop = stack[-1]
            if (stackTop == translatedCh):
                stack.pop()
            else:
                return False
                
    return (len(stack) == 0)


testLines =  ['1{2}3', '1(2)3', '1[2]3', '1[2(3)4]5', '1{2(3}4)5', "1}2{3", "1{"]
for line in testLines:
    print line, ":", checkP1arentheses(line)



// Implement following class
class Bandwidth
{
        void notify(unsigned);
        unsiged byetsPerSecond();
        const unsigned WINDOW_SIZE = 500; //ms
}

// Assume that exists function
extern unsigned getTimeMs();

Deliver packets from one side to another side of the cloud and feed the packets to the processing server at fixed latency. 


The system has two inpiuts and four outputs. Implement a thrad which reads the inputs and write outputs.
Insure fairness between the outputs. You have following functions
void select(fdW[], fdR[])
bool isReady(fd)
void write(fd, buffer)
void read(fd, buffer)

Tip: maintane a list of output fds where the latest used output moves to the end of the list.


class CGpio
{
public:

	//! Create GPIO
	//!
	//! \arg gpioGroup	- GPIO group (i.e. 'A', 'B', etc)
	//! \arg gpioNum	- GPIO number within the group (0..31)
	CGpio( char gpioGroup,  U8 gpioNum );

	//! Close the GPIO
	virtual ~CGpio();

	//! Set GPIO direction to input
	void setInput( void );

	//! Set GPIO direction to output
	void setOutput( void );

	//! Set GPIO direction to output with initial value
	void setOutput( U8 value);

	//! Write GPIO value
	//!
	//! \arg value - 0 or 1
	void write( U8 value );

	// Read GPIO value
	//!
	//! \return 0 or 1
	U8 read( void );

private:

	// Memory mapped IO
	U8* m_memMapIo;

	// Mask of the pin in registers
	U32 m_pinMask;
};
CGpio::CGpio( char gpioGroup,  U8 gpioNum )
{
	// Map the IO region if was not done so before
	if ( !CMemMap::isMapped( g_memMap ) )
	{
		CMemMap::mapRegion( g_memMap );
	}

	// Get pointer to relevant IO registers
	m_memMapIo = (U8*)g_memMap.m_vmAddress + (PIO_BASE & PIO_MAP_MASK) + (0x200 * (gpioGroup-'A'));

	// Get pin mask
	m_pinMask = BIT(gpioNum);

	// Enable IO
	IO_REG(GPIO_ENABLE) = m_pinMask;

	// Set as input by default
	setInput();
}




Problem
===========
Simplify the implementation below as much as you can. 
Even better if you can also improve performance as part of the simplification!
FYI: This code is over 35 lines and over 300 tokens, but it can be written in
5 lines and in less than 60 tokens.

#include <stdlib.h>
char *func(char *s, char a, char b)
{
    char *aptr;
    char *bptr;
    char *res;
    int i;
    if (s[0] == '\0')
    {
        if ((a == '\0') || (b == '\0'))
            return &(s[0]);
        else
            return NULL;
    }
    i = 0;
    aptr = NULL;
    bptr = NULL;
    while (aptr == NULL && bptr == NULL)
    {
        if (s[i] == a)
            aptr = s+i;
        if (s[i] == b)
            bptr = s+i;
        if (s[i] == '\0')
        {
            if ((aptr != s+i) && (bptr != s+i))
            return NULL;
        }
        i++;
    }

    if (aptr == NULL)
        res = bptr;    
    else if (bptr == NULL)
        res = aptr;        
    else if (aptr < bptr)
        res = aptr;
    else if (bptr < aptr)
        res = bptr;
    else
        res = aptr;

    return res;
}


char *func_v2(char *s, char a, char b)
{
	char *aptr = NULL;
	char *bptr = NULL;
	while (aptr == NULL && bptr == NULL && (*s || !a || !b)  )
	{
		if (*s == a) aptr = s;
		if (*s == b) bptr = s;
		s++;
	}
	if (aptr != NULL) return aptr;
	if (bptr != NULL) return bptr;
	return NULL;
}


Write a function which accepts one of the two integers 5 and 7 and returns the second integer.
The programming language does not have conditions if ... else Suggest at least 3 different solutions

int swap_5_7(int arg)
{
   return (35/arg);
}

int swap_5_7(int arg)
{
   return arg ^ 0x02;
}

int swap_5_7(int arg)
{
   static int const RES[] = {7,0,5}
   return (RES[arg-5]);
}

int swap_5_7(int arg)
{
   return (arg+((x & 2) >> 1)*(-1));
}

int swap_5_7(int arg)
{
   return (5-arg)+7;
}


Calculate Pi with complecity O(N). Tip: divide the circle by N vertical bars. 
Height (square of) of the bar is R^2-x^2. Nuymber of bars is N. 

Frog jumps from stone to stone or can jump over one stone (2 stones distance). 
Write a function which returns number of ways the frog can cross X stones
See http://www.careercup.com/question?id=9707061

Print all 1000 digits numbers 

Difference between float and double

Implement macro offsetof()

How kernel knows thread ID of the calling thread?
Tip - structure thread_info is stored on the stack of the thread.



How the following code can cause an exception:

float get(obj* v, bool* ok) {
  float c;
  if(v->valid) {
    *ok = true;
    c = v->a + v->b;
  }
  else {
   *ok = false; //not ok, so don't expect anything from c
  }
  return c;
}
Tip:Signalling NaN


"They pretend to pay us, and we pretend to work." C++ pretends to provide an object-oriented data model, C++ programmers pretend to respect it, and everyone pretends that the code will work. 


What is "kernel markers" in the Linux kernel?


Purpose of immediate values

An immediate value is used to compile into the kernel variables that sit within
the instruction stream. They are meant to be rarely updated but read often.
Using immediate values for these variables will save cache lines.
This infrastructure is specialized in supporting dynamic patching of the values
in the instruction stream when multiple CPUs are running without disturbing the
+normal system behavior.

Compiling code meant to be rarely enabled at runtime can be done using
if (unlikely(imv_read(var))) as condition surrounding the code. The
smallest data type required for the test (an 8 bits char) is preferred, since
some architectures, such as powerpc, only allow up to 16 bits immediate values.

What is "mcount" and flag --pg in gcc?


What does the following C code

include <stdio.h>

int main()
{
        int a,b,c;
        int l = ({a=0;b=1;c=2;});
        printf("l=%d\r\n", l);
}


what is wrong with the following macro. Moshik wrote "Bugfix: The moron who wrote actual code that runs inside assert statements should be beaten..."
#define AZ(foo)        do { assert((foo) == 0); } while (0)
Mooshik code
#define AZ(foo)        do { if ((foo) != 0) printf("assert"); } while (0)



When pselect() as compared to select() should be used?


Provide example of imperative and declarative programming languages


strncpy or strlcpy or s_strncpy?


Under what circumstances the following C code can casue sgementation fault exception 

/* main.c */

int main()
{
	printf("%s\n", get_hello());
}


/* hello.c */
const char *get_hello()
{
	return "Hello, world";
}


Tip: on 64 bits architecture w/o a prototype return code of get_hello() is assumed "int" which is wrong. 


What the following code does and how it does 

template <typename T, size_t S> char (&m_h( T (&)[S]))[S];
#define m(pArray) sizeof(m_h(pArray))

int main ()
{
	int a[3];
	printf("%d\n", m(a));
}


Flipping a coin 3 times, and given your opponent has chosen HHH, if you choose THH in return, on average you are 7 times more likely to win. For HHT 3 time more likely.   
Tip Penney Ante: Counterintuitive
Probabilities in Coin Tossing
https://lnkd.in/biVqAqF
Another form of a question Suppose you were to keepflipping a coin until it landed either HTHHT
or HHHHH on five consecutive flips. Which of these two sequences
would you predict would occur first?
And follow up question Which would be the most likely result, HH or HT, if you kept flipping a
coin until you got one or the other?


A hare and a tortoise move toward to each other. Hare starts and covers 1/2 of the way, tortoise is next and covers 1/4 (half of the rest). Rabbit follows with half of the rest or 1/8 of the total. 
Where do they meet?
Answer: 1/3 - sum of 1/2,1/8,1/32,1/128 

write implementation of sprintf for %d argument - access to the stack

two glasses wine and water. one sppon of water from the water glass to the wine glass. after that one spoon from the wine glass to the glass of water. Does have a glass of water contain more wine than the glass of wine contains of water
https://en.wikipedia.org/wiki/Wine/water_mixing_problem


https://projecteuler.net/archives Write code which solves porblems 25,46,50




1.What is LILO?
• LILO is Linux Loader is a boot loader for Linux. It is used to load Linux into the memory and start the Operating system. LILO can be configured to boot other operating systems as well. LILO is customizable, which means that if the default configuration is not correct, it can be changed. Config file for LILO is lilo.conf.
• LILO is also a code snippet which loads PC BIOS into the main memory at the time of starting the computer system. It handles the following tasks:
-Locating Linux kernel
-Identifying other supporting programs and loading them in the memory
-Starting Kernel
• The selection of various kernel images and boot routines is supported by LILO. For this reason, it is known as boot manager.
2.You wish to print a file ‘draft’ with 60 lines on a page. What command would you use?
The command used: pr -l60 draft
– The default page length when using pr is 66 lines.
– The -l option specifies a different length.
3.What is LD_LIBRARY_PATH?
• LD_LIBRARY_PATH is an environment variable. It is used for debugging a new library or a non-standard library. It is also used to identify what directories need to be searched. Path to search for directories needs to given.
• The variable can be set using setenv—LD_LIBRARY_PATH–$PATH
• It is used to search for the shared objects / dynamic libraries by the operating system for extendable functionality at runtime.
4.Name a service that you should disable (which acts both as Web and FTP Server) on a Linux Server.
The finger service should be disabled because a remote user can get important information about the system by using that command.
5.What does Sar provide? Where are Sar logs stored?
Sar collects, reports, or saves system activity information, sar serves to log and evaluate a variety of information regarding system activity. With performance problems, sar also permits retroactive analysis of the load values for various sub-systems (CPUs, memory, disks, interrupts, network interfaces and so forth) and limitation of problems in this manner. If CPU utilization is near 100 % (user + nice + system), the workload sampled is CPU-bound.
By default, log files of Sar command is located at /var/log/sa/sadd file, where dd parameter indicates the current day.
6.How to check Memory stats and CPU stats as a Linux admin?
Using ‘free’ & ‘vmstat’ command, we can display the physical and virtual memory statistics, respectively. With the help of ‘sar’ command, we can see the CPU utilization & other stats.
7.How to reduce or shrink the size of LVM partition?
Below are the logical steps to reduce size of LVM partition :
-Unmount the filesystem using unmount command,
– Use resize2fs command , e.g resiz2fs /dev/mapper/myvg-mylv 10G
-Now use the lvreduce command as lvreduce -L 10G /dev/mapper/myvg-mylv
The above Command will shrink the size LVM partition and fixes the filesystem size to 10GB.
8.What are the different modes of Network bonding in Linux?
Below are list of modes used in Network Bonding:
• balance-rr or 0 – round-robin mode for fault tolerance and load balancing.
• active-backup or 1 – Sets active-backup mode for fault tolerance.
• balance-xor or 2 – Sets an XOR (exclusive-or) mode for fault tolerance and load balancing.
• broadcast or 3 – Sets a broadcast mode for fault tolerance. All transmissions are sent on all slave interfaces.
• 802.3ad or 4 – Sets an IEEE 802.3ad dynamic link aggregation mode. Creates aggregation groups that share the same speed & duplex settings.
• balance-tlb or 5 – Sets a Transmit Load Balancing (TLB) mode for fault tolerance & load balancing.
• balance-alb or 6 – Sets an Active Load Balancing (ALB) mode for fault tolerance & load balancing.
9.How to check and verify the status of the bond interface?
Using the command ‘cat /proc/net/bonding/bond0,’ we can check what mode is enabled and what LAN cards are used in this bond. In this example, we have one one bond interface. However, we can have multiple bond interfaces like bond1, bond2 and so on.
10.How can you enhance the security of password file?
Linux keep user account information in a text file called /etc/passwd. This file also stores one way encrypted password. It is accessed by several tools to get user information, which is a security risk, so file need to ‘Word Readable.’ To minimize the security risk, you can use shadow password format. This method saves account information in regular file /etc/passwd. However, the password is stored as a single “x” character (not actually stored in this file). A second file, called “/etc/shadow” contains encrypted password as well as other information such as account or password expiration values, etc. The /etc/shadow file is readable only by the root account and is therefore less of a security risk
11.What command can you use to make a tape archive file of a /home directory and send it to the /dev/tape device?
The correct command is tar -cvf /dev/tape /home.
The -xvf option is used to extract files from an archive.
12.Suppose your FTP Server is hacked and the entire server needs to be restored. How should you restore the original kernel system files?
You cannot restore the entire operating system from tape backup device. So you should reinstall the core operating system, and then restore system configuration files and user data from tape backup device.
13.Why should you avoid Telnet to administer a Linux system remotely?
Telnet uses most insecure method for communication. It sends data across the network in plain text format and anybody can easily find out the password using the network tool. In the case of Telnet, these include the passing of login credentials in plain text, which means anyone running a sniffer on your network can find the information he needs to take control of a device in a few seconds by eavesdropping on a Telnet login session.
14.What is Puppet Server?
Puppet is an open-source & enterprise software for configuration management toll in UNIX like operating system. Puppet is an IT automation software that is used to push configuration to its clients (puppet agents) using code. Puppet code can do multiple tasks from installing new software to checking file permissions to updating user accounts.
15.What is the difference between Cron and Anacron?
a) Minimum granularity with Cron is minute while it is in days with Anacron.
b) Cron job can be scheduled by any normal user while Anacron can be scheduled only by the super user (the superuser is a special user account used for system administration. Depending on the operating system (OS), the actual name of this account might be root,administrator, admin or supervisor)
c) Cron expects the system to be up and running while the Anacron doesn’t expect the system to be up and running all the time. In case of Anacron, if a job is scheduled and the system is down that time, it will execute the job as soon as the system is up and running.
d) Cron is ideal for servers while Anacron is ideal for desktops and laptops.
e) Cron should be used when you want a job to be executed at a particular hour and minute while Anacron should be used in when the job can be executed irrespective of the hour and minute.
16.What command is used to check the number of files, disk space and each user’s defined quota?
repquota command is used to check the status of the user’s quota along with the disk space and number of files used.
This command gives a summary of the user’s quota that how much space and files are left for the user. Each user has a defined quota in Linux. This is done mainly for the security as some users have only limited access to files. This provides a security to the files from unwanted access. The quota can be given to a single user or to a group of users.
17.What is the name and path of the main system log?
By default, the main system log is ‘/var/log/messages’. This file contains all the messages and the script written by the user. By default, all scripts are saved in this file. This is the standard system log file, which contains messages from all system software, non-kernel boot issues, and messages that go to ‘dmesg’. dmesg is a system file that is written upon system boot.
18.Can Linux computer be made a router so that several machines may share a single Internet connection? How?
Yes, a Linux machine can be made a router. This is called “IP Masquerade.” IP Masquerade is a networking function in Linux similar to the one-to-many (1: Many) NAT (Network Address Translation) servers found in many commercial firewalls and network routers. The IP Masquerade feature allows other “internal” computers connected to this Linux box (via PPP, Ethernet, etc.) to also reach the Internet as well. Linux IP Masquerading allows this functionality even if the internal computers do not have IP addresses.
The IP masquerading can be done by the following steps: 
• The Linux PC must have an internet connection and a connection to LAN. Typically, the Linux PC has two network interfaces-an Ethernet card for the LAN and a dial-up PPP connection to the Internet (through an ISP).
• All other systems on your LAN use the Linux PC as the default gateway for TCP/IP networking. Use the same ISP-provided DNS addresses on all systems.
• Enable IP forwarding in the kernel. By default the IP forwarding is not enabled. To ensure that IP forwarding is enabled when you reboot your system, place this command in the /etc/rc.d/rc.local file.
• Run /sbin/iptables-the IP packet filter administration program-to set up the rules that enable the Linux PC to masquerade for your LAN.
19.How to change window manager by editing your home directory?
“/.xinitrc file” allows changing the window manager we want to use when logging into X from that account. The dot in the file name shows you that the file is a hidden file and doesn’t show when you do a normal directory listing. For setting a window manager we have to save a command in this file. The syntax of command is: exec windowmanager. After this, save the file. Next time when you run a startx a new window manager will open and become default.
The commands for starting some popular window managers and desktop environments are:
-KDE = startkde
-Gnome = gnome-session
-Blackbox = blackbox
-FVWM = fvwm
-Window Maker = wmaker
-IceWM = icewm
20.How shadow passwords are given by in Linux?
pwconv command is used for giving shadow passwords. Shadow passwords are given for better system security. The pwconv command creates the file /etc/shadow and changes all passwords to ‘x’ in the /etc/passwd file. First, entries in the shadowed file which don’t exist in the main file are removed. Then, shadowed entries which don’t have `x’ as the password in the main file are updated. Any missing shadowed entries are added. Finally, passwords in the main file are replaced with `x’. These programs can be used for initial conversion as well to update the shadowed file if the main file is edited by hand.
21.What daemon is used for scheduling of the commands?
The crontab command is used for scheduling of the commands to run at a later time.
SYNTAX
crontab [ -u user ] file
crontab [ -u user ] { -l | -r | -e }
Options
-l List – display the current crontab entries.
-r Remove the current crontab.
-e Edit the current crontab using the editor specified by the VISUAL or EDITOR environment variables.
When user exits from the editor, the modified crontab will be installed automatically. Each user can have their own crontab, and though these are files in /var, they are not intended to be edited directly.
If the –u option is given than the crontab gives the name of the user whose crontab is to be tweaked. If it is given without this then it will display the crontab of the user who is executing the command.
22.What shell does a Linux Administrator assign to a POP3 mail-only account?
POP3 mail only account is assigned to the /bin/false shell. However, assigning bash shell to a POP3 mail only gives user login access, which is avoided. /bin/nologin can also be used. This shell is provided to the user when we don’t want to give shell access to the user. The user cannot access the shell and it rejects shell login on the server as in Telnet. It is mainly for the security of the shells.
POP3 is basically used for downloading mail to mail program. So for illegal downloading of emails on the shell, this account is assigned to the /bin/false shell or /bin/nologin. These both shells are same as they both do the same work of rejecting the user login to the shell. The main difference between these two shells is that false shell shows the incorrect code and any unusual coding when user login to it. But the nologin shell simply tells that no such account is available. So nologin shell is used often in Linux.
23.If a volume group named VG0 already exists and we need to extend this volume group up to 4GB. How will you do it?
• Firstly create Physical volume (/dev/sda7) of size 4GB.
• Now run following command.
vgextend VG0 /dev/sda7
24.Is there any relation between modprobe.conf file and network devices?
Yes, this file assigns a kernel module to each network device.
For Example:-
[root@localhost ~]# cat /etc/modprobe.conf
alias eth0 b44
Here, b44 is the kernel module for network device eth0.
We can confirm whether this module “b44” is present or not by the following command
[root@localhost ~]# lsmod |grep b44
b44 29005 0
25.What is YUM?
YUM stands for Yellow dog Updater, Modified because it is based on YUP, the Yellow dog Updater. Where does the name Yellow dog come from? Yellow Dog is a version of Linux for the Power Architecture hardware and is RPM-based, just like Red Hat Enterprise Linux and Fedora. YUP, and later YUM, were written by the Linux community as a way to maintain an RPM-based system
26.What is the role of “Kudzu”?
Kudzu is used to detect new Hardware. RedHat Linux runs a hardware discoverer, named kudzu. When attempting to identify a serial port Kudzu resets the serial port. This stops the serial console. Kudzu is configured from the file/etc/sysconfig/kudzu.
Kudzu can be prevented from resetting hardware, by setting the configuration parameter SAFE to yes.
27.What is the difference between ext2 and ext3 file systems?
• The ext3 file system is an enhanced version of the ext2 file system.
• The most important difference between Ext2 and Ext3 is that Ext3 supports journaling.
• After an unexpected power failure or system crash (also called an unclean system shutdown), each mounted ext2 file system on the machine must be checked for consistency by the e2fsck program. This is a time-consuming process and during this time, any data on the volumes is unreachable.
• The journaling provided by the ext3 file system means that this sort of file system check is no longer necessary after an unclean system shutdown. The only time a consistency check occurs using ext3 is in certain rare hardware failure cases, such as hard drive failures. The time to recover an ext3 file system after an unclean system shutdown does not depend on the size of the file system or the number of files. Rather, it depends on the size of the journal used to maintain consistency. The default journal size takes almost a second to recover, depending on the speed of the hardware.
28.Explain /proc filesystem?
/proc is a virtual file system that provides detailed information about Linux kernel, hardware and running processes. Files under /proc directory named as Virtual files.
Since /proc contains virtual files, it is called virtual file system. These virtual files have unique qualities. Most of them are listed as zero bytes in size.
Virtual files such as /proc/interrupts, /proc/meminfo, /proc/mounts, and /proc/partitions provide an up-to-the-moment glimpse of the system’s hardware. Others: /proc/filesystems file and the /proc/sys/ directory provide system configuration information and interfaces.
29.How do you create ext4 file system?
# mke2fs -t ext4 /dev/DEV
30.How to Enable ACLs for /home partition?
Add following entry in /etc/fstab
LABEL=/home /home ext3 acl 1 2
Now remount /home partition with acl option.
mount -t ext3 -o acl /dev/sda3 /home



What is the smallest number divisible by 225 that consists of all 1's and 0's?
